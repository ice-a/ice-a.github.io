<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>超级超大流量卡</title>
      <link href="/2099/06/07/%E8%BA%BA%E5%B9%B3%E8%AE%A1%E5%88%92/%E8%B6%85%E5%A4%A7%E6%B5%81%E9%87%8F%E5%8D%A1/"/>
      <url>/2099/06/07/%E8%BA%BA%E5%B9%B3%E8%AE%A1%E5%88%92/%E8%B6%85%E5%A4%A7%E6%B5%81%E9%87%8F%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="超大流量卡-下单激活联系我次月返月租"><a href="#超大流量卡-下单激活联系我次月返月租" class="headerlink" title="超大流量卡,下单激活联系我次月返月租"></a>超大流量卡,下单激活联系我次月返月租</h1><h2 id="邮箱-108-x65-x65-64-x68-x6c-100-115-x2e-102-x75-110"><a href="#邮箱-108-x65-x65-64-x68-x6c-100-115-x2e-102-x75-110" class="headerlink" title="邮箱:&#108;&#x65;&#x65;&#64;&#x68;&#x6c;&#100;&#115;&#x2e;&#102;&#x75;&#110;"></a>邮箱:<a href="mailto:&#108;&#x65;&#x65;&#64;&#x68;&#x6c;&#100;&#115;&#x2e;&#102;&#x75;&#110;">&#108;&#x65;&#x65;&#64;&#x68;&#x6c;&#100;&#115;&#x2e;&#102;&#x75;&#110;</a></h2><p><img src="https://github.com/ice-a/ice-a/raw/main/01.png"><br><img src="https://github.com/ice-a/ice-a/raw/main/02.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 广告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vpn</title>
      <link href="/2099/01/01/%E7%8E%AF%E5%A2%83/vpn/"/>
      <url>/2099/01/01/%E7%8E%AF%E5%A2%83/vpn/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="XSUS"><a href="#XSUS" class="headerlink" title="XSUS"></a>XSUS</h1><p><a href="https://xsus.wiki/#/register?code=KdKha7zn">注册 - XSUS</a><br><img src="http://doc.lideshan.top/media/202405/2024-05-06_104736_8869370.988072787153136.png" alt="image.png"></p><h1 id="OKZTWO"><a href="#OKZTWO" class="headerlink" title="OKZTWO"></a>OKZTWO</h1><p><a href="https://alicloud.alibabacloud-opai.com/index.php/#/register?code=2aq7QUtR">Fetching Title#qd2d</a><br><img src="http://doc.lideshan.top/media/202405/2024-05-06_104705_7024070.3382257156594398.png" alt="image.png"><br><img src="http://doc.lideshan.top/media/202405/2024-05-06_104712_7407610.8430470250532746.png" alt="image.png"></p><h1 id="bigme"><a href="#bigme" class="headerlink" title="bigme"></a>bigme</h1><p><a href="https://app.bigme.pro/user#/register?code=ZTrIUOBr">BigME.Pro</a><br><img src="http://doc.lideshan.top/media/202405/2024-05-06_104644_9264960.3762110703450128.png" alt="image.png"></p><p><img src="http://doc.lideshan.top/media/202405/2024-05-06_104637_1404570.7273158352951568.png" alt="image.png"></p><h1 id="阿伟云"><a href="#阿伟云" class="headerlink" title="阿伟云"></a>阿伟云</h1><p><a href="https://www.awyyds.fun/register?aff=UXuvkKim">注册账户 - 阿伟云</a><br><img src="http://doc.lideshan.top/media/202405/2024-05-06_105021_7254020.7681450558641725.png" alt="image.png"><br><img src="http://doc.lideshan.top/media/202405/2024-05-06_105034_7504270.6035659948937081.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些镜像站</title>
      <link href="/2098/01/01/%E5%85%A5%E9%97%A8/%E9%95%9C%E5%83%8F%E7%AB%99/"/>
      <url>/2098/01/01/%E5%85%A5%E9%97%A8/%E9%95%9C%E5%83%8F%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="清华大学开源镜像站"><a href="#清华大学开源镜像站" class="headerlink" title="清华大学开源镜像站"></a><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">清华大学开源镜像站</a></h1><h2 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure><h2 id="设为默认"><a href="#设为默认" class="headerlink" title="设为默认"></a>设为默认</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h2 id="配置多个镜像源"><a href="#配置多个镜像源" class="headerlink" title="配置多个镜像源"></a>配置多个镜像源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip config set global.extra-index-url &quot;&lt;url1&gt; &lt;url2&gt;...&quot;</span><br><span class="line"># 校园网联合镜像站 https://mirrors.cernet.edu.cn/list/pypi</span><br></pre></td></tr></table></figure><h1 id="商业大佬"><a href="#商业大佬" class="headerlink" title="商业大佬"></a>商业大佬</h1><ul><li><a href="https://developer.aliyun.com/mirror/">阿里镜像站</a></li><li><a href="https://mirrors.163.com/">网易镜像站</a></li><li><a href="https://mirrors.cloud.tencent.com/">腾讯镜像站</a></li><li><a href="https://mirrors.huaweicloud.com/home">华为开源镜像站</a></li></ul><h1 id="教育"><a href="#教育" class="headerlink" title="教育"></a>教育</h1><ul><li><a href="https://mirrors.zju.edu.cn/">浙江大学</a></li><li><a href="https://mirror.lzu.edu.cn/">兰州大学</a></li><li><a href="https://mirror.bjtu.edu.cn/cn/">北京交通大学</a></li><li><a href="http://mirror.neu.edu.cn/">东北大学</a></li><li><a href="http://mirrors.ustc.edu.cn/">中国科学技术大学</a></li><li><a href="https://mirrors.hit.edu.cn/#/home">哈尔滨工业大学</a></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="https://ac.scmor.com/">google学术</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 镜像 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opensource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建自己的云笔记</title>
      <link href="/2024/07/15/%E6%96%87%E6%A1%A3/hexo_github/"/>
      <url>/2024/07/15/%E6%96%87%E6%A1%A3/hexo_github/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>github账号</li></ul><h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在github创建一个仓库，仓库名字为 用户名.github.io</span><br><span class="line">eg:我的主页是 https://github.com/ice-a</span><br><span class="line">用户名就是 ice-a</span><br><span class="line">那么创建就是 ice-a.github.io</span><br></pre></td></tr></table></figure><h1 id="本地搭建hexo"><a href="#本地搭建hexo" class="headerlink" title="本地搭建hexo"></a>本地搭建hexo</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个文件夹</span><br><span class="line">eg: 在桌面建一个文件夹  C:\Users\ice-a\Desktop\hexo_demo</span><br><span class="line">cd C:\Users\ice-a\Desktop\hexo_demo</span><br><span class="line">npm install -g hexo-cli  // 安装hexo</span><br><span class="line">hexo init temp_hexo_demo  // hexo初始化</span><br><span class="line">cd temp_hexo_demo// 切换到路径</span><br><span class="line">npm install// 安装依赖</span><br></pre></td></tr></table></figure><h1 id="修改网站的相关配置"><a href="#修改网站的相关配置" class="headerlink" title="修改网站的相关配置"></a>修改网站的相关配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在 _config.yml 文件内修改</span><br><span class="line">title,等内容</span><br></pre></td></tr></table></figure><h1 id="创建标签及分类文件夹"><a href="#创建标签及分类文件夹" class="headerlink" title="创建标签及分类文件夹"></a>创建标签及分类文件夹</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 标签</span><br><span class="line">hexo new page tags  // 创建完会在source文件夹下有个tags文件夹，修改index.md里边的内容</span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2024-07-13 09:38:12</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">top_img: false</span><br><span class="line">---</span><br><span class="line"># 分类</span><br><span class="line">hexo new page cetegories  // 和tags的同样</span><br><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2024-07-13 10:20:06</span><br><span class="line">aside: false</span><br><span class="line">top_img: false</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="将笔记放入-posts里边即可"><a href="#将笔记放入-posts里边即可" class="headerlink" title="将笔记放入_posts里边即可"></a>将笔记放入_posts里边即可</h1><p><img src="https://img.lideshan.top/i/2024/07/15/6694e2495d339.png" alt="001.png"></p><h1 id="部署在github"><a href="#部署在github" class="headerlink" title="部署在github"></a>部署在github</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">修改 _config.yml的 deploy</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/ice-a/ice-a.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line"></span><br><span class="line">修改大概16行的位置的url</span><br><span class="line">url: https://ice-a.github.io</span><br><span class="line">执行构建并部署</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h1 id="配置githb"><a href="#配置githb" class="headerlink" title="配置githb"></a>配置githb</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setting -&gt; page -&gt; Branch -&gt; master -&gt; save</span><br></pre></td></tr></table></figure><h1 id="等待几分钟就可以访问了"><a href="#等待几分钟就可以访问了" class="headerlink" title="等待几分钟就可以访问了"></a>等待几分钟就可以访问了</h1><p><a href="https://ice-a.github.io/">https://ice-a.github.io/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>部署项目到vercel</title>
      <link href="/2024/07/12/learn/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0vercel/"/>
      <url>/2024/07/12/learn/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0vercel/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>github账号</li><li>vercel(可以通过github登录)</li><li>项目demo</li></ul><h2 id="在github新建一个项目-不想公开的话就不要选择public"><a href="#在github新建一个项目-不想公开的话就不要选择public" class="headerlink" title="在github新建一个项目(不想公开的话就不要选择public)"></a>在github新建一个项目(不想公开的话就不要选择public)</h2><p><img src="https://img.lideshan.top/i/2024/07/12/6690cf28a67da.png" alt="001.png"></p><h2 id="解压项目-上传到github"><a href="#解压项目-上传到github" class="headerlink" title="解压项目,上传到github"></a>解压项目,上传到github</h2><h2 id="打开vercel"><a href="#打开vercel" class="headerlink" title="打开vercel"></a>打开vercel</h2><p><a href="https://vercel.com/">点此进入</a> 使用github账号登录</p><h2 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h2><p>选择刚刚新建的进行导入<br><img src="https://img.lideshan.top/i/2024/07/12/6690cfee83d3f.png" alt="002.png"></p><h2 id="选择vuepress进行部署"><a href="#选择vuepress进行部署" class="headerlink" title="选择vuepress进行部署"></a>选择vuepress进行部署</h2><p><img src="https://img.lideshan.top/i/2024/07/12/6690d0dd84dc5.png" alt="003.png"></p><h2 id="点击部署"><a href="#点击部署" class="headerlink" title="点击部署"></a>点击部署</h2><p>出现这样表示部署完成<br><img src="https://img.lideshan.top/i/2024/07/12/6690d438635f9.png" alt="004.png"></p><h2 id="绑定自己的与域名"><a href="#绑定自己的与域名" class="headerlink" title="绑定自己的与域名"></a>绑定自己的与域名</h2><p>在自己的域名服务商进行设置解析<br><img src="https://img.lideshan.top/i/2024/07/12/6690d4392b232.png" alt="005.png"></p><h1 id="完工"><a href="#完工" class="headerlink" title="完工"></a>完工</h1><p><img src="https://img.lideshan.top/i/2024/07/12/6690d439eac8a.png" alt="006.png"></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些有趣且鲜为人知的 Python 特性</title>
      <link href="/2024/07/12/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/wtf_python/"/>
      <url>/2024/07/12/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/wtf_python/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="来源github"><a href="#来源github" class="headerlink" title="来源github"></a>来源github</h1><p><a href="https://github.com/leisurelicht/wtfpython-cn">github地址</a></p><p>Python, 是一个设计优美的解释型高级语言, 它提供了很多能让程序员感到舒适的功能特性. 但有的时候, Python 的一些输出结果对于初学者来说似乎并不是那么一目了然.</p><p>这个有趣的项目意在收集 Python 中那些难以理解和反人类直觉的例子以及鲜为人知的功能特性, 并尝试讨论这些现象背后真正的原理!</p><p>虽然下面的有些例子并不一定会让你觉得 WTFs, 但它们依然有可能会告诉你一些你所不知道的 Python 有趣特性.  我觉得这是一种学习编程语言内部原理的好办法, 而且我相信你也会从中获得乐趣!</p><p>如果您是一位经验比较丰富的 Python 程序员, 你可以尝试挑战看是否能一次就找到例子的正确答案. 你可能对其中的一些例子已经比较熟悉了, 那这也许能唤起你当年踩这些坑时的甜蜜回忆 :sweat_smile:</p><p>PS: 如果你不是第一次读了, 你可以在<a href="https://github.com/satwikkansal/wtfpython/releases/">这里</a>获取变动内容.</p><p>那么, 让我们开始吧…</p><h1 id="Table-of-Contents-目录"><a href="#Table-of-Contents-目录" class="headerlink" title="Table of Contents&#x2F;目录"></a>Table of Contents&#x2F;目录</h1><!-- TOC --><ul><li><a href="#table-of-contents%E7%9B%AE%E5%BD%95">Table of Contents&#x2F;目录</a></li><li><a href="#structure-of-the-examples%E7%A4%BA%E4%BE%8B%E7%BB%93%E6%9E%84">Structure of the Examples&#x2F;示例结构</a></li><li><a href="#usage%E7%94%A8%E6%B3%95">Usage&#x2F;用法</a></li><li><a href="#-examples%E7%A4%BA%E4%BE%8B">👀 Examples&#x2F;示例</a><ul><li><a href="#section-strain-your-brain%E5%A4%A7%E8%84%91%E8%BF%90%E5%8A%A8">Section: Strain your brain!&#x2F;大脑运动!</a><ul><li><a href="#-First-things-first!/%E8%A6%81%E4%BA%8B%E4%BC%98%E5%85%88-*">&gt; First things first!&#x2F;要事优先 *</a></li><li><a href="#-strings-can-be-tricky-sometimes%E5%BE%AE%E5%A6%99%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2-">&gt; Strings can be tricky sometimes&#x2F;微妙的字符串 *</a></li><li><a href="#-be-careful-with-chained-operations%E5%B0%8F%E5%BF%83%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C">&gt; Be careful with chained operations&#x2F;小心链式操作</a></li><li><a href="#-How-not-to-use-is-operator/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BD%BF%E7%94%A8-is-%E6%93%8D%E4%BD%9C%E7%AC%A6-">&gt; How not to use <code>is</code> operator&#x2F;为什么不使用 <code>is</code> 操作符</a></li><li><a href="#-Hash-brownies%E6%98%AF%E6%97%B6%E5%80%99%E6%9D%A5%E7%82%B9%E8%9B%8B%E7%B3%95%E4%BA%86">&gt; Hash brownies&#x2F;是时候来点蛋糕了!</a></li><li><a href="#-deep-down-were-all-the-same%E6%9C%AC%E8%B4%A8%E4%B8%8A%E6%88%91%E4%BB%AC%E9%83%BD%E4%B8%80%E6%A0%B7-">&gt; Deep down, we’re all the same.&#x2F;本质上,我们都一样. *</a></li><li><a href="#-disorder-within-order/%E6%9C%89%E5%BA%8F%E4%B8%AD%E6%BD%9C%E8%97%8F%E7%9D%80%E6%97%A0%E5%BA%8F-*">&gt; Disorder within order&#x2F;有序中潜藏着无序 *</a></li><li><a href="#-Keep-trying%E4%B8%8D%E5%81%9C%E7%9A%84try-">&gt; Keep trying…&#x2F;不停的try *</a></li><li><a href="#-for-what%E4%B8%BA%E4%BB%80%E4%B9%88">&gt; For what?&#x2F;为什么?</a></li><li><a href="#-evaluation-time-discrepancy%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA%E5%B7%AE%E5%BC%82">&gt; Evaluation time discrepancy&#x2F;执行时机差异</a></li><li><a href="#-is-not--is-not-is-not-is-not--%E4%B8%8D%E6%98%AF-is-not-">&gt; <code>is not ...</code> is not <code>is (not ...)</code> &#x2F; <code>is not ...</code> 不是 <code>is (not ...)</code></a></li><li><a href="#-a-tic-tac-toe-where-x-wins-in-the-first-attempt%E4%B8%80%E8%B9%B4%E5%8D%B3%E8%87%B3">&gt; A tic-tac-toe where X wins in the first attempt!&#x2F;一蹴即至!</a></li><li><a href="#-Schr%C3%B6dingers-variable%E8%96%9B%E5%AE%9A%E8%B0%94%E7%9A%84%E5%8F%98%E9%87%8F-">&gt; Schrödinger’s variable&#x2F;薛定谔的变量 *</a></li><li><a href="#-the-chicken-egg-problem/%E5%85%88%E6%9C%89%E9%B8%A1%E8%BF%98%E6%98%AF%E5%85%88%E6%9C%89%E8%9B%8B-*">&gt; The chicken-egg problem&#x2F;先有鸡还是先有蛋 *</a></li><li><a href="#-subclass-relationships%E5%AD%90%E7%B1%BB%E5%85%B3%E7%B3%BB-">&gt; Subclass relationships&#x2F;子类关系 *</a></li><li><a href="#-Methods-equality-and-identity/%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E7%AD%89%E6%80%A7%E5%92%8C%E5%94%AF%E4%B8%80%E6%80%A7-">&gt; Methods equality and identity&#x2F;方法的相等性和唯一性 *</a></li><li><a href="#-All-true-ation/%E8%BF%94%E5%9B%9ETrue%E7%9A%84all%E5%87%BD%E6%95%B0-">&gt; All-true-ation&#x2F;返回True的all函数 *</a></li><li><a href="#-the-surprising-comma%E6%84%8F%E5%A4%96%E7%9A%84%E9%80%97%E5%8F%B7">&gt; The surprising comma&#x2F;意外的逗号</a></li><li><a href="#-strings-and-the-backslashes%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%8F%8D%E6%96%9C%E6%9D%A0">&gt; Strings and the backslashes&#x2F;字符串与反斜杠</a></li><li><a href="#-not-knot%E5%88%AB%E7%BA%A0%E7%BB%93">&gt; not knot!&#x2F;别纠结!</a></li><li><a href="#-half-triple-quoted-strings%E4%B8%89%E4%B8%AA%E5%BC%95%E5%8F%B7">&gt; Half triple-quoted strings&#x2F;三个引号</a></li><li><a href="#-whats-wrong-with-booleans%E5%B8%83%E5%B0%94%E4%BD%A0%E5%92%8B%E4%BA%86">&gt; What’s wrong with booleans?&#x2F;布尔你咋了?</a></li><li><a href="#-class-attributes-and-instance-attributes%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">&gt; Class attributes and instance attributes&#x2F;类属性和实例属性</a></li><li><a href="#-yielding-none%E7%94%9F%E6%88%90-none">&gt; yielding None&#x2F;生成 None</a></li><li><a href="#-Yielding-from-return/%E7%94%9F%E6%88%90%E5%99%A8%E9%87%8C%E7%9A%84return-">&gt; Yielding from… return!&#x2F;生成器里的return *</a></li><li><a href="#-Nan-reflexivityNan%E7%9A%84%E8%87%AA%E5%8F%8D%E6%80%A7">&gt; Nan-reflexivity&#x2F;Nan的自反性</a></li><li><a href="#-mutating-the-immutable%E5%BC%BA%E4%BA%BA%E6%89%80%E9%9A%BE">&gt; Mutating the immutable!&#x2F;强人所难</a></li><li><a href="#-the-disappearing-variable-from-outer-scope%E6%B6%88%E5%A4%B1%E7%9A%84%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F">&gt; The disappearing variable from outer scope&#x2F;消失的外部变量</a></li><li><a href="#-the-mysterious-key-type-conversion%E7%A5%9E%E7%A7%98%E7%9A%84%E9%94%AE%E5%9E%8B%E8%BD%AC%E6%8D%A2-">&gt; The mysterious key type conversion&#x2F;神秘的键型转换 *</a></li><li><a href="#-lets-see-if-you-can-guess-this%E7%9C%8B%E7%9C%8B%E4%BD%A0%E8%83%BD%E5%90%A6%E7%8C%9C%E5%88%B0%E8%BF%99%E4%B8%80%E7%82%B9">&gt; Let’s see if you can guess this?&#x2F;看看你能否猜到这一点?</a></li><li><a href="#-exceeds-the-limit-for-integer-string-conversion%E6%95%B4%E5%9E%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%B6%8A%E7%95%8C">&gt; Exceeds the limit for integer string conversion&#x2F;整型转字符串越界</a></li></ul></li><li><a href="#section-slippery-slopes%E6%BB%91%E5%9D%A1%E8%B0%AC%E8%AF%AF">Section: Slippery Slopes&#x2F;滑坡谬误</a><ul><li><a href="#-modifying-a-dictionary-while-iterating-over-it%E8%BF%AD%E4%BB%A3%E5%AD%97%E5%85%B8%E6%97%B6%E7%9A%84%E4%BF%AE%E6%94%B9">&gt; Modifying a dictionary while iterating over it&#x2F;迭代字典时的修改</a></li><li><a href="#-stubborn-del-operator%E5%9D%9A%E5%BC%BA%E7%9A%84-del-">&gt; Stubborn <code>del</code> operator&#x2F;坚强的 <code>del</code> *</a></li><li><a href="#-the-out-of-scope-variable%E5%A4%96%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%98%E9%87%8F">&gt; The out of scope variable&#x2F;外部作用域变量</a></li><li><a href="#-deleting-a-list-item-while-iterating%E8%BF%AD%E4%BB%A3%E5%88%97%E8%A1%A8%E6%97%B6%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">&gt; Deleting a list item while iterating&#x2F;迭代列表时删除元素</a></li><li><a href="#-%3E-Lossy-zip-of-iterators/%E4%B8%A2%E4%B8%89%E8%90%BD%E5%9B%9B%E7%9A%84zip-">&gt; Lossy zip of iterators&#x2F;丢三落四的zip *</a></li><li><a href="#-loop-variables-leaking-out%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%E6%B3%84%E6%BC%8F">&gt; Loop variables leaking out!&#x2F;循环变量泄漏!</a></li><li><a href="#-beware-of-default-mutable-arguments%E5%BD%93%E5%BF%83%E9%BB%98%E8%AE%A4%E7%9A%84%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0">&gt; Beware of default mutable arguments!&#x2F;当心默认的可变参数!</a></li><li><a href="#-catching-the-exceptions%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8">&gt; Catching the Exceptions&#x2F;捕获异常</a></li><li><a href="#-same-operands-different-story%E5%90%8C%E4%BA%BA%E4%B8%8D%E5%90%8C%E5%91%BD">&gt; Same operands, different story!&#x2F;同人不同命!</a></li><li><a href="#-name-resolution-ignoring-class-scope%E5%BF%BD%E7%95%A5%E7%B1%BB%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E5%90%8D%E7%A7%B0%E8%A7%A3%E6%9E%90">&gt; Name resolution ignoring class scope&#x2F;忽略类作用域的名称解析</a></li><li><a href="#-rounding-like-a-banker/%E5%83%8F%E9%93%B6%E8%A1%8C%E5%AE%B6%E4%B8%80%E6%A0%B7%E8%88%8D%E5%85%A5-">&gt; Rounding like a banker&#x2F;像银行家一样舍入 *</a></li><li><a href="#-needles-in-a-haystack%E5%A4%A7%E6%B5%B7%E6%8D%9E%E9%92%88">&gt; Needles in a Haystack&#x2F;大海捞针</a></li><li><a href="#-Splitsies%E5%88%86%E5%89%B2%E5%87%BD%E6%95%B0-">&gt; Splitsies&#x2F;分割函数</a></li><li><a href="#-Wild-imports%E9%80%9A%E9%85%8D%E7%AC%A6%E5%AF%BC%E5%85%A5%E6%96%B9%E5%BC%8F-">&gt; Wild imports&#x2F;通配符导入方式 *</a></li><li><a href="#-All-sorted%E9%83%BD%E6%8E%92%E5%BA%8F%E4%BA%86%E5%90%97-">&gt; All sorted?&#x2F;都排序了吗？ *</a></li><li><a href="#-midnight-time-doesnt-exist%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E5%8D%88%E5%A4%9C">&gt; Midnight time doesn’t exist?&#x2F;不存在的午夜?</a></li></ul></li><li><a href="#section-the-hidden-treasures%E9%9A%90%E8%97%8F%E7%9A%84%E5%AE%9D%E8%97%8F">Section: The Hidden treasures!&#x2F;隐藏的宝藏!</a><ul><li><a href="#-okay-python-can-you-make-me-flypython-%E5%8F%AF%E5%90%A6%E5%B8%A6%E6%88%91%E9%A3%9E-">&gt; Okay Python, Can you make me fly?&#x2F;Python, 可否带我飞? *</a></li><li><a href="#-goto-but-whygoto-%E4%BD%86%E4%B8%BA%E4%BB%80%E4%B9%88-">&gt; <code>goto</code>, but why?&#x2F;<code>goto</code>, 但为什么? *</a></li><li><a href="#-brace-yourself%E5%81%9A%E5%A5%BD%E6%80%9D%E6%83%B3%E5%87%86%E5%A4%87-">&gt; Brace yourself!&#x2F;做好思想准备 *</a></li><li><a href="#-lets-meet-friendly-language-uncle-for-life%E8%AE%A9%E7%94%9F%E6%B4%BB%E6%9B%B4%E5%8F%8B%E5%A5%BD-">&gt; Let’s meet Friendly Language Uncle For Life&#x2F;让生活更友好 *</a></li><li><a href="#-even-python-understands-that-love-is-complicated%E8%BF%9EPython%E4%B9%9F%E7%9F%A5%E9%81%93%E7%88%B1%E6%98%AF%E9%9A%BE%E8%A8%80%E7%9A%84-">&gt; Even Python understands that love is complicated&#x2F;连Python也知道爱是难言的 *</a></li><li><a href="#-yes-it-exists%E6%98%AF%E7%9A%84-%E5%AE%83%E5%AD%98%E5%9C%A8">&gt; Yes, it exists!&#x2F;是的, 它存在!</a></li><li><a href="#-Ellipsis%E7%9C%81%E7%95%A5-">&gt; Ellipsis&#x2F;省略 *</a></li><li><a href="#-inpinity%E6%97%A0%E9%99%90-">&gt; Inpinity&#x2F;无限 *</a></li><li><a href="#-Lets-mangle%E4%BF%AE%E9%A5%B0%E6%97%B6%E9%97%B4-">&gt; Let’s mangle&#x2F;修饰时间! *</a></li></ul></li><li><a href="#section-appearances-are-deceptive%E5%A4%96%E8%A1%A8%E6%98%AF%E9%9D%A0%E4%B8%8D%E4%BD%8F%E7%9A%84">Section: Appearances are deceptive!&#x2F;外表是靠不住的!</a><ul><li><a href="#-skipping-lines%E8%B7%B3%E8%BF%87%E4%B8%80%E8%A1%8C">&gt; Skipping lines?&#x2F;跳过一行?</a></li><li><a href="#-teleportation%E7%A9%BA%E9%97%B4%E7%A7%BB%E5%8A%A8-">&gt; Teleportation&#x2F;空间移动 *</a></li><li><a href="#-well-something-is-fishy%E5%97%AF%E6%9C%89%E4%BA%9B%E5%8F%AF%E7%96%91">&gt; Well, something is fishy…&#x2F;嗯, 有些可疑…</a></li></ul></li><li><a href="#section-miscellaneous%E6%9D%82%E9%A1%B9">Section: Miscellaneous&#x2F;杂项</a><ul><li><a href="#--is-faster%E6%9B%B4%E5%BF%AB%E7%9A%84-">&gt; <code>+=</code> is faster&#x2F;更快的 <code>+=</code> </a></li><li><a href="#-lets-make-a-giant-string%E6%9D%A5%E5%81%9A%E4%B8%AA%E5%B7%A8%E5%A4%A7%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%A7">&gt; Let’s make a giant string!&#x2F;来做个巨大的字符串吧!</a></li><li><a href="#-Slowing-down-dict-lookups%E8%AE%A9%E5%AD%97%E5%85%B8%E7%9A%84%E6%9F%A5%E6%89%BE%E6%85%A2%E4%B8%8B%E6%9D%A5-">&gt; Slowing down <code>dict</code> lookups&#x2F;让字典的查找慢下来 *</a></li><li><a href="#-Bloating-instance-dicts/%E5%8F%98%E8%87%83%E8%82%BF%E7%9A%84dict%E5%AE%9E%E4%BE%8B%E4%BB%AC-">&gt; Bloating instance <code>dict</code>s&#x2F;变臃肿的<code>dict</code>实例们 *</a></li><li><a href="#-minor-ones%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9">&gt; Minor Ones&#x2F;小知识点</a></li></ul></li></ul></li><li><a href="#contributing%E8%B4%A1%E7%8C%AE">Contributing&#x2F;贡献</a></li><li><a href="#acknowledgements%E8%87%B4%E8%B0%A2">Acknowledgements&#x2F;致谢</a></li><li><a href="#-license%E8%AE%B8%E5%8F%AF">🎓 License&#x2F;许可</a><ul><li><a href="#help%E5%B8%AE%E5%8A%A9">Help&#x2F;帮助</a></li><li><a href="#surprise-your-geeky-pythonist-friends%E6%83%B3%E7%BB%99%E4%BD%A0%E7%9A%84%E6%9E%81%E5%AE%A2%E6%9C%8B%E5%8F%8B%E4%B8%80%E4%B8%AA%E6%83%8A%E5%96%9C">Surprise your geeky pythonist friends?&#x2F;想给你的极客朋友一个惊喜?</a></li><li><a href="#need-a-pdf-version%E9%9C%80%E8%A6%81%E6%9D%A5%E4%B8%80%E4%BB%BDpdf%E7%89%88%E7%9A%84">Need a pdf version?&#x2F;需要来一份pdf版的?</a></li><li><a href="#follow-commit%E8%BF%BD%E8%B8%AACommit">Follow Commit&#x2F;追踪Commit</a></li><li><a href="#996icu">996.icu</a></li></ul></li></ul><!-- /TOC --><h1 id="Structure-of-the-Examples-示例结构"><a href="#Structure-of-the-Examples-示例结构" class="headerlink" title="Structure of the Examples&#x2F;示例结构"></a>Structure of the Examples&#x2F;示例结构</h1><p>所有示例的结构都如下所示:</p><blockquote><h3 id="一个精选的标题"><a href="#一个精选的标题" class="headerlink" title="&gt; 一个精选的标题 *"></a>&gt; 一个精选的标题 *</h3><p>标题末尾的星号表示该示例在第一版中不存在，是最近添加的.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 准备代码.</span></span><br><span class="line"><span class="comment"># 释放魔法...</span></span><br></pre></td></tr></table></figure><p><strong>Output (Python version):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>触发语句</span><br><span class="line">出乎意料的输出结果</span><br></pre></td></tr></table></figure><p>(可选): 对意外输出结果的简短描述.</p><h4 id="💡-说明"><a href="#💡-说明" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>简要说明发生了什么以及为什么会发生.<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">如有必要, 举例说明</span><br></pre></td></tr></table></figure><strong>Output:</strong><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>触发语句 <span class="comment"># 一些让魔法变得容易理解的例子</span></span><br><span class="line"><span class="comment"># 一些正常的输入</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><p><strong>注意:</strong> 所有的示例都在 Python 3.5.2 版本的交互解释器上测试过, 如果不特别说明应该适用于所有 Python 版本.</p><h1 id="Usage-用法"><a href="#Usage-用法" class="headerlink" title="Usage&#x2F;用法"></a>Usage&#x2F;用法</h1><p>我个人建议, 最好依次阅读下面的示例, 并对每个示例:</p><ul><li>仔细阅读设置例子最开始的代码.  如果您是一位经验丰富的 Python 程序员, 那么大多数时候您都能成功预期到后面的结果.</li><li>阅读输出结果,<ul><li>确认结果是否如你所料.</li><li>确认你是否知道这背后的原理.<ul><li>如果不知道, 深呼吸然后阅读说明 (如果你还是看不明白, 别沉默! 可以在<a href="https://github.com/satwikkansal/wtfPython">这</a>提个 issue).</li><li>如果知道, 给自己点奖励, 然后去看下一个例子.</li></ul></li></ul></li></ul><p>PS: 你也可以在命令行阅读 WTFpython. 我们有 pypi 包 和 npm 包(支持代码高亮).(译: 这两个都是英文版的)</p><p>安装 npm 包 <a href="https://www.npmjs.com/package/wtfpython"><code>wtfpython</code></a></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install -g wtfpython</span><br></pre></td></tr></table></figure><p>或者, 安装 pypi 包 <a href="https://pypi.python.org/pypi/wtfpython"><code>wtfpython</code></a></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install wtfpython -U</span><br></pre></td></tr></table></figure><p>现在, 在命令行中运行 <code>wtfpython</code>, 你就可以开始浏览了.</p><hr><h1 id="👀-Examples-示例"><a href="#👀-Examples-示例" class="headerlink" title="👀 Examples&#x2F;示例"></a>👀 Examples&#x2F;示例</h1><h2 id="Section-Strain-your-brain-大脑运动"><a href="#Section-Strain-your-brain-大脑运动" class="headerlink" title="Section: Strain your brain!&#x2F;大脑运动!"></a>Section: Strain your brain!&#x2F;大脑运动!</h2><h3 id="First-things-first-要事优先"><a href="#First-things-first-要事优先" class="headerlink" title="&gt; First things first!&#x2F;要事优先 *"></a>&gt; First things first!&#x2F;要事优先 *</h3><!-- Example ID: d3d73936-3cf1-4632-b5ab-817981338863 --><!-- read-only --><p>众所周知，Python 3.8 推出”海象”运算符 (<code>:=</code>) 方便易用，让我们一起看看。</p><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 版本 3.8+</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;wtf_walrus&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;wtf_walrus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a := <span class="string">&quot;wtf_walrus&quot;</span></span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    a := <span class="string">&quot;wtf_walrus&quot;</span></span><br><span class="line">      ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(a := <span class="string">&quot;wtf_walrus&quot;</span>) <span class="comment"># 该语句有效</span></span><br><span class="line"><span class="string">&#x27;wtf_walrus&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;wtf_walrus&#x27;</span></span><br></pre></td></tr></table></figure><p>2 .</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 版本 3.8+</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">6</span>, <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="number">6</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(a := <span class="number">6</span>, <span class="number">9</span>)</span><br><span class="line">(<span class="number">6</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">6</span>, <span class="number">9</span> <span class="comment"># 典型拆包操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b</span><br><span class="line">(<span class="number">6</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(a, b = <span class="number">16</span>, <span class="number">19</span>) <span class="comment"># 出错啦</span></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    (a, b = <span class="number">16</span>, <span class="number">19</span>)</span><br><span class="line">          ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(a, b := <span class="number">16</span>, <span class="number">19</span>) <span class="comment"># 这里的结果是一个奇怪的三元组</span></span><br><span class="line">(<span class="number">6</span>, <span class="number">16</span>, <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="comment"># a值仍然没变?</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-1"><a href="#💡-说明-1" class="headerlink" title="💡 说明"></a>💡 说明</h4><p><strong>“海象”运算符简介</strong></p><p>海象运算符 (<code>:=</code>) 在Python 3.8中被引入，用来在表达式中为变量赋值。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">some_func</span>():</span><br><span class="line">        <span class="comment"># 假设这儿有一些耗时的计算</span></span><br><span class="line">        <span class="comment"># time.sleep(1000)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入“海象”运算符前的例子</span></span><br><span class="line"><span class="keyword">if</span> some_func():</span><br><span class="line">        <span class="built_in">print</span>(some_func()) <span class="comment"># 糟糕的案例——函数运算了两次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者，加以改进：</span></span><br><span class="line">a = some_func()</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有了“海象”运算符，你可以写的更简洁：</span></span><br><span class="line"><span class="keyword">if</span> a := some_func():</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p><strong>输出 (&gt; Python 3.8):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>这样既减少了一行代码，又避免了两次调用 <code>some_func</code> 函数。</p><ul><li><p>在顶层的无括号赋值操作（使用“海象”运算符）被限制，因此例1中的 <code>a := &quot;wtf_walrus&quot;</code> 出现了 <code>SyntaxError</code> 。用括号括起来。它就能正常工作了。</p></li><li><p>一般的，包含 <code>=</code> 操作的表达式是不能用括号括起来的，因此 <code>(a, b = 6, 9)</code> 中出现了语法错误。</p></li><li><p>“海象”运算符的语法形式为：<code>NAME:= expr</code>，<code>NAME</code> 是一个有效的标识符，而 <code>expr</code> 是一个有效的表达式。 因此，这意味着它不支持可迭代的打包和拆包。</p><ul><li><p><code>(a := 6, 9)</code> 等价于 <code>((a := 6), 9)</code> ，最终得到 <code>(a, 9) </code> (其中 <code>a</code> 的值为6)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>(a := <span class="number">6</span>, <span class="number">9</span>) == ((a := <span class="number">6</span>), <span class="number">9</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = (a := <span class="number">696</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">(<span class="number">696</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>] <span class="keyword">is</span> a <span class="comment"># 两个变量指向同一内存空间</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>类似的， <code>(a, b := 16, 19)</code> 等价于 <code>(a, (b := 16), 19)</code> ，只是一个三元组。</p></li></ul></li></ul><hr><h3 id="Strings-can-be-tricky-sometimes-微妙的字符串"><a href="#Strings-can-be-tricky-sometimes-微妙的字符串" class="headerlink" title="&gt; Strings can be tricky sometimes&#x2F;微妙的字符串 *"></a>&gt; Strings can be tricky sometimes&#x2F;微妙的字符串 *</h3><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;some_string&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140420665652016</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(<span class="string">&quot;some&quot;</span> + <span class="string">&quot;_&quot;</span> + <span class="string">&quot;string&quot;</span>) <span class="comment"># 注意两个的id值是相同的.</span></span><br><span class="line"><span class="number">140420665652016</span></span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;wtf&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;wtf&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;wtf!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;wtf!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="string">&quot;wtf!&quot;</span>, <span class="string">&quot;wtf!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b </span><br><span class="line"><span class="literal">True</span> <span class="comment"># 3.7 版本返回结果为 False.</span></span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;a&#x27;</span> * <span class="number">20</span> <span class="keyword">is</span> <span class="string">&#x27;aaaaaaaaaaaaaaaaaaaa&#x27;</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;a&#x27;</span> * <span class="number">21</span> <span class="keyword">is</span> <span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaa&#x27;</span></span><br><span class="line"><span class="literal">False</span> <span class="comment"># 3.7 版本返回结果为 True</span></span><br></pre></td></tr></table></figure><p>很好理解, 对吧?</p><h4 id="💡-说明-2"><a href="#💡-说明-2" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>这些行为是由于 Cpython 在编译优化时, 某些情况下会尝试使用已经存在的不可变对象而不是每次都创建一个新对象. (这种行为被称作字符串的驻留[string interning])</p></li><li><p>发生驻留之后, 许多变量可能指向内存中的相同字符串对象. (从而节省内存)</p></li><li><p>在上面的代码中, 字符串是隐式驻留的. 何时发生隐式驻留则取决于具体的实现. 这里有一些方法可以用来猜测字符串是否会被驻留:</p><ul><li>所有长度为 0 和长度为 1 的字符串都被驻留.</li><li>字符串在编译时被实现 (<code>&#39;wtf&#39;</code> 将被驻留, 但是 <code>&#39;&#39;.join([&#39;w&#39;, &#39;t&#39;, &#39;f&#39;])</code> 将不会被驻留)</li><li>字符串中只包含字母，数字或下划线时将会驻留. 所以 <code>&#39;wtf!&#39;</code> 由于包含 <code>!</code> 而未被驻留. 可以在<a href="https://github.com/python/cpython/blob/3.6/Objects/codeobject.c#L19">这里</a>找到 CPython 对此规则的实现.</li></ul></li><li><p>当在同一行将 <code>a</code> 和 <code>b</code> 的值设置为 <code>&quot;wtf!&quot;</code> 的时候, Python 解释器会创建一个新对象, 然后同时引用第二个变量(译: 仅适用于3.7以下, 详细情况请看<a href="https://github.com/leisurelicht/wtfpython-cn/issues/13">这里</a>). 如果你在不同的行上进行赋值操作, 它就不会“知道”已经有一个 <code>wtf！</code> 对象 (因为 <code>&quot;wtf!&quot;</code> 不是按照上面提到的方式被隐式驻留的). 它是一种编译器优化, 特别适用于交互式环境.</p></li><li><p>常量折叠(constant folding) 是 Python 中的一种 <a href="https://en.wikipedia.org/wiki/Peephole_optimization">窥孔优化(peephole optimization)</a> 技术. 这意味着在编译时表达式 <code>&#39;a&#39;*20</code> 会被替换为 <code>&#39;aaaaaaaaaaaaaaaaaaaa&#39;</code> 以减少运行时的时钟周期. 只有长度小于 20 的字符串才会发生常量折叠. (为啥? 想象一下由于表达式 <code>&#39;a&#39;*10**10</code> 而生成的 <code>.pyc</code> 文件的大小). 相关的源码实现在<a href="https://github.com/python/cpython/blob/3.6/Python/peephole.c#L288">这里</a>.</p></li><li><p>如果你是使用 3.7 版本中运行上述示例代码, 会发现部分代码的运行结果与注释说明相同. 这是因为在 3.7 版本中, 常量折叠已经从窥孔优化器迁移至新的 AST 优化器, 后者可以以更高的一致性来执行优化. (由 Eugene Toder 和 INADA Naoki 在 <a href="https://bugs.python.org/issue29469">bpo-29469</a> 和 <a href="https://bugs.python.org/issue11549">bpo-11549</a> 中贡献.) </p></li><li><p>(译: 但是在最新的 3.8 版本中, 结果又变回去了. 虽然 3.8 版本和 3.7 版本一样, 都是使用 AST 优化器. 目前不确定官方对 3.8 版本的 AST 做了什么调整.)</p></li></ul><hr><h3 id="Be-careful-with-chained-operations-小心链式操作"><a href="#Be-careful-with-chained-operations-小心链式操作" class="headerlink" title="&gt; Be careful with chained operations&#x2F;小心链式操作"></a>&gt; Be careful with chained operations&#x2F;小心链式操作</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="literal">False</span> == <span class="literal">False</span>) <span class="keyword">in</span> [<span class="literal">False</span>] <span class="comment"># 可以理解</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span> == (<span class="literal">False</span> <span class="keyword">in</span> [<span class="literal">False</span>]) <span class="comment"># 可以理解</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span> == <span class="literal">False</span> <span class="keyword">in</span> [<span class="literal">False</span>] <span class="comment"># 为毛?</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> <span class="keyword">is</span> <span class="literal">False</span> == <span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span> <span class="keyword">is</span> <span class="literal">False</span> <span class="keyword">is</span> <span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &gt; <span class="number">0</span> &lt; <span class="number">1</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span> &gt; <span class="number">0</span>) &lt; <span class="number">1</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &gt; (<span class="number">0</span> &lt; <span class="number">1</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-3"><a href="#💡-说明-3" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><p>根据 <a href="https://docs.python.org/3/reference/expressions.html#comparisons">https://docs.python.org/3/reference/expressions.html#comparisons</a></p><blockquote><p>形式上, 如果 a, b, c, …, y, z 是表达式, 而 op1, op2, …, opN 是比较运算符, 那么除了每个表达式最多只出现一次以外 a op1 b op2 c … y opN z 就等于 a op1 b and b op2 c and … y opN z.</p></blockquote><p>虽然上面的例子似乎很愚蠢, 但是像 <code>a == b == c</code> 或 <code>0 &lt;= x &lt;= 100</code> 就很棒了.</p><ul><li><code>False is False is False</code> 相当于 <code>(False is False) and (False is False)</code></li><li><code>True is False == False</code> 相当于 <code>(True is False) and (False == False)</code>, 由于语句的第一部分 (<code>True is False</code>) 等于 <code>False</code>, 因此整个表达式的结果为 <code>False</code>.</li><li><code>1 &gt; 0 &lt; 1</code> 相当于 <code>(1 &gt; 0) and (0 &lt; 1)</code>, 所以最终结果为 <code>True</code>.</li><li>表达式 <code>(1 &gt; 0) &lt; 1</code> 相当于 <code>True &lt; 1</code> 且<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> + <span class="number">1</span> <span class="comment"># 与这个例子无关，只是娱乐一下</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>所以, <code>1 &lt; 1</code> 等于 <code>False</code></li></ul><hr><h3 id="How-not-to-use-is-operator-为什么不使用-is-操作符"><a href="#How-not-to-use-is-operator-为什么不使用-is-操作符" class="headerlink" title="&gt; How not to use is operator&#x2F;为什么不使用 is 操作符"></a>&gt; How not to use <code>is</code> operator&#x2F;为什么不使用 <code>is</code> 操作符</h3><!-- Example ID: 230fa2ac-ab36-4ad1-b675-5f5a1c1a6217 ---><p>下面是一个在互联网上非常有名的例子.</p><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">tuple</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">tuple</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>3.<br><strong>Output</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">257</span>, <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p><strong>Output (Python 3.7.x specifically)</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">257</span>, <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-4"><a href="#💡-说明-4" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><p><strong><code>is</code> 和 <code>==</code> 的区别</strong></p><ul><li><code>is</code> 运算符检查两个运算对象是否引用自同一对象 (即, 它检查两个运算对象是否相同).</li><li><code>==</code> 运算符比较两个运算对象的值是否相等.</li><li>因此 <code>is</code> 代表引用相同, <code>==</code> 代表值相等. 下面的例子可以很好的说明这点,<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[] == []</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[] <span class="keyword">is</span> [] <span class="comment"># 这两个空列表位于不同的内存地址.</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><code>256</code> 是一个已经存在的对象, 而 <code>257</code> 不是</strong></p><p>当你启动Python 的时候, 数值为 <code>-5</code> 到 <code>256</code> 的对象就已经被分配好了. 这些数字因为经常被使用, 所以会被提前准备好.</p><p>Python 通过这种创建小整数池的方式来避免小整数频繁的申请和销毁内存空间.</p><p>引用自 <a href="https://docs.python.org/3/c-api/long.html">https://docs.python.org/3/c-api/long.html</a></p><blockquote><p>当前的实现为-5到256之间的所有整数保留一个整数对象数组, 当你创建了一个该范围内的整数时, 你只需要返回现有对象的引用. 所以改变1的值是有可能的. 我怀疑这种行为在Python中是未定义行为. :-)</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(<span class="number">256</span>)</span><br><span class="line"><span class="number">10922528</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">10922528</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">10922528</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(<span class="number">257</span>)</span><br><span class="line"><span class="number">140084850247312</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(x)</span><br><span class="line"><span class="number">140084850247440</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(y)</span><br><span class="line"><span class="number">140084850247344</span></span><br></pre></td></tr></table></figure><p>这里解释器并没有智能到能在执行 <code>y = 257</code> 时意识到我们已经创建了一个整数 <code>257</code>, 所以它在内存中又新建了另一个对象.</p><p>类似的优化也适用于其他<strong>不可变</strong>对象，例如空元组。由于列表是可变的，这就是为什么 <code>[] is []</code> 将返回 <code>False</code> 而 <code>() is ()</code> 将返回 <code>True</code>。 这解释了我们的第二个代码段。而第三个呢：</p><p><strong>当 <code>a</code> 和 <code>b</code> 在同一行中使用相同的值初始化时，会指向同一个对象.</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">257</span>, <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140640774013296</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140640774013296</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140640774013392</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140640774013488</span></span><br></pre></td></tr></table></figure><ul><li><p>当 a 和 b 在同一行中被设置为 <code>257</code> 时, Python 解释器会创建一个新对象, 然后同时引用第二个变量. 如果你在不同的行上进行, 它就不会 “知道” 已经存在一个 <code>257</code> 对象了.</p></li><li><p>这是一种特别为交互式环境做的编译器优化. 当你在实时解释器中输入两行的时候, 他们会单独编译, 因此也会单独进行优化. 如果你在 <code>.py</code> 文件中尝试这个例子, 则不会看到相同的行为, 因为文件是一次性编译的。这种优化不仅限于整数，它也适用于其他不可变数据类型，例如字符串（查看示例“微妙的字符串”）和浮点数，</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">257.0</span>, <span class="number">257.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>为什么这不适用于 Python 3.7？ 大概是因为此类编译器优化是特定于实现的（即可能随版本、操作系统等而变化）。我仍在试图弄清楚导致问题的具体实现更改，您可以查看此 <a href="https://github.com/satwikkansal/wtfpython/issues/100">问题</a> 以获取更新。</p></li></ul><hr><h3 id="Hash-brownies-是时候来点蛋糕了"><a href="#Hash-brownies-是时候来点蛋糕了" class="headerlink" title="&gt; Hash brownies&#x2F;是时候来点蛋糕了!"></a>&gt; Hash brownies&#x2F;是时候来点蛋糕了!</h3><ul><li>hash brownie指一种含有大麻成分的蛋糕, 所以这里是句双关</li><li>这里保留原作者对于标题的翻译<!-- Example ID: eb17db53-49fd-4b61-85d6-345c5ca213ff ---></li></ul><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">some_dict = &#123;&#125;</span><br><span class="line">some_dict[<span class="number">5.5</span>] = <span class="string">&quot;JavaScript&quot;</span></span><br><span class="line">some_dict[<span class="number">5.0</span>] = <span class="string">&quot;Ruby&quot;</span></span><br><span class="line">some_dict[<span class="number">5</span>] = <span class="string">&quot;Python&quot;</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict[<span class="number">5.5</span>]</span><br><span class="line"><span class="string">&quot;JavaScript&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict[<span class="number">5.0</span>] <span class="comment"># &quot;Python&quot; 消除了 &quot;Ruby&quot; 的存在?</span></span><br><span class="line"><span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict[<span class="number">5</span>] </span><br><span class="line"><span class="string">&quot;Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>complex_five = <span class="number">5</span> + <span class="number">0j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(complex_five)</span><br><span class="line"><span class="built_in">complex</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict[complex_five]</span><br><span class="line"><span class="string">&quot;Python&quot;</span></span><br></pre></td></tr></table></figure><p>为什么到处都是Python?</p><h4 id="💡-说明-5"><a href="#💡-说明-5" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li><p>这个 StackOverflow的 <a href="https://stackoverflow.com/a/32211042/4354153">回答</a> 漂亮地解释了这背后的基本原理.</p></li><li><p>Python 字典中键的唯一性是根据 <em>等价性</em>，而不是同一性。 因此，即使 <code>5</code>、<code>5.0</code> 和 <code>5 + 0j</code> 是不同类型的不同对象，由于它们是相等的，它们不能都在同一个 <code>dict</code>（或 <code>set</code>）中。 只要您插入其中任何一个，尝试查找任何不同但等价的键都将使用原始映射值成功（而不是因“KeyError”而失败）：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> == <span class="number">5.0</span> == <span class="number">5</span> + <span class="number">0j</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="number">5.0</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="number">5</span> + <span class="number">0j</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict[<span class="number">5.0</span>] = <span class="string">&quot;Ruby&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5.0</span> <span class="keyword">in</span> some_dict</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">5</span> <span class="keyword">in</span> some_dict) <span class="keyword">and</span> (<span class="number">5</span> + <span class="number">0j</span> <span class="keyword">in</span> some_dict)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>这在赋值的时候也会生效。因此，当您执行 <code>some_dict[5] = &quot;Python&quot;</code> 时，Python 会找到具有等价键值 <code>5.0 -&gt; &quot;Ruby&quot;</code> 的现有项，覆盖其值，并保留原始键值。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict</span><br><span class="line">&#123;<span class="number">5.0</span>: <span class="string">&#x27;Ruby&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict[<span class="number">5</span>] = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict</span><br><span class="line">&#123;<span class="number">5.0</span>: <span class="string">&#x27;Python&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>那么我们如何将键值更新为<code>5</code>（而不是<code>5.0</code>）？ 我们实际上不能原地更新，但是我们可以先删除键（<code>del some_dict[5.0]</code>），然后重新赋值（<code>some_dict[5]</code>）得到整数<code>5</code> 作为键而不是浮点数 <code>5.0</code>，尽管这属于极少数情况。</p></li><li><p>Python 是如何在包含 <code>5.0</code> 的字典中找到 <code>5</code> 的？ Python 只需要花费常数时间，而无需使用哈希函数遍历每一项。当 Python 在 dict 中查找键 <code>foo</code> 时，它首先计算 <code>hash(foo)</code>（以常数时间运行）。因为在 Python 中，要求相等的对象具有相同的哈希值（此处为<a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__">文档</a>），<code>5</code> 、<code>5.0</code> 和 <code>5 + 0j</code> 具有相同的哈希值。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> == <span class="number">5.0</span> == <span class="number">5</span> + <span class="number">0j</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="number">5</span>) == <span class="built_in">hash</span>(<span class="number">5.0</span>) == <span class="built_in">hash</span>(<span class="number">5</span> + <span class="number">0j</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 反之不一定正确：具有相等哈希值的对象本身可能不相等。（这是<a href="https://en.wikipedia.org/wiki/Collision_(computer_science">哈希冲突</a>）造成的，这也会降低哈希运算的性能。）</p></li></ul><hr><h3 id="Deep-down-we’re-all-the-same-本质上-我们都一样"><a href="#Deep-down-we’re-all-the-same-本质上-我们都一样" class="headerlink" title="&gt; Deep down, we’re all the same.&#x2F;本质上,我们都一样. *"></a>&gt; Deep down, we’re all the same.&#x2F;本质上,我们都一样. *</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WTF</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>WTF() == WTF() <span class="comment"># 两个不同的对象应该不相等</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>WTF() <span class="keyword">is</span> WTF() <span class="comment"># 也不相同</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(WTF()) == <span class="built_in">hash</span>(WTF()) <span class="comment"># 哈希值也应该不同</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(WTF()) == <span class="built_in">id</span>(WTF())</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-6"><a href="#💡-说明-6" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>当调用 <code>id</code> 函数时, Python 创建了一个 <code>WTF</code> 类的对象并传给 <code>id</code> 函数. 然后 <code>id</code> 函数获取其id值 (也就是内存地址), 然后丢弃该对象. 该对象就被销毁了.</li><li>当我们连续两次进行这个操作时, Python会将相同的内存地址分配给第二个对象. 因为 (在CPython中) <code>id</code> 函数使用对象的内存地址作为对象的id值, 所以两个对象的id值是相同的.</li><li>综上, 对象的id值仅仅在对象的生命周期内唯一. 在对象被销毁之后, 或被创建之前, 其他对象可以具有相同的id值.</li><li>那为什么 <code>is</code> 操作的结果为 <code>False</code> 呢? 让我们看看这段代码.<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WTF</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): <span class="built_in">print</span>(<span class="string">&quot;I&quot;</span>)</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>): <span class="built_in">print</span>(<span class="string">&quot;D&quot;</span>)</span><br></pre></td></tr></table></figure><strong>Output:</strong><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>WTF() <span class="keyword">is</span> WTF()</span><br><span class="line">I</span><br><span class="line">I</span><br><span class="line">D</span><br><span class="line">D</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(WTF()) == <span class="built_in">id</span>(WTF())</span><br><span class="line">I</span><br><span class="line">D</span><br><span class="line">I</span><br><span class="line">D</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>正如你所看到的, 对象销毁的顺序是造成所有不同之处的原因.</li></ul><hr><h3 id="Disorder-within-order-有序中潜藏着无序"><a href="#Disorder-within-order-有序中潜藏着无序" class="headerlink" title="&gt; Disorder within order&#x2F;有序中潜藏着无序 *"></a>&gt; Disorder within order&#x2F;有序中潜藏着无序 *</h3><!-- Example ID: 91bff1f8-541d-455a-9de4-6cd8ff00ea66 ---><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">dictionary = <span class="built_in">dict</span>()</span><br><span class="line">dictionary[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span>; dictionary[<span class="number">2</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ordered_dict = OrderedDict()</span><br><span class="line">ordered_dict[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span>; ordered_dict[<span class="number">2</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">another_ordered_dict = OrderedDict()</span><br><span class="line">another_ordered_dict[<span class="number">2</span>] = <span class="string">&#x27;b&#x27;</span>; another_ordered_dict[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DictWithHash</span>(<span class="title class_ inherited__">dict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现了 __hash__ 魔法方法的dict类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    __hash__ = <span class="keyword">lambda</span> <span class="variable language_">self</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderedDictWithHash</span>(<span class="title class_ inherited__">OrderedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现了 __hash__ 魔法方法的OrderedDict类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    __hash__ = <span class="keyword">lambda</span> <span class="variable language_">self</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dictionary == ordered_dict <span class="comment"># 如果 a == b</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dictionary == another_ordered_dict <span class="comment"># 且 b == c</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ordered_dict == another_ordered_dict <span class="comment"># 那么为什么 c == a 不成立??</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 众所周知，set数据结构储存不重复元素，</span></span><br><span class="line"><span class="comment"># 让我们生成以上字典的 set 数据类型，看看会发生什么……</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(&#123;dictionary, ordered_dict, another_ordered_dict&#125;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;dict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dict类没有实现 __hash__ ，出错可以理解，接下来使用我们派生的类。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dictionary = DictWithHash()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dictionary[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span>; dictionary[<span class="number">2</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ordered_dict = OrderedDictWithHash()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ordered_dict[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span>; ordered_dict[<span class="number">2</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_ordered_dict = OrderedDictWithHash()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_ordered_dict[<span class="number">2</span>] = <span class="string">&#x27;b&#x27;</span>; another_ordered_dict[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(&#123;dictionary, ordered_dict, another_ordered_dict&#125;)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(&#123;ordered_dict, another_ordered_dict, dictionary&#125;) <span class="comment"># 交换顺序</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>到底发生了什么?</p><h4 id="💡-说明-7"><a href="#💡-说明-7" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>等号的传递性没有在 <code>dictionary</code>, <code>ordered_dict</code> 和 <code>another_ordered_dict</code> 之间生效是 <code>OrderedDict</code> 类中 <code>__eq__</code> 方法的实现方式造成的。根据<a href="https://docs.python.org/3/library/collections.html#ordereddict-objects">文档</a>以下部分:</p><blockquote><p>对于 <code>OrderedDict</code> 类之间，相等性的判定是位置敏感的，实现类似于 <code>list(od1.items())==list(od2.items())</code>。对于 <code>OrderedDict</code> 类与其他 <code>Mapping</code> 对象（例如<code>dict</code> 类），相等性的判定是非位置敏感的。</p></blockquote></li><li><p>这是为了任何使用常规 <code>dict</code> 类的地方能够直接使用 <code>OrderedDict</code> 对象代替。</p></li><li><p>好啦，那为什么改变顺序会影响 <code>set</code> 对象生成的长度呢? 答案就是上面说的缺乏等号的传递性。因为 <code>set</code> 类是唯一元素的无序集合，元素插入的顺序不应该有影响。但在此例中，确有不同。让我们进一步深入。</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_set = <span class="built_in">set</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_set.add(dictionary) <span class="comment"># 涉及的变量是前序片段定义的 mapping 对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ordered_dict <span class="keyword">in</span> some_set</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_set.add(ordered_dict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(some_set)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_ordered_dict <span class="keyword">in</span> some_set</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_set.add(another_ordered_dict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(some_set)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_set = <span class="built_in">set</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_set.add(ordered_dict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_ordered_dict <span class="keyword">in</span> another_set</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_set.add(another_ordered_dict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(another_set)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dictionary <span class="keyword">in</span> another_set</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_set.add(another_ordered_dict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(another_set)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>  因此，不一致性是由于 <code>another_ordered_dict in another_set</code> 结果为 <code>False</code>。 因为 <code>ordered_dict</code> 已经在 <code>another_set</code> 中，但如前所述， <code>ordered_dict == another_ordered_dict</code> 的结果为 <code>False</code>，会在后续再加入 <code>another_ordered_dict</code> 到 <code>another_set</code> 中。</p></li></ul><hr><h3 id="Keep-trying…-不停的try"><a href="#Keep-trying…-不停的try" class="headerlink" title="&gt; Keep trying…&#x2F;不停的try *"></a>&gt; Keep trying…&#x2F;不停的try *</h3><!-- Example ID: b4349443-e89f-4d25-a109-8616be9d41a ---><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">some_func</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;from_try&#x27;</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;from_finally&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">another_func</span>(): </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Finally!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">one_more_func</span>(): <span class="comment"># A gotcha!</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="number">1</span> / i</span><br><span class="line">            <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">                <span class="comment"># Let&#x27;s throw it here and handle it outside for loop</span></span><br><span class="line">                <span class="keyword">raise</span> ZeroDivisionError(<span class="string">&quot;A trivial divide by zero error&quot;</span>)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Iteration&quot;</span>, i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Zero division error occurred&quot;</span>, e)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func()</span><br><span class="line"><span class="string">&#x27;from_finally&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_func()</span><br><span class="line">Finally!</span><br><span class="line">Finally!</span><br><span class="line">Finally!</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> / <span class="number">0</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one_more_func()</span><br><span class="line">Iteration <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="💡-说明-8"><a href="#💡-说明-8" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>当在 “try…finally” 语句的 <code>try</code> 中执行 <code>return</code>, <code>break</code> 或 <code>continue</code> 后, <code>finally</code> 子句依然会执行.</li><li>函数的返回值由最后执行的 <code>return</code> 语句决定. 由于 <code>finally</code> 子句一定会执行, 所以 <code>finally</code> 子句中的 <code>return</code> 将始终是最后执行的语句.</li><li>这里需要注意的是，如果 finally 子句执行 <code>return</code> 或 <code>break</code> 语句，临时保存的异常将被丢弃。</li></ul><hr><h3 id="For-what-为什么"><a href="#For-what-为什么" class="headerlink" title="&gt; For what?&#x2F;为什么?"></a>&gt; For what?&#x2F;为什么?</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">some_string = <span class="string">&quot;wtf&quot;</span></span><br><span class="line">some_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i, some_dict[i] <span class="keyword">in</span> <span class="built_in">enumerate</span>(some_string):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict <span class="comment"># 创建了索引字典.</span></span><br><span class="line">&#123;<span class="number">0</span>: <span class="string">&#x27;w&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;t&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;f&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="💡-说明-9"><a href="#💡-说明-9" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p><a href="https://docs.python.org/3/reference/grammar.html">Python 语法</a> 中对 <code>for</code> 的定义是:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for_stmt: &#x27;for&#x27; exprlist &#x27;in&#x27; testlist &#x27;:&#x27; suite [&#x27;else&#x27; &#x27;:&#x27; suite]</span><br></pre></td></tr></table></figure><p>其中 <code>exprlist</code> 指分配目标. 这意味着对可迭代对象中的<strong>每一项都会执行</strong>类似 <code>&#123;exprlist&#125; = &#123;next_value&#125;</code> 的操作.</p><p>一个有趣的例子说明了这一点:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i = <span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>你可曾觉得这个循环只会运行一次?</p><p><strong>💡 说明:</strong></p><ul><li>由于循环在Python中工作方式, 赋值语句 <code>i = 10</code> 并不会影响迭代循环, 在每次迭代开始之前, 迭代器(这里指 <code>range(4)</code>) 生成的下一个元素就被解包并赋值给目标列表的变量(这里指 <code>i</code>)了.</li></ul></li><li><p>在每一次的迭代中, <code>enumerate(some_string)</code> 函数就生成一个新值 <code>i</code> (计数器增加) 并从 <code>some_string</code> 中获取一个字符. 然后将字典 <code>some_dict</code> 键 <code>i</code> (刚刚分配的) 的值设为该字符. 本例中循环的展开可以简化为:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i, some_dict[i] = (<span class="number">0</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i, some_dict[i] = (<span class="number">1</span>, <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i, some_dict[i] = (<span class="number">2</span>, <span class="string">&#x27;f&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Evaluation-time-discrepancy-执行时机差异"><a href="#Evaluation-time-discrepancy-执行时机差异" class="headerlink" title="&gt; Evaluation time discrepancy&#x2F;执行时机差异"></a>&gt; Evaluation time discrepancy&#x2F;执行时机差异</h3><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">array = [<span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 一个典型的生成器表达式</span></span><br><span class="line">g = (x <span class="keyword">for</span> x <span class="keyword">in</span> array <span class="keyword">if</span> array.count(x) &gt; <span class="number">0</span>)</span><br><span class="line">array = [<span class="number">2</span>, <span class="number">8</span>, <span class="number">22</span>]</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(g)) <span class="comment">#其他的值去哪儿了？</span></span><br><span class="line">[<span class="number">8</span>]</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">array_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">g1 = (x <span class="keyword">for</span> x <span class="keyword">in</span> array_1)</span><br><span class="line">array_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">array_2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">g2 = (x <span class="keyword">for</span> x <span class="keyword">in</span> array_2)</span><br><span class="line">array_2[:] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(g1))</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(g2))</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">array_3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">array_4 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">gen = (i + j <span class="keyword">for</span> i <span class="keyword">in</span> array_3 <span class="keyword">for</span> j <span class="keyword">in</span> array_4)</span><br><span class="line"></span><br><span class="line">array_3 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">array_4 = [<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>]</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(gen))</span><br><span class="line">[<span class="number">401</span>, <span class="number">501</span>, <span class="number">601</span>, <span class="number">402</span>, <span class="number">502</span>, <span class="number">602</span>, <span class="number">403</span>, <span class="number">503</span>, <span class="number">603</span>]</span><br></pre></td></tr></table></figure><h4 id="💡-说明-10"><a href="#💡-说明-10" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li>在<a href="https://wiki.python.org/moin/Generators">生成器</a>表达式中, <code>in</code> 子句在声明时执行, 而条件子句则是在运行时执行.</li><li>所以在运行前, <code>array</code> 已经被重新赋值为 <code>[2, 8, 22]</code>, 因此对于之前的 <code>1</code>, <code>8</code> 和 <code>15</code>, 只有 <code>count(8)</code> 的结果是大于 <code>0</code> 的, 所以生成器只会生成 <code>8</code>.</li><li>第二部分中 <code>g1</code> 和 <code>g2</code> 的输出差异则是由于变量 <code>array_1</code> 和 <code>array_2</code> 被重新赋值的方式导致的.</li><li>在第一种情况下, <code>array_1</code> 被绑定到新对象 <code>[1,2,3,4,5]</code>, 因为 <code>in</code> 子句是在声明时被执行的， 所以它仍然引用旧对象 <code>[1,2,3,4]</code>(并没有被销毁).</li><li>在第二种情况下, 对 <code>array_2</code> 的切片赋值将相同的旧对象 <code>[1,2,3,4]</code> 原地更新为 <code>[1,2,3,4,5]</code>. 因此 <code>g2</code> 和 <code>array_2</code> 仍然引用同一个对象(这个对象现在已经更新为 <code>[1,2,3,4,5]</code>).</li><li>好啦，按照目前讨论的逻辑，第三个代码段中的 <code>list(gen)</code> 的值不应该是 <code>[11, 21, 31, 12, 22, 32, 13, 23, 33]</code> 吗? （毕竟 <code>array_3</code> 和 <code>array_4</code> 的行为与 <code>array_1</code> 一样）。 <a href="https://www.python.org/dev/peps/pep-0289/#the-details">PEP-289</a> 中解释了（只有）<code>array_4</code> 值更新的原因<blockquote><p>只有最外层的 for 表达式会立即计算，其他表达式会延迟到生成器运行。</p></blockquote></li></ul><hr><h3 id="is-not-is-not-is-not-is-not-不是-is-not"><a href="#is-not-is-not-is-not-is-not-不是-is-not" class="headerlink" title="&gt; is not ... is not is (not ...)&#x2F;is not ... 不是 is (not ...)"></a>&gt; <code>is not ...</code> is not <code>is (not ...)</code>&#x2F;<code>is not ...</code> 不是 <code>is (not ...)</code></h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;something&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;something&#x27;</span> <span class="keyword">is</span> (<span class="keyword">not</span> <span class="literal">None</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-11"><a href="#💡-说明-11" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><code>is not</code> 是个单独的二元运算符, 与分别使用 <code>is</code> 和 <code>not</code> 不同.</li><li>如果操作符两侧的变量指向同一个对象, 则 <code>is not</code> 的结果为 <code>False</code>, 否则结果为 <code>True</code>.</li></ul><hr><h3 id="A-tic-tac-toe-where-X-wins-in-the-first-attempt-一蹴即至"><a href="#A-tic-tac-toe-where-X-wins-in-the-first-attempt-一蹴即至" class="headerlink" title="&gt; A tic-tac-toe where X wins in the first attempt!&#x2F;一蹴即至!"></a>&gt; A tic-tac-toe where X wins in the first attempt!&#x2F;一蹴即至!</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们先初始化一个变量row</span></span><br><span class="line">row = [<span class="string">&quot;&quot;</span>]*<span class="number">3</span> <span class="comment">#row i[&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]</span></span><br><span class="line"><span class="comment"># 并创建一个变量board</span></span><br><span class="line">board = [row]*<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>board</span><br><span class="line">[[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>], [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>], [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board[<span class="number">0</span>]</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&quot;X&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board</span><br><span class="line">[[<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>], [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>], [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>]]</span><br></pre></td></tr></table></figure><p>我们有没有赋值过3个 “X” 呢？</p><h4 id="💡-说明-12"><a href="#💡-说明-12" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><p>当我们初始化 <code>row</code> 变量时, 下面这张图展示了内存中的情况。</p><p>而当通过对 <code>row</code> 做乘法来初始化 <code>board</code> 时, 内存中的情况则如下图所示 (每个元素 <code>board[0]</code>, <code>board[1]</code> 和 <code>board[2]</code> 都和 <code>row</code> 一样引用了同一列表.)</p><p>我们可以通过不使用变量 <code>row</code> 生成 <code>board</code> 来避免这种情况. (<a href="https://github.com/satwikkansal/wtfpython/issues/68">这个</a>issue提出了这个需求.)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>board = [[<span class="string">&#x27;&#x27;</span>]*<span class="number">3</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&quot;X&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board</span><br><span class="line">[[<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>], [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>], [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>]]</span><br></pre></td></tr></table></figure><hr><h3 id="Schrodinger’s-variable-薛定谔的变量"><a href="#Schrodinger’s-variable-薛定谔的变量" class="headerlink" title="&gt; Schrödinger’s variable&#x2F;薛定谔的变量 *"></a>&gt; Schrödinger’s variable&#x2F;薛定谔的变量 *</h3><!-- Example ID: 4dc42f77-94cb-4eb5-a120-8203d3ed7604 ---><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">funcs = []</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">some_func</span>():</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    funcs.append(some_func)</span><br><span class="line">    results.append(some_func()) <span class="comment"># 注意这里函数被执行了</span></span><br><span class="line"></span><br><span class="line">funcs_results = [func() <span class="keyword">for</span> func <span class="keyword">in</span> funcs]</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>results</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>funcs_results</span><br><span class="line">[<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>即使每次在迭代中将 <code>some_func</code> 加入 <code>funcs</code> 前的 <code>x</code> 值都不相同, 所有的函数还是都返回6.</p><p>&#x2F;&#x2F; 再换个例子</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>powers_of_x = [<span class="keyword">lambda</span> x: x**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[f(<span class="number">2</span>) <span class="keyword">for</span> f <span class="keyword">in</span> powers_of_x]</span><br><span class="line">[<span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>]</span><br></pre></td></tr></table></figure><h4 id="💡-说明-13"><a href="#💡-说明-13" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>当在循环内部定义一个函数时, 如果该函数在其主体中使用了循环变量, 则闭包函数将与循环变量绑定, 而不是它的值. 因此, 所有的函数都是使用最后分配给变量的值来进行计算的.</p></li><li><p>可以通过将循环变量作为命名变量传递给函数来获得预期的结果. <strong>为什么这样可行?</strong> 因为这会在函数内再次定义一个局部变量。我们可以看到它使用了来自上下文的<code>x</code>（即<em>不是</em>局部变量）：<br>（译者注: inspect位于Python标准库中，该模块用于收集python对象的信息，可以获取类或函数的参数的信息，源码，解析堆栈，对对象进行类型检查等等，Python3.3+版本支持getclosurevars函数）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> inspect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inspect.getclosurevars(funcs[<span class="number">0</span>])</span><br><span class="line">ClosureVars(nonlocals=&#123;&#125;, <span class="built_in">globals</span>=&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">6</span>&#125;, builtins=&#123;&#125;, unbound=<span class="built_in">set</span>())</span><br></pre></td></tr></table></figure></li></ul><p>由于 <code>x</code> 是一个全局值，我们可以通过更新 <code>x</code> 来更改 <code>funcs</code> 用来查找和返回的值：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[func() <span class="keyword">for</span> func <span class="keyword">in</span> funcs]</span><br><span class="line">[<span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>]</span><br></pre></td></tr></table></figure><ul><li>要获得想要的结果，您可以将循环变量作为命名变量传递给函数。 <strong>为什么会这样？</strong> 因为这会在函数的作用域内定义变量。 它将不再进入周围（全局）范围来查找变量值，而是会创建一个局部变量来存储该时间点的“x”值。</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">funcs = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">some_func</span>(<span class="params">x=x</span>):</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    funcs.append(some_func)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>funcs_results = [func() <span class="keyword">for</span> func <span class="keyword">in</span> funcs]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>funcs_results</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>此时，不再使用全局变量 <code>x</code>：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>inspect.getclosurevars(funcs[<span class="number">0</span>])</span><br><span class="line">ClosureVars(nonlocals=&#123;&#125;, <span class="built_in">globals</span>=&#123;&#125;, builtins=&#123;&#125;, unbound=<span class="built_in">set</span>())</span><br></pre></td></tr></table></figure><hr><h3 id="The-chicken-egg-problem-先有鸡还是先有蛋"><a href="#The-chicken-egg-problem-先有鸡还是先有蛋" class="headerlink" title="&gt; The chicken-egg problem&#x2F;先有鸡还是先有蛋 *"></a>&gt; The chicken-egg problem&#x2F;先有鸡还是先有蛋 *</h3><!-- Example ID: 60730dc2-0d79-4416-8568-2a63323b3ce8 ---><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="number">3</span>, <span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="built_in">type</span>, <span class="built_in">object</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="built_in">object</span>, <span class="built_in">type</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>那么到底谁是“最终”的基类呢？下边顺便列出更多的令人困惑的地方</p><p>2. </p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">A</span>: <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(A, A)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="built_in">type</span>, <span class="built_in">type</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="built_in">object</span>, <span class="built_in">object</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(<span class="built_in">int</span>, <span class="built_in">object</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(<span class="built_in">type</span>, <span class="built_in">object</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(<span class="built_in">object</span>, <span class="built_in">type</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-14"><a href="#💡-说明-14" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li><code>type</code> 是 Python 中的<a href="https://realpython.com/python-metaclasses/">元类</a>。</li><li>Python 中，<strong>一切</strong>皆对象，其中包括类及其对象（实例）。</li><li><code>type</code> 类型是<code>object</code>类的元类，每个类（包括<code>type</code>）都直接或间接地继承自<code>object</code>。</li><li>对象和类型之间没有真正的基类。上述片段中的令人困惑的地方之所以出现，是因为我们从 Python 类的角度考虑这些关系（issubclass 和 isinstance）。 <code>object</code>和<code>type</code>之间的关系不能在纯python中重现。 更准确地说，以下关系不能在纯 Python 中重现:<ul><li>A类是B类的一个实例，B类是A类的一个实例。</li><li>A类是它自己的一个实例。</li></ul></li><li><code>object</code>和<code>type</code>之间的关系（既是彼此的实例，也是它们自己的实例）存在于 Python 中，这是源于实现层级上的“作弊”行为。</li></ul><hr><h3 id="Subclass-relationships-子类关系"><a href="#Subclass-relationships-子类关系" class="headerlink" title="&gt; Subclass relationships&#x2F;子类关系 *"></a>&gt; Subclass relationships&#x2F;子类关系 *</h3><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Hashable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(<span class="built_in">list</span>, <span class="built_in">object</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(<span class="built_in">object</span>, Hashable)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(<span class="built_in">list</span>, Hashable)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>子类关系应该是可传递的, 对吧? (即, 如果 <code>A</code> 是 <code>B</code> 的子类, <code>B</code> 是 <code>C</code> 的子类, 那么 <code>A</code> <em>应该</em> 是 <code>C</code> 的子类.)</p><h4 id="💡-说明-15"><a href="#💡-说明-15" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>Python 中的子类关系并不一定是传递的. 任何人都可以在元类中随意定义 <code>__subclasscheck__</code>.</li><li>当 <code>issubclass(cls, Hashable)</code> 被调用时, 它只是在 <code>cls</code> 中寻找 <code>__hash__</code> 方法或者从继承的父类中寻找 <code>__hash__</code> 方法.</li><li>由于 <code>object</code> is 可散列的(hashable), 但是 <code>list</code> 是不可散列的, 所以它打破了这种传递关系.</li><li>在<a href="https://www.naftaliharris.com/blog/python-subclass-intransitivity/">这里</a>可以找到更详细的解释.</li></ul><hr><h3 id="Methods-equality-and-identity-方法的相等性和唯一性"><a href="#Methods-equality-and-identity-方法的相等性和唯一性" class="headerlink" title="&gt; Methods equality and identity&#x2F;方法的相等性和唯一性 *"></a>&gt; Methods equality and identity&#x2F;方法的相等性和唯一性 *</h3><!-- Example ID: 94802911-48fe-4242-defa-728ae893fa32 ---><ol><li><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">classm</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">staticm</span>():</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(SomeClass.method <span class="keyword">is</span> SomeClass.method)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(SomeClass.classm <span class="keyword">is</span> SomeClass.classm)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(SomeClass.classm == SomeClass.classm)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(SomeClass.staticm <span class="keyword">is</span> SomeClass.staticm)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>访问 <code>classm</code> 两次，我们得到一个相等的对象，但不是<em>同一个</em>？ 让我们看看 <code>SomeClass</code> 的实例会发生什么：</p><ol start="2"><li><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">o1 = SomeClass()</span><br><span class="line">o2 = SomeClass()</span><br></pre></td></tr></table></figure></li></ol><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(o1.method == o2.method)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(o1.method == o1.method)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(o1.method <span class="keyword">is</span> o1.method)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(o1.classm <span class="keyword">is</span> o1.classm)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(o1.classm == o1.classm == o2.classm == SomeClass.classm)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(o1.staticm <span class="keyword">is</span> o1.staticm <span class="keyword">is</span> o2.staticm <span class="keyword">is</span> SomeClass.staticm)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>访问 <code> classm</code> or <code>method</code> 两次, 为 <code>SomeClass</code> 的同一个实例创建了相等但是<em>不同</em>的对象。</p><h4 id="💡-说明-16"><a href="#💡-说明-16" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li>函数是<a href="https://docs.python.org/3/howto/descriptor.html">描述符</a>。每当将函数作为属性访问时，就会调用描述符，创建一个方法对象，该对象将函数与拥有该属性的对象“绑定”。如果被调用，该方法调用函数，隐式传递绑定对象作为第一个参数（这就是我们如何将 self 作为第一个参数获取，尽管没有显式传递它）。</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.method</span><br><span class="line">&lt;bound method SomeClass.method of &lt;__main__.SomeClass <span class="built_in">object</span> at ...&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>多次访问该属性，每次都会创建一个方法对象！ 因此，<code>o1.method is o1.method</code> 永远不会是真的。但是，将函数作为类属性（而不是实例）访问并不会创建方法对象，所以 <code>SomeClass.method is SomeClass.method</code> 是真的。</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>SomeClass.method</span><br><span class="line">&lt;function SomeClass.method at ...&gt;</span><br></pre></td></tr></table></figure><ul><li><code>classmethod</code> 将函数转换为类方法。 类方法是描述符，当被访问时，它会创建一个绑定<em>类本身</em>的方法对象，而不是对象本身。</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.classm</span><br><span class="line">&lt;bound method SomeClass.classm of &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.SomeClass&#x27;</span>&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>与函数不同，<code>classmethod</code> 在作为类属性访问时也会创建一个方法（在这种情况下，它们绑定类，而不是类的类型）。 所以 <code>SomeClass.classm is SomeClass.classm</code> 是假的。</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>SomeClass.classm</span><br><span class="line">&lt;bound method SomeClass.classm of &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.SomeClass&#x27;</span>&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>当两个函数相等并且绑定的对象相同时，方法对象比较相等。 所以<code>o1.method == o1.method</code> 为真，尽管它们在内存中是两个不同的对象。</li><li><code>staticmethod</code> 将函数转换为“无操作”描述符，它按原样返回函数。没有方法对象被创建，所以 <code>is</code> 的比较运算为真。</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.staticm</span><br><span class="line">&lt;function SomeClass.staticm at ...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SomeClass.staticm</span><br><span class="line">&lt;function SomeClass.staticm at ...&gt;</span><br></pre></td></tr></table></figure><ul><li>每次 Python 调用实例方法时都必须创建新的“方法”对象，并且每次都必须修改参数以插入 <code>self</code> 严重影响性能。CPython 3.7 <a href="https://bugs.python.org/issue26110">解决了这个问题</a> 。通过引入新的操作码来处理调用方法而不创建临时方法对象。这仅在实际调用访问的函数时使用，因此这里的代码片段不受影响，仍然会生成方法:)</li></ul><hr><h3 id="All-true-ation-返回True的all函数"><a href="#All-true-ation-返回True的all函数" class="headerlink" title="&gt; All-true-ation&#x2F;返回True的all函数 *"></a>&gt; All-true-ation&#x2F;返回True的all函数 *</h3><!-- Example ID: dfe6d845-e452-48fe-a2da-0ed3869a8042 --><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>])</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([[]])</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([[[]]])</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>为什么会有这种True-False的变化？</p><h4 id="💡-说明-17"><a href="#💡-说明-17" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li><p><code>all</code> 函数的实现等价于：</p></li><li><pre><code class="py">def all(iterable):    for element in iterable:        if not element:            return False    return True<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `all([])` 返回 `True` 因为可迭代对象为空。 </span><br><span class="line">- `all([[]])` 返回 `False` 因为传入的数组有一个元素 `[]`， 在Python中，空列表为假。</span><br><span class="line">- `all([[[]]])` 和更高的递归变体总是`True`。 这是因为传递的数组的单个元素（`[[...]]`）不再是空的，而有值的列表为真。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### &gt; The surprising comma/意外的逗号</span><br><span class="line"></span><br><span class="line">**Output:**</span><br><span class="line">```py</span><br><span class="line">&gt;&gt;&gt; def f(x, y,):</span><br><span class="line">...     print(x, y)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; def g(x=4, y=5,):</span><br><span class="line">...     print(x, y)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; def h(x, **kwargs,):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    def h(x, **kwargs,):</span><br><span class="line">                     ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line">&gt;&gt;&gt; def h(*args,):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    def h(*args,):</span><br><span class="line">                ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="💡-说明-18"><a href="#💡-说明-18" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>在Python函数的形式参数列表中, 尾随逗号并不一定是合法的.</li><li>在Python中, 参数列表部分用前置逗号定义, 部分用尾随逗号定义. 这种冲突导致逗号被夹在中间, 没有规则定义它.(译:这一句看得我也很懵逼,只能强翻了.详细解释看下面的讨论帖会一目了然.)</li><li><strong>注意:</strong> 尾随逗号的问题已经在Python 3.6中被<a href="https://bugs.python.org/issue9232">修复</a>了. 而这篇<a href="https://bugs.python.org/issue9232#msg248399">帖子</a>中则简要讨论了Python中尾随逗号的不同用法.</li></ul><hr><h3 id="Strings-and-the-backslashes-字符串与反斜杠"><a href="#Strings-and-the-backslashes-字符串与反斜杠" class="headerlink" title="&gt; Strings and the backslashes&#x2F;字符串与反斜杠"></a>&gt; Strings and the backslashes&#x2F;字符串与反斜杠</h3><!-- Example ID: 6ae622c3-6d99-4041-9b33-507bd1a4407b ---><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;\&quot;&quot;</span>)</span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(r&quot;</span>\<span class="string">&quot;&quot;</span>)</span><br><span class="line">\<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(r&quot;</span>\<span class="string">&quot;)</span></span><br><span class="line"><span class="string">File &quot;</span>&lt;stdin&gt;<span class="string">&quot;, line 1</span></span><br><span class="line"><span class="string">    print(r&quot;</span>\<span class="string">&quot;)</span></span><br><span class="line"><span class="string">              ^</span></span><br><span class="line"><span class="string">SyntaxError: EOL while scanning string literal</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; r&#x27;\&#x27;&#x27; == &quot;</span>\\<span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">True</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-19"><a href="#💡-说明-19" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>在一般的python字符串中，反斜杠用于转义可能具有特殊含义的字符（如单引号、双引号和反斜杠本身）。</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;wt\&quot;f&quot;</span></span><br><span class="line"><span class="string">&#x27;wt&quot;f&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在以 <code>r</code> 开头的原始字符串中, 反斜杠并没有特殊含义.</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">r&#x27;wt\&quot;f&#x27;</span> == <span class="string">&#x27;wt\\&quot;f&#x27;</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">repr</span>(<span class="string">r&#x27;wt\&quot;f&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;wt\\&quot;f&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">r&quot;\\n&quot;</span>)</span><br><span class="line"><span class="string">&#x27;\\n&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>这意味着当解析器在原始字符串中遇到反斜杠时，它期望后面有另一个字符。 在我们的例子中（<code>print(r&quot;\&quot;)</code>），反斜杠转义了尾随引号，使解析器没有终止引号（因此产生了<code>SyntaxError</code>）。 这就是为什么反斜杠在原始字符串末尾不起作用的原因。</p></li></ul><hr><h3 id="not-knot-别纠结"><a href="#not-knot-别纠结" class="headerlink" title="&gt; not knot!&#x2F;别纠结!"></a>&gt; not knot!&#x2F;别纠结!</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="literal">True</span></span><br><span class="line">y = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> x == y</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == <span class="keyword">not</span> y</span><br><span class="line">  File <span class="string">&quot;&lt;input&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    x == <span class="keyword">not</span> y</span><br><span class="line">           ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><h4 id="💡-说明-20"><a href="#💡-说明-20" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>运算符的优先级会影响表达式的求值顺序, 而在 Python 中 <code>==</code> 运算符的优先级要高于 <code>not</code> 运算符.</li><li>所以 <code>not x == y</code> 相当于 <code>not (x == y)</code>, 同时等价于 <code>not (True == False)</code>, 最后的运算结果就是 <code>True</code>.</li><li>之所以 <code>x == not y</code> 会抛一个 <code>SyntaxError</code> 异常, 是因为它会被认为等价于 <code>(x == not) y</code>, 而不是你一开始期望的 <code>x == (not y)</code>.</li><li>解释器期望 <code>not</code> 标记是 <code>not in</code> 操作符的一部分 (因为 <code>==</code> 和 <code>not in</code> 操作符具有相同的优先级), 但是它在 <code>not</code> 标记后面找不到 <code>in</code> 标记, 所以会抛出 <code>SyntaxError</code> 异常.</li></ul><hr><h3 id="Half-triple-quoted-strings-三个引号"><a href="#Half-triple-quoted-strings-三个引号" class="headerlink" title="&gt; Half triple-quoted strings&#x2F;三个引号"></a>&gt; Half triple-quoted strings&#x2F;三个引号</h3><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;wtfpython&#x27;</span><span class="string">&#x27;&#x27;</span>)</span><br><span class="line">wtfpython</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;wtfpython&quot;</span><span class="string">&quot;&quot;</span>)</span><br><span class="line">wtfpython</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 下面的语句会抛出 `SyntaxError` 异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># print(&#x27;&#x27;&#x27;wtfpython&#x27;)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># print(&quot;&quot;&quot;wtfpython&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-21"><a href="#💡-说明-21" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>Python 提供隐式的<a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literal-concatenation">字符串连接</a>, 例如,<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;wtf&quot; &quot;python&quot;)</span><br><span class="line">wtfpython</span><br><span class="line">&gt;&gt;&gt; print(&quot;wtf&quot; &quot;&quot;) # or &quot;wtf&quot;&quot;&quot;</span><br><span class="line">wtf</span><br></pre></td></tr></table></figure></li><li><code>&#39;&#39;&#39;</code> 和 <code>&quot;&quot;&quot;</code> 在 Python中也是字符串定界符, Python 解释器在先遇到三个引号的的时候会尝试再寻找三个终止引号作为定界符, 如果不存在则会导致 <code>SyntaxError</code> 异常.</li></ul><hr><h3 id="What’s-wrong-with-booleans-布尔你咋了"><a href="#What’s-wrong-with-booleans-布尔你咋了" class="headerlink" title="&gt; What’s wrong with booleans?&#x2F;布尔你咋了?"></a>&gt; What’s wrong with booleans?&#x2F;布尔你咋了?</h3><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个简单的例子, 统计下面可迭代对象中的布尔型值的个数和整型值的个数</span></span><br><span class="line">mixed_list = [<span class="literal">False</span>, <span class="number">1.0</span>, <span class="string">&quot;some_string&quot;</span>, <span class="number">3</span>, <span class="literal">True</span>, [], <span class="literal">False</span>]</span><br><span class="line">integers_found_so_far = <span class="number">0</span></span><br><span class="line">booleans_found_so_far = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> mixed_list:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">int</span>):</span><br><span class="line">        integers_found_so_far += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(item, <span class="built_in">bool</span>):</span><br><span class="line">        booleans_found_so_far += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>integers_found_so_far</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>booleans_found_so_far</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_bool = <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;wtf&quot;</span> * some_bool</span><br><span class="line"><span class="string">&#x27;wtf&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_bool = <span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;wtf&quot;</span> * some_bool</span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tell_truth</span>():</span><br><span class="line">    <span class="literal">True</span> = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span> == <span class="literal">False</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I have lost faith in truth!&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Output (&lt; 3.x):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tell_truth()</span><br><span class="line">I have lost faith <span class="keyword">in</span> truth!</span><br></pre></td></tr></table></figure><h4 id="💡-说明-22"><a href="#💡-说明-22" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>布尔值是 <code>int</code> 的子类</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(<span class="built_in">bool</span>, <span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(<span class="built_in">int</span>, <span class="built_in">bool</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>因此，<code>True</code> 和 <code>False</code> 是 <code>int</code> 的实例</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="literal">True</span>, <span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="literal">False</span>, <span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p><code>True</code> 的整数值是 <code>1</code>, 而 <code>False</code> 的整数值是 <code>0</code></p></li></ul>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="literal">False</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><p>关于其背后的原理, 请看这个 StackOverflow 的<a href="https://stackoverflow.com/a/8169049/4354153">回答</a>.</p></li><li><p>最初，Python 没有 <code>bool</code> 类型（人们使用 0 表示假，使用非零值，如 1 表示真）。<code>True</code>、<code>False</code> 和 <code>bool</code> 类型在 2.x 版本中被添加，但为了向后兼容，<code>True</code> 和 <code>False</code> 不能成为常量。它们只是内置变量，可以重新分配它们</p></li><li><p>Python 3 向后不兼容，问题终于得到解决，因此最后一个代码段不适用于 Python 3.x！</p></li></ul><hr><h3 id="Class-attributes-and-instance-attributes-类属性和实例属性"><a href="#Class-attributes-and-instance-attributes-类属性和实例属性" class="headerlink" title="&gt; Class attributes and instance attributes&#x2F;类属性和实例属性"></a>&gt; Class attributes and instance attributes&#x2F;类属性和实例属性</h3><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.x, B.x, C.x</span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B.x = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.x, B.x, C.x</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.x = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.x, B.x, C.x</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.x, A.x</span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.x += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.x, A.x</span><br><span class="line">(<span class="number">4</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>:</span><br><span class="line">    some_var = <span class="number">15</span></span><br><span class="line">    some_list = [<span class="number">5</span>]</span><br><span class="line">    another_list = [<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="variable language_">self</span>.some_var = x + <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.some_list = <span class="variable language_">self</span>.some_list + [x]</span><br><span class="line">        <span class="variable language_">self</span>.another_list += [x]</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_obj = SomeClass(<span class="number">420</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_obj.some_list</span><br><span class="line">[<span class="number">5</span>, <span class="number">420</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_obj.another_list</span><br><span class="line">[<span class="number">5</span>, <span class="number">420</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_obj = SomeClass(<span class="number">111</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_obj.some_list</span><br><span class="line">[<span class="number">5</span>, <span class="number">111</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_obj.another_list</span><br><span class="line">[<span class="number">5</span>, <span class="number">420</span>, <span class="number">111</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_obj.another_list <span class="keyword">is</span> SomeClass.another_list</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_obj.another_list <span class="keyword">is</span> some_obj.another_list</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-23"><a href="#💡-说明-23" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>类变量和实例变量在内部是通过类对象的字典来处理(译: 就是 <code>__dict__</code> 属性). 如果在当前类的字典中找不到的话就去它的父类中寻找.</li><li><code>+=</code> 运算符会在原地修改可变对象, 而不是创建新对象. 因此, 在这种情况下, 修改一个实例的属性会影响其他实例和类属性.</li></ul><hr><h3 id="yielding-None-生成-None"><a href="#yielding-None-生成-None" class="headerlink" title="&gt; yielding None&#x2F;生成 None"></a>&gt; yielding None&#x2F;生成 None</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">some_iterable = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">some_func</span>(<span class="params">val</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;something&quot;</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> some_iterable]</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(<span class="keyword">yield</span> x) <span class="keyword">for</span> x <span class="keyword">in</span> some_iterable]</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;listcomp&gt; at <span class="number">0x7f70b0a4ad58</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>([(<span class="keyword">yield</span> x) <span class="keyword">for</span> x <span class="keyword">in</span> some_iterable])</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>((<span class="keyword">yield</span> x) <span class="keyword">for</span> x <span class="keyword">in</span> some_iterable)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;b&#x27;</span>, <span class="literal">None</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(some_func((<span class="keyword">yield</span> x)) <span class="keyword">for</span> x <span class="keyword">in</span> some_iterable)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;something&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;something&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="💡-说明-24"><a href="#💡-说明-24" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>来源和解释可以在这里找到: <a href="https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions">https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions</a></li><li>相关错误报告: <a href="http://bugs.python.org/issue10544">http://bugs.python.org/issue10544</a></li><li>这个bug在3.7以后的版本中不被推荐使用, 并在3.8中被修复. 因此在3.8中尝试在推导式中使用 yield, 只会得到一个 SyntaxError. 详细内容可以看<a href="https://docs.python.org/dev/whatsnew/3.7.html#deprecated-python-behavior">3.7更新内容</a>, <a href="https://docs.python.org/dev/whatsnew/3.8.html#changes-in-python-behavior">3.8更新内容</a>.</li></ul><hr><h3 id="Yielding-from…-return-生成器里的return"><a href="#Yielding-from…-return-生成器里的return" class="headerlink" title="&gt; Yielding from… return!&#x2F;生成器里的return *"></a>&gt; Yielding from… return!&#x2F;生成器里的return *</h3><!-- Example ID: 5626d8ef-8802-49c2-adbc-7cda5c550816 ---><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">some_func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;wtf&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> <span class="built_in">range</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Output (&gt; 3.3):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(some_func(<span class="number">3</span>))</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p><code>&quot;wtf&quot;</code> 去哪儿了？是因为<code>yield from</code>的一些特殊效果吗？让我们验证一下</p><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">some_func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;wtf&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">          <span class="keyword">yield</span> i</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(some_func(<span class="number">3</span>))</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p>同样的结果，这里也不起作用。</p><h4 id="💡-说明-25"><a href="#💡-说明-25" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li>从 Python 3.3 开始，可以在生成器中使用带有值的 <code>return</code> 语句（参见 <a href="https://www.python.org/dev/peps/pep-0380/">PEP380</a>）。 <a href="https://www.python.org/dev/peps/pep-0380/#enhancements-to-stopiteration">官方文档</a> 描述，</li></ul><blockquote><p>“… 生成器中的 <code>return expr</code> 会导致在退出生成器时引发 <code>StopIteration(expr)</code>。”</p></blockquote><ul><li><p>在 <code>some_func(3)</code> 例子中，<code>return</code> 语句在开始就引发了<code>StopIteration</code>。 <code>StopIteration</code> 异常会在<code>list(...)</code> 包装器和<code>for</code> 循环中自动捕获。 因此，以上两个片段都产生的是一个空列表。</p></li><li><p>要从生成器 <code>some_func</code> 中获取 <code>[&quot;wtf&quot;]</code>，我们需要捕获 <code>StopIteration</code> 异常，</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">next</span>(some_func(<span class="number">3</span>))</span><br><span class="line"><span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">    some_string = e.value</span><br></pre></td></tr></table></figure>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_string</span><br><span class="line">[<span class="string">&quot;wtf&quot;</span>]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Nan-reflexivity-Nan的自反性"><a href="#Nan-reflexivity-Nan的自反性" class="headerlink" title="&gt; Nan-reflexivity&#x2F;Nan的自反性"></a>&gt; Nan-reflexivity&#x2F;Nan的自反性</h3><!-- Example ID: 59bee91a-36e0-47a4-8c7d-aa89bf1d3976 ---><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">b = <span class="built_in">float</span>(<span class="string">&#x27;nan&#x27;</span>)</span><br><span class="line">c = <span class="built_in">float</span>(<span class="string">&#x27;-iNf&#x27;</span>)  <span class="comment"># 这些字符串不区分大小写</span></span><br><span class="line">d = <span class="built_in">float</span>(<span class="string">&#x27;nan&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">inf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">nan</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">-inf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">&#x27;some_other_string&#x27;</span>)</span><br><span class="line">ValueError: could <span class="keyword">not</span> convert string to <span class="built_in">float</span>: some_other_string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == -c <span class="comment">#inf==inf</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span> == <span class="literal">None</span> <span class="comment"># None==None</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b == d <span class="comment">#但是 nan!=nan</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">50</span>/a</span><br><span class="line"><span class="number">0.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a/a</span><br><span class="line">nan</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">23</span> + b</span><br><span class="line">nan</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="built_in">float</span>(<span class="string">&#x27;nan&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x / x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y <span class="keyword">is</span> y <span class="comment"># 同一性(identity)具备</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y == y <span class="comment"># y不具备相等性(equality)</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[y] == [y] <span class="comment"># 但包含y的列表验证相等性(equality)成功了</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-26"><a href="#💡-说明-26" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><p><code>&#39;inf&#39;</code> 和 <code>&#39;nan&#39;</code> 是特殊的字符串(不区分大小写), 当显示转换成 <code>float</code> 型时, 它们分别用于表示数学意义上的 “无穷大” 和 “非数字”.</p><ul><li><p>由于根据 IEEE 标准 <code>NaN != NaN</code>，遵守此规则打破了 Python 中集合元素的自反性假设，即如果 <code>x</code> 是 <code>list</code> 等集合的一部分，则比较等运算的实现基于假设<code>x == x</code>。由于这个假设，在比较两个元素时首先比较身份<code>identity</code>（因为它更快），并且仅在身份不匹配时才比较值。以下片段将更清楚地说明，</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="built_in">float</span>(<span class="string">&#x27;nan&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == x, [x] == [x]</span><br><span class="line">(<span class="literal">False</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="built_in">float</span>(<span class="string">&#x27;nan&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y == y, [y] == [y]</span><br><span class="line">(<span class="literal">False</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == y, [x] == [y]</span><br><span class="line">(<span class="literal">False</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>由于 <code>x</code> 和 <code>y</code> 的身份<code>identity</code>不同，所以考虑的值也不同； 因此这次比较返回“False”。</p></li><li><p>感兴趣可以阅读 <a href="https://bertrandmeyer.com/2010/02/06/reflexivity-and-other-pillars-of-civilization/">Reflexivity, and other pillars of civilization</a></p></li></ul><hr><h3 id="Mutating-the-immutable-强人所难"><a href="#Mutating-the-immutable-强人所难" class="headerlink" title="&gt; Mutating the immutable!&#x2F;强人所难"></a>&gt; Mutating the immutable!&#x2F;强人所难</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">some_tuple = (<span class="string">&quot;A&quot;</span>, <span class="string">&quot;tuple&quot;</span>, <span class="string">&quot;with&quot;</span>, <span class="string">&quot;values&quot;</span>)</span><br><span class="line">another_tuple = ([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_tuple[<span class="number">2</span>] = <span class="string">&quot;change this&quot;</span></span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_tuple[<span class="number">2</span>].append(<span class="number">1000</span>) <span class="comment"># 这里不出现错误</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_tuple</span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">1000</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_tuple[<span class="number">2</span>] += [<span class="number">99</span>, <span class="number">999</span>]</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_tuple</span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">1000</span>, <span class="number">99</span>, <span class="number">999</span>])</span><br></pre></td></tr></table></figure><p>我还以为元组是不可变的呢…</p><h4 id="💡-说明-27"><a href="#💡-说明-27" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>引用 <a href="https://docs.python.org/2/reference/datamodel.html">https://docs.python.org/2/reference/datamodel.html</a></p><blockquote><p>不可变序列<br>      不可变序列的对象一旦创建就不能再改变. (如果对象包含对其他对象的引用，则这些其他对象可能是可变的并且可能会被修改; 但是，由不可变对象直接引用的对象集合不能更改.)</p></blockquote></li><li><p><code>+=</code> 操作符在原地修改了列表. 元素赋值操作并不工作, 但是当异常抛出时, 元素已经在原地被修改了.</p></li></ul><p>(译: 对于不可变对象, 这里指tuple, <code>+=</code> 并不是原子操作, 而是 <code>extend</code> 和 <code>=</code> 两个动作, 这里 <code>=</code> 操作虽然会抛出异常, 但 <code>extend</code> 操作已经修改成功了. 详细解释可以看<a href="https://segmentfault.com/a/1190000010767068">这里</a>)</p><hr><h3 id="The-disappearing-variable-from-outer-scope-消失的外部变量"><a href="#The-disappearing-variable-from-outer-scope-消失的外部变量" class="headerlink" title="&gt; The disappearing variable from outer scope&#x2F;消失的外部变量"></a>&gt; The disappearing variable from outer scope&#x2F;消失的外部变量</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">e = <span class="number">7</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>Output (Python 2.x):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># prints nothing</span></span><br></pre></td></tr></table></figure><p><strong>Output (Python 3.x):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(e)</span><br><span class="line">NameError: name <span class="string">&#x27;e&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h4 id="💡-说明-28"><a href="#💡-说明-28" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>出处: <a href="https://docs.python.org/3/reference/compound_stmts.html#except">https://docs.python.org/3/reference/compound_stmts.html#except</a></p><p>当使用 <code>as</code> 为目标分配异常的时候, 将在except子句的末尾清除该异常.</p><p>这就好像</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">except</span> E <span class="keyword">as</span> N:</span><br><span class="line">    foo</span><br></pre></td></tr></table></figure><p>会被翻译成</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">except</span> E <span class="keyword">as</span> N:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        foo</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">del</span> N</span><br></pre></td></tr></table></figure><p>这意味着异常必须在被赋值给其他变量才能在 <code>except</code> 子句之后引用它. 而异常之所以会被清除, 则是由于上面附加的回溯信息(trackback)会和栈帧(stack frame)形成循环引用, 使得该栈帧中的所有本地变量在下一次垃圾回收发生之前都处于活动状态.(译: 也就是说不会被回收)</p></li><li><p>子句在 Python 中并没有独立的作用域. 示例中的所有内容都处于同一作用域内, 所以变量 <code>e</code> 会由于执行了 <code>except</code> 子句而被删除. 而对于有独立的内部作用域的函数来说情况就不一样了. 下面的例子说明了这一点:</p>   <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">del</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line">y = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>   <strong>Output:</strong></p>   <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;f(x)</span><br><span class="line">UnboundLocalError: local variable <span class="string">&#x27;x&#x27;</span> referenced before assignment</span><br><span class="line">&gt;&gt;&gt;f(y)</span><br><span class="line">UnboundLocalError: local variable <span class="string">&#x27;x&#x27;</span> referenced before assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>在 Python 2.x 中, <code>Exception()</code> 实例被赋值给了变量 <code>e</code>, 所以当你尝试打印结果的时候, 它的输出为空.（译: 正常的Exception实例打印出来就是空）</p><p>  <strong>Output (Python 2.x):</strong></p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>e</span><br><span class="line">Exception()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> e</span><br><span class="line"><span class="comment"># 没有打印任何内容!</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="The-mysterious-key-type-conversion-神秘的键型转换"><a href="#The-mysterious-key-type-conversion-神秘的键型转换" class="headerlink" title="&gt; The mysterious key type conversion&#x2F;神秘的键型转换 *"></a>&gt; The mysterious key type conversion&#x2F;神秘的键型转换 *</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>(<span class="title class_ inherited__">str</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">some_dict = &#123;<span class="string">&#x27;s&#x27;</span>:<span class="number">42</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="built_in">list</span>(some_dict.keys())[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">str</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = SomeClass(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict[s] = <span class="number">40</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict <span class="comment"># 预期: 两个不同的键值对</span></span><br><span class="line">&#123;<span class="string">&#x27;s&#x27;</span>: <span class="number">40</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="built_in">list</span>(some_dict.keys())[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">str</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-29"><a href="#💡-说明-29" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>由于 <code>SomeClass</code> 会从 <code>str</code> 自动继承 <code>__hash__</code> 方法, 所以 <code>s</code> 对象和 <code>&quot;s&quot;</code> 字符串的哈希值是相同的.</li><li>而 <code>SomeClass(&quot;s&quot;) == &quot;s&quot;</code> 为 <code>True</code> 是因为 <code>SomeClass</code> 也继承了 <code>str</code> 类 <code>__eq__</code> 方法.</li><li>由于两者的哈希值相同且相等, 所以它们在字典中表示相同的键.</li><li>如果想要实现期望的功能, 我们可以重定义 <code>SomeClass</code> 的 <code>__eq__</code> 方法.<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>(<span class="title class_ inherited__">str</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">          <span class="built_in">type</span>(<span class="variable language_">self</span>) <span class="keyword">is</span> SomeClass</span><br><span class="line">          <span class="keyword">and</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> SomeClass</span><br><span class="line">          <span class="keyword">and</span> <span class="built_in">super</span>().__eq__(other)</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 当我们自定义 __eq__ 方法时, Python 不会再自动继承 __hash__ 方法</span></span><br><span class="line">  <span class="comment"># 所以我们也需要定义它</span></span><br><span class="line">  __hash__ = <span class="built_in">str</span>.__hash__</span><br><span class="line"></span><br><span class="line">some_dict = &#123;<span class="string">&#x27;s&#x27;</span>:<span class="number">42</span>&#125;</span><br></pre></td></tr></table></figure><strong>Output:</strong><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = SomeClass(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict[s] = <span class="number">40</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict</span><br><span class="line">&#123;<span class="string">&#x27;s&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">42</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keys = <span class="built_in">list</span>(some_dict.keys())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(keys[<span class="number">0</span>]), <span class="built_in">type</span>(keys[<span class="number">1</span>])</span><br><span class="line">(__main__.SomeClass, <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Let’s-see-if-you-can-guess-this-看看你能否猜到这一点"><a href="#Let’s-see-if-you-can-guess-this-看看你能否猜到这一点" class="headerlink" title="&gt; Let’s see if you can guess this?&#x2F;看看你能否猜到这一点?"></a>&gt; Let’s see if you can guess this?&#x2F;看看你能否猜到这一点?</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a, b = a[b] = &#123;&#125;, <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">5</span>: (&#123;...&#125;, <span class="number">5</span>)&#125;</span><br></pre></td></tr></table></figure><h4 id="💡-说明-30"><a href="#💡-说明-30" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>根据 <a href="https://docs.python.org/2/reference/simple_stmts.html#assignment-statements">Python 语言参考</a>, 赋值语句的形式如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(target_list &quot;=&quot;)+ (expression_list | yield_expression)</span><br></pre></td></tr></table></figure><blockquote><p>赋值语句计算表达式列表(expression list)(牢记 这可以是单个表达式或以逗号分隔的列表, 后者返回元组)并将单个结果对象从左到右分配给目标列表中的每一项.</p></blockquote></li><li><p><code>(target_list &quot;=&quot;)+</code> 中的 <code>+</code> 意味着可以有<strong>一个或多个</strong>目标列表. 在这个例子中, 目标列表是 <code>a, b</code> 和 <code>a[b]</code> (注意表达式列表只能有一个, 在我们的例子中是 <code>&#123;&#125;, 5</code>).</p></li><li><p>表达式列表计算结束后, 将其值自动解包后<strong>从左到右</strong>分配给目标列表(target list). 因此, 在我们的例子中, 首先将 <code>&#123;&#125;, 5</code> 元组并赋值给 <code>a, b</code>, 然后我们就可以得到 <code>a = &#123;&#125;</code> 且 <code>b = 5</code>.</p></li><li><p><code>a</code> 被赋值的 <code>&#123;&#125;</code> 是可变对象.</p></li><li><p>第二个目标列表是 <code>a[b]</code> (你可能觉得这里会报错, 因为在之前的语句中 <code>a</code> 和 <code>b</code> 都还没有被定义. 但是别忘了, 我们刚刚将 <code>a</code> 赋值 <code>&#123;&#125;</code> 且将 <code>b</code> 赋值为 <code>5</code>).</p></li><li><p>现在, 我们将通过将字典中键 <code>5</code> 的值设置为元组 <code>(&#123;&#125;, 5)</code> 来创建循环引用 (输出中的 <code>&#123;...&#125;</code> 指与 <code>a</code> 引用了相同的对象). 下面是一个更简单的循环引用的例子</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_list = some_list[<span class="number">0</span>] = [<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_list</span><br><span class="line">[[...]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_list[<span class="number">0</span>]</span><br><span class="line">[[...]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_list <span class="keyword">is</span> some_list[<span class="number">0</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_list[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] == some_list</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>我们的例子就是这种情况 (<code>a[b][0]</code> 与 <code>a</code> 是相同的对象)</p></li><li><p>总结一下, 你也可以把例子拆成</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a, b = &#123;&#125;, <span class="number">5</span></span><br><span class="line">a[b] = a, b</span><br></pre></td></tr></table></figure><p>并且可以通过 <code>a[b][0]</code> 与 <code>a</code> 是相同的对象来证明是循环引用</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[b][<span class="number">0</span>] <span class="keyword">is</span> a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Exceeds-the-limit-for-integer-string-conversion-整型转字符串越界"><a href="#Exceeds-the-limit-for-integer-string-conversion-整型转字符串越界" class="headerlink" title="&gt; Exceeds the limit for integer string conversion&#x2F;整型转字符串越界"></a>&gt; Exceeds the limit for integer string conversion&#x2F;整型转字符串越界</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Python 3.10.6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;2&quot;</span> * <span class="number">5432</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Python 3.10.8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;2&quot;</span> * <span class="number">5432</span>)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Python 3.10.6</span></span><br><span class="line"><span class="number">222222222222222222222222222222222222222222222222222222222222222.</span>..</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Python 3.10.8</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">   ...</span><br><span class="line">ValueError: Exceeds the limit (<span class="number">4300</span>) <span class="keyword">for</span> integer string conversion:</span><br><span class="line">   value has <span class="number">5432</span> digits; use sys.set_int_max_str_digits()</span><br><span class="line">   to increase the limit.</span><br></pre></td></tr></table></figure><h4 id="💡-说明-31"><a href="#💡-说明-31" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>对<code>int()</code>的调用在Python 3.10.6中运行良好，但在Python 3.10.8中引发ValueError。请注意，Python仍然可以处理大整数。只有在整型和字符串之间转换时才会出现此错误。</li><li>幸运的是，当您希望操作超过允许的位数限制时，可以增加该限制的上限。为此，可以使用以下方法之一：<ul><li>使用 -X int_max_str_digits 的命令行参数（例如， python3 -X int_max_str_digits&#x3D;640）</li><li>使用来自sys模块的set_int_max_str_digits()函数</li><li>设定 PYTHONINTMAXSTRDIGITS 环境变量</li></ul></li></ul><p>更多更改设置上限的操作细节查看<a href="https://docs.python.org/3/library/stdtypes.html#int-max-str-digits">文档</a>。</p><hr><h2 id="Section-Slippery-Slopes-滑坡谬误"><a href="#Section-Slippery-Slopes-滑坡谬误" class="headerlink" title="Section: Slippery Slopes&#x2F;滑坡谬误"></a>Section: Slippery Slopes&#x2F;滑坡谬误</h2><h3 id="Modifying-a-dictionary-while-iterating-over-it-迭代字典时的修改"><a href="#Modifying-a-dictionary-while-iterating-over-it-迭代字典时的修改" class="headerlink" title="&gt; Modifying a dictionary while iterating over it&#x2F;迭代字典时的修改"></a>&gt; Modifying a dictionary while iterating over it&#x2F;迭代字典时的修改</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = &#123;<span class="number">0</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    <span class="keyword">del</span> x[i]</span><br><span class="line">    x[i+<span class="number">1</span>] = <span class="literal">None</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p><strong>Output (Python 2.7- Python 3.5):</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>是的, 它运行了<strong>八次</strong>然后才停下来.</p><h4 id="💡-说明-32"><a href="#💡-说明-32" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>Python不支持对字典进行迭代的同时修改它.</li><li>它之所以运行8次, 是因为字典会自动扩容以容纳更多键值(我们有8次删除记录, 因此需要扩容). 这实际上是一个实现细节. (译: 应该是因为字典的初始最小值是8, 扩容会导致散列表地址发生变化而中断循环.)</li><li>在不同的Python实现中删除键的处理方式以及调整大小的时间可能会有所不同.(译: 就是说什么时候扩容在不同版本中可能是不同的, 在3.6及3.7的版本中到<a href="https://github.com/python/cpython/blob/v3.6.1/Objects/dictobject.c#L103-L110">5</a>就会自动扩容了. 以后也有可能再次发生变化. 这是为了避免散列冲突. 顺带一提, 后面两次扩容会扩展为32和256. 即<code>8-&gt;32-&gt;256</code>.)</li><li>更多的信息, 你可以参考这个StackOverflow的<a href="https://stackoverflow.com/questions/44763802/bug-in-python-dict">回答</a>, 它详细的解释一个类似的例子.</li></ul><hr><h3 id="Stubborn-del-operator-坚强的-del"><a href="#Stubborn-del-operator-坚强的-del" class="headerlink" title="&gt; Stubborn del operator&#x2F;坚强的 del *"></a>&gt; Stubborn <code>del</code> operator&#x2F;坚强的 <code>del</code> *</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Deleted!&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong><br>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = SomeClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> x <span class="comment"># 这里应该会输出 &quot;Deleted!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> y</span><br><span class="line">Deleted!</span><br></pre></td></tr></table></figure><p>唷, 终于删除了. 你可能已经猜到了在我们第一次尝试删除 <code>x</code> 时是什么让 <code>__del__</code> 免于被调用的. 那让我们给这个例子增加点难度.</p><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = SomeClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y <span class="comment"># 检查一下y是否存在</span></span><br><span class="line">&lt;__main__.SomeClass instance at <span class="number">0x7f98a1a67fc8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> y <span class="comment"># 像之前一样, 这里应该会输出 &quot;Deleted!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">globals</span>() <span class="comment"># 好吧, 并没有. 让我们看一下所有的全局变量</span></span><br><span class="line">Deleted!</span><br><span class="line">&#123;<span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;__builtin__&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;SomeClass&#x27;</span>: &lt;<span class="keyword">class</span> <span class="title class_">__main__</span>.SomeClass at <span class="number">0x7f98a1a5f668</span>&gt;, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><p>好了，现在它被删除了 :confused:</p><h4 id="💡-说明-33"><a href="#💡-说明-33" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><code>del x</code> 并不会立刻调用 <code>x.__del__()</code>.</li><li>每当遇到 <code>del x</code>, Python 会将 <code>x</code> 的引用数减1, 当 <code>x</code> 的引用数减到0时就会调用 <code>x.__del__()</code>.</li><li>在第二个例子中, <code>y.__del__()</code> 之所以未被调用, 是因为前一条语句 (<code>&gt;&gt;&gt; y</code>) 对同一对象创建了另一个引用, 从而防止在执行 <code>del y</code> 后对象的引用数变为0.</li><li>调用 <code>globals</code> 导致引用被销毁, 因此我们可以看到 “Deleted!” 终于被输出了.</li><li>(译: 这其实是 Python 交互解释器的特性, 它会自动让 <code>_</code> 保存上一个表达式输出的值, 详细可以看<a href="https://www.cnblogs.com/leisurelylicht/p/diao-pi-de-kong-zhi-tai.html">这里</a>.)</li></ul><hr><h3 id="The-out-of-scope-variable-外部作用域变量"><a href="#The-out-of-scope-variable-外部作用域变量" class="headerlink" title="&gt; The out of scope variable&#x2F;外部作用域变量"></a>&gt; The out of scope variable&#x2F;外部作用域变量</h3><!-- Example ID: 75c03015-7be9-4289-9e22-4f5fdda056f7 ---><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">some_func</span>():</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">another_func</span>():</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">some_closure_func</span>():</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">some_inner_func</span>():</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> some_inner_func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">another_closure_func</span>():</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">another_inner_func</span>():</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> another_inner_func()</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_func()</span><br><span class="line">UnboundLocalError: local variable <span class="string">&#x27;a&#x27;</span> referenced before assignment</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_closure_func()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_closure_func()</span><br><span class="line">UnboundLocalError: local variable <span class="string">&#x27;a&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure><h4 id="💡-说明-34"><a href="#💡-说明-34" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>当你在作用域中对变量进行赋值时, 变量会变成该作用域内的局部变量. 因此 <code>a</code> 会变成 <code>another_func</code> 函数作用域中的局部变量, 但它在函数作用域中并没有被初始化, 所以会引发错误.</p></li><li><p>想要在 <code>another_func</code> 中修改外部作用域变量 <code>a</code> 的话, 可以使用 <code>global</code> 关键字.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">another_func</span>()</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_func()</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>another_closure_func</code> 函数中，<code>a</code> 会变成 <code>another_inner_func</code> 函数作用域中的局部变量, 但它在同一作用域中并没有被初始化, 所以会引发错误。</p></li><li><p>想要在 <code>another_inner_func</code> 中修改外部作用域变量 <code>a</code> 的话, 可以使用 <code>nonlocal</code> 关键字。nonlocal 表达式用于（除全局作用域外）最近一级的外部作用域。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">another_func</span>():</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">another_inner_func</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> another_inner_func()</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_func()</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p><code>global</code> and <code>nonlocal</code> 关键字告诉 <code>Python</code> 解释器，不要声明新变量，而是在相应的外部作用域中查找变量。</p></li><li><p>可以阅读<a href="https://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html">这个</a>简短却很棒的指南, 了解更多关于 Python 中命名空间和作用域的工作原理。</p></li></ul><hr><h3 id="Deleting-a-list-item-while-iterating-迭代列表时删除元素"><a href="#Deleting-a-list-item-while-iterating-迭代列表时删除元素" class="headerlink" title="&gt; Deleting a list item while iterating&#x2F;迭代列表时删除元素"></a>&gt; Deleting a list item while iterating&#x2F;迭代列表时删除元素</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list_2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list_3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list_4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(list_1):</span><br><span class="line">    <span class="keyword">del</span> item</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(list_2):</span><br><span class="line">    list_2.remove(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(list_3[:]):</span><br><span class="line">    list_3.remove(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(list_4):</span><br><span class="line">    list_4.pop(idx)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_2</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_3</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_4</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>你能猜到为什么输出是 <code>[2, 4]</code> 吗?</p><h4 id="💡-说明-35"><a href="#💡-说明-35" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>在迭代时修改对象是一个很愚蠢的主意. 正确的做法是迭代对象的副本, <code>list_3[:]</code> 就是这么做的.</p>   <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(some_list)</span><br><span class="line"><span class="number">139798789457608</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(some_list[:]) <span class="comment"># 注意python为切片列表创建了新对象.</span></span><br><span class="line"><span class="number">139798779601192</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><code>del</code>, <code>remove</code> 和 <code>pop</code> 的不同:</strong></p><ul><li><code>del var_name</code> 只是从本地或全局命名空间中删除了 <code>var_name</code> (这就是为什么 <code>list_1</code> 没有受到影响).</li><li><code>remove</code> 会删除第一个匹配到的指定值, 而不是特定的索引, 如果找不到值则抛出 <code>ValueError</code> 异常.</li><li><code>pop</code> 则会删除指定索引处的元素并返回它, 如果指定了无效的索引则抛出 <code>IndexError</code> 异常.</li></ul><p><strong>为什么输出是 <code>[2, 4]</code>?</strong></p><ul><li>列表迭代是按索引进行的, 所以当我们从 <code>list_2</code> 或 <code>list_4</code> 中删除 <code>1</code> 时, 列表的内容就变成了 <code>[2, 3, 4]</code>. 剩余元素会依次位移, 也就是说, <code>2</code> 的索引会变为 0, <code>3</code> 会变为 1. 由于下一次迭代将获取索引为 1 的元素 (即 <code>3</code>), 因此 <code>2</code> 将被彻底的跳过. 类似的情况会交替发生在列表中的每个元素上.</li></ul><ul><li>参考这个StackOverflow的<a href="https://stackoverflow.com/questions/45946228/what-happens-when-you-try-to-delete-a-list-element-while-iterating-over-it">回答</a>来解释这个例子</li><li>关于Python中字典的类似例子, 可以参考这个Stackoverflow的<a href="https://stackoverflow.com/questions/45877614/how-to-change-all-the-dictionary-keys-in-a-for-loop-with-d-items">回答</a>.</li></ul><hr><h3 id="Lossy-zip-of-iterators-丢三落四的zip"><a href="#Lossy-zip-of-iterators-丢三落四的zip" class="headerlink" title="&gt; Lossy zip of iterators&#x2F;丢三落四的zip *"></a>&gt; Lossy zip of iterators&#x2F;丢三落四的zip *</h3><!-- Example ID: c28ed154-e59f-4070-8eb6-8967a4acac6d ---><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">7</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>first_three, remaining = numbers[:<span class="number">3</span>], numbers[<span class="number">3</span>:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>first_three, remaining</span><br><span class="line">([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_iter = <span class="built_in">iter</span>(numbers)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>(numbers_iter, first_three)) </span><br><span class="line">[(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="comment"># so far so good, let&#x27;s zip the remaining</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>(numbers_iter, remaining))</span><br><span class="line">[(<span class="number">4</span>, <span class="number">3</span>), (<span class="number">5</span>, <span class="number">4</span>), (<span class="number">6</span>, <span class="number">5</span>)]</span><br></pre></td></tr></table></figure><p><code>numbers</code> 列表中的元素 <code>3</code> 哪里去了？</p><h4 id="💡-说明-36"><a href="#💡-说明-36" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li><p>根据Python <a href="https://docs.python.org/3.3/library/functions.html#zip">文档</a>， <code>zip</code> 函数的大概实现如下：</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zip</span>(<span class="params">*iterables</span>):</span><br><span class="line">    sentinel = <span class="built_in">object</span>()</span><br><span class="line">    iterators = [<span class="built_in">iter</span>(it) <span class="keyword">for</span> it <span class="keyword">in</span> iterables]</span><br><span class="line">    <span class="keyword">while</span> iterators:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> it <span class="keyword">in</span> iterators:</span><br><span class="line">            elem = <span class="built_in">next</span>(it, sentinel)</span><br><span class="line">            <span class="keyword">if</span> elem <span class="keyword">is</span> sentinel: <span class="keyword">return</span></span><br><span class="line">            result.append(elem)</span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">tuple</span>(result)</span><br></pre></td></tr></table></figure></li><li><p>该函数接受任意数量的可迭代对象，通过调用 <code>next</code> 函数将它们的每个项目添加到 <code>result</code> 列表中，并在任一可迭代对象耗尽时停止。</p></li><li><p>这里需要注意的是，当任一可迭代对象用尽时，<code>result</code> 列表中的现有元素将被丢弃。这就是 <code>numbers_iter</code> 中的 <code>3</code> 所发生的情况。</p></li><li><p>使用 zip 执行上述操作的正确方法是:</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">7</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_iter = <span class="built_in">iter</span>(numbers)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>(first_three, numbers_iter))</span><br><span class="line">[(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>(remaining, numbers_iter))</span><br><span class="line">[(<span class="number">3</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">5</span>), (<span class="number">6</span>, <span class="number">6</span>)]</span><br></pre></td></tr></table></figure><p>  <code>zip</code> 的第一个参数应当是有最少元素的那个。</p></li></ul><hr><h3 id="Loop-variables-leaking-out-循环变量泄漏"><a href="#Loop-variables-leaking-out-循环变量泄漏" class="headerlink" title="&gt; Loop variables leaking out!&#x2F;循环变量泄漏!"></a>&gt; Loop variables leaking out!&#x2F;循环变量泄漏!</h3><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(x, <span class="string">&#x27;: for x inside loop&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x, <span class="string">&#x27;: x in global&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span> : <span class="keyword">for</span> x inside loop</span><br><span class="line"><span class="number">6</span> : x <span class="keyword">in</span> <span class="keyword">global</span></span><br></pre></td></tr></table></figure><p>但是 <code>x</code> 从未在循环外被定义…</p><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这次我们先初始化x</span></span><br><span class="line">x = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(x, <span class="string">&#x27;: for x inside loop&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x, <span class="string">&#x27;: x in global&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span> : <span class="keyword">for</span> x inside loop</span><br><span class="line"><span class="number">6</span> : x <span class="keyword">in</span> <span class="keyword">global</span></span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = 1</span><br><span class="line">print([x for x in range(5)])</span><br><span class="line">print(x, &#x27;: x in global&#x27;)</span><br></pre></td></tr></table></figure><p><strong>Output (on Python 2.x):</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0, 1, 2, 3, 4]</span><br><span class="line">(4, &#x27;: x in global&#x27;)</span><br></pre></td></tr></table></figure><p><strong>Output (on Python 3.x):</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0, 1, 2, 3, 4]</span><br><span class="line">1 : x in global</span><br></pre></td></tr></table></figure><h4 id="💡-说明-37"><a href="#💡-说明-37" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>在 Python 中, for 循环使用所在作用域并在结束后保留定义的循环变量. 如果我们曾在全局命名空间中定义过循环变量. 在这种情况下, 它会重新绑定现有变量.</p></li><li><p>Python 2.x 和 Python 3.x 解释器在列表推导式示例中的输出差异, 在文档 <a href="https://docs.python.org/3/whatsnew/3.0.html">What’s New In Python 3.0</a> 中可以找到相关的解释:</p><blockquote><p>“列表推导不再支持句法形式 <code>[... for var in item1, item2, ...]</code>. 取而代之的是 <code>[... for var in (item1, item2, ...)]</code>. 另外, 注意列表推导具有不同的语义: 它们更接近于 <code>list()</code> 构造函数中生成器表达式的语法糖(译: 这一句我也不是很明白), 特别是循环控制变量不再泄漏到周围的作用域中.”</p></blockquote></li></ul><hr><h3 id="Beware-of-default-mutable-arguments-当心默认的可变参数"><a href="#Beware-of-default-mutable-arguments-当心默认的可变参数" class="headerlink" title="&gt; Beware of default mutable arguments!&#x2F;当心默认的可变参数!"></a>&gt; Beware of default mutable arguments!&#x2F;当心默认的可变参数!</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">some_func</span>(<span class="params">default_arg=[]</span>):</span><br><span class="line">    default_arg.append(<span class="string">&quot;some_string&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> default_arg</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func()</span><br><span class="line">[<span class="string">&#x27;some_string&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func()</span><br><span class="line">[<span class="string">&#x27;some_string&#x27;</span>, <span class="string">&#x27;some_string&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func([])</span><br><span class="line">[<span class="string">&#x27;some_string&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func()</span><br><span class="line">[<span class="string">&#x27;some_string&#x27;</span>, <span class="string">&#x27;some_string&#x27;</span>, <span class="string">&#x27;some_string&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="💡-说明-38"><a href="#💡-说明-38" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>Python中函数的默认可变参数并不是每次调用该函数时都会被初始化. 相反, 它们会使用最近分配的值作为默认值. 当我们明确的将 <code>[]</code> 作为参数传递给 <code>some_func</code> 的时候, 就不会使用 <code>default_arg</code> 的默认值, 所以函数会返回我们所期望的结果.</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">some_func</span>(<span class="params">default_arg=[]</span>):</span><br><span class="line">    default_arg.append(<span class="string">&quot;some_string&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> default_arg</span><br></pre></td></tr></table></figure><p>  <strong>Output:</strong></p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func.__defaults__ <span class="comment"># 这里会显示函数的默认参数的值</span></span><br><span class="line">([],)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func.__defaults__</span><br><span class="line">([<span class="string">&#x27;some_string&#x27;</span>],)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func.__defaults__</span><br><span class="line">([<span class="string">&#x27;some_string&#x27;</span>, <span class="string">&#x27;some_string&#x27;</span>],)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func([])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func.__defaults__</span><br><span class="line">([<span class="string">&#x27;some_string&#x27;</span>, <span class="string">&#x27;some_string&#x27;</span>],)</span><br></pre></td></tr></table></figure></li><li><p>避免可变参数导致的错误的常见做法是将 <code>None</code> 指定为参数的默认值, 然后检查是否有值传给对应的参数. 例:</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">some_func</span>(<span class="params">default_arg=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> default_arg:</span><br><span class="line">        default_arg = []</span><br><span class="line">    default_arg.append(<span class="string">&quot;some_string&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> default_arg</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Catching-the-Exceptions-捕获异常"><a href="#Catching-the-Exceptions-捕获异常" class="headerlink" title="&gt; Catching the Exceptions&#x2F;捕获异常"></a>&gt; Catching the Exceptions&#x2F;捕获异常</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">some_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 这里会抛出异常 ``IndexError``</span></span><br><span class="line">    <span class="built_in">print</span>(some_list[<span class="number">4</span>])</span><br><span class="line"><span class="keyword">except</span> IndexError, ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Caught!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 这里会抛出异常 ``ValueError``</span></span><br><span class="line">    some_list.remove(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError, ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Caught again!&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Output (Python 2.x):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Caught!</span><br><span class="line"></span><br><span class="line">ValueError: <span class="built_in">list</span>.remove(x): x <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure><p><strong>Output (Python 3.x):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">  File <span class="string">&quot;&lt;input&gt;&quot;</span>, line <span class="number">3</span></span><br><span class="line">    <span class="keyword">except</span> IndexError, ValueError:</span><br><span class="line">                     ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><h4 id="💡-说明-39"><a href="#💡-说明-39" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>如果你想要同时捕获多个不同类型的异常时, 你需要将它们用括号包成一个元组作为第一个参数传递. 第二个参数是可选名称, 如果你提供, 它将与被捕获的异常实例绑定. 例,</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">some_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   <span class="comment"># 这里会抛出异常 ``ValueError``</span></span><br><span class="line">   some_list.remove(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">except</span> (IndexError, ValueError), e:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;Caught again!&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p><strong>Output (Python 2.x):</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caught again!</span><br><span class="line">list.remove(x): x not in list</span><br></pre></td></tr></table></figure><p><strong>Output (Python 3.x):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">  File <span class="string">&quot;&lt;input&gt;&quot;</span>, line <span class="number">4</span></span><br><span class="line">    <span class="keyword">except</span> (IndexError, ValueError), e:</span><br><span class="line">                                     ^</span><br><span class="line">IndentationError: unindent does <span class="keyword">not</span> <span class="keyword">match</span> <span class="built_in">any</span> outer indentation level</span><br></pre></td></tr></table></figure></li><li><p>在 Python 3 中, 用逗号区分异常与可选名称是无效的; 正确的做法是使用 <code>as</code> 关键字. 例,</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">some_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    some_list.remove(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> (IndexError, ValueError) <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Caught again!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caught again!</span><br><span class="line">list.remove(x): x not in list</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Same-operands-different-story-同人不同命"><a href="#Same-operands-different-story-同人不同命" class="headerlink" title="&gt; Same operands, different story!&#x2F;同人不同命!"></a>&gt; Same operands, different story!&#x2F;同人不同命!</h3><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a</span><br><span class="line">a = a + [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = a</span><br><span class="line">a += [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h4 id="💡-说明-40"><a href="#💡-说明-40" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p><code>a += b</code> 并不总是与 <code>a = a + b</code> 表现相同. 类实现 <em><code>op=</code></em> 运算符的方式 <em>也许</em> 是不同的, 列表就是这样做的.</p></li><li><p>表达式 <code>a = a + [5,6,7,8]</code> 会生成一个新列表, 并让 <code>a</code> 引用这个新列表, 同时保持 <code>b</code> 不变.</p></li><li><p>表达式 <code>a += [5,6,7,8]</code> 实际上是使用的是 “extend” 函数, 所以 <code>a</code> 和 <code>b</code> 仍然指向已被修改的同一列表.</p></li></ul><hr><h3 id="Name-resolution-ignoring-class-scope-忽略类作用域的名称解析"><a href="#Name-resolution-ignoring-class-scope-忽略类作用域的名称解析" class="headerlink" title="&gt; Name resolution ignoring class scope&#x2F;忽略类作用域的名称解析"></a>&gt; Name resolution ignoring class scope&#x2F;忽略类作用域的名称解析</h3><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>:</span><br><span class="line">    x = <span class="number">17</span></span><br><span class="line">    y = (x <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(SomeClass.y)[<span class="number">0</span>]</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>:</span><br><span class="line">    x = <span class="number">17</span></span><br><span class="line">    y = [x <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure><p><strong>Output (Python 2.x):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>SomeClass.y[<span class="number">0</span>]</span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure><p><strong>Output (Python 3.x):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>SomeClass.y[<span class="number">0</span>]</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-41"><a href="#💡-说明-41" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>类定义中嵌套的作用域会忽略类内的名称绑定.</li><li>生成器表达式有它自己的作用域.</li><li>从 Python 3.X 开始, 列表推导式也有自己的作用域.</li></ul><hr><h3 id="Rounding-like-a-banker-像银行家一样舍入"><a href="#Rounding-like-a-banker-像银行家一样舍入" class="headerlink" title="&gt; Rounding like a banker&#x2F;像银行家一样舍入 *"></a>&gt; Rounding like a banker&#x2F;像银行家一样舍入 *</h3><p>让我们实现一个简单的函数来获取列表的中间元素：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_middle</span>(<span class="params">some_list</span>):</span><br><span class="line">    mid_index = <span class="built_in">round</span>(<span class="built_in">len</span>(some_list) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> some_list[mid_index - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>Python 3.x:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_middle([<span class="number">1</span>])  <span class="comment"># looks good</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_middle([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])  <span class="comment"># looks good</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_middle([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])  <span class="comment"># huh?</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) / <span class="number">2</span>  <span class="comment"># good</span></span><br><span class="line"><span class="number">2.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">round</span>(<span class="built_in">len</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) / <span class="number">2</span>)  <span class="comment"># why?</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>似乎 Python 将 2.5 舍入到 2。</p><h4 id="💡-说明-42"><a href="#💡-说明-42" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li><ul><li>这不是浮点精度错误，实际上，这种行为是故意的。从 Python 3.0 开始，<code>round()</code> 使用<a href="https://en.wikipedia.org/wiki/Rounding#Round_half_to_even">银行进位法</a>，其中 0.5 小数四舍五入到最接近的 <strong>偶数</strong> ：</li></ul></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">round</span>(<span class="number">0.5</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">round</span>(<span class="number">1.5</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">round</span>(<span class="number">2.5</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy  <span class="comment"># numpy的结果也是一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numpy.<span class="built_in">round</span>(<span class="number">0.5</span>)</span><br><span class="line"><span class="number">0.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numpy.<span class="built_in">round</span>(<span class="number">1.5</span>)</span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numpy.<span class="built_in">round</span>(<span class="number">2.5</span>)</span><br><span class="line"><span class="number">2.0</span></span><br></pre></td></tr></table></figure><ul><li>这是 <a href="https://en.wikipedia.org/wiki/IEEE_754#Rounding_rules">IEEE 754</a> 中描述的关于0.5分位舍入的推荐方法。然而，另一种方法（从零取整）大部分时间都是在学校教授的，所以银行进位法可能并不为人所知。此外，一些最流行的编程语言（例如：JavaScript、Java、C&#x2F;C++、Ruby、Rust）也不使用银行进位法。因此，这对 Python 来说还是比较特殊的，在四舍五入时可能会导致混淆。</li><li>了解更多信息，请参阅文档 <a href="https://docs.python.org/3/library/functions.html#round">round()</a> 或 [this stackoverflow thread](<a href="https://stackoverflow.com/questions/10825926/python">https://stackoverflow.com/questions/10825926/python</a> -3-x-rounding-behavior) </li><li>请注意，<code>get_middle([1])</code> 只返回1，因为它的索引是 <code>round(0.5) - 1 = 0 - 1 = -1</code>，返回列表中的最后一个元素。</li></ul><hr><h3 id="Needles-in-a-Haystack-大海捞针"><a href="#Needles-in-a-Haystack-大海捞针" class="headerlink" title="&gt; Needles in a Haystack&#x2F;大海捞针"></a>&gt; Needles in a Haystack&#x2F;大海捞针</h3><!-- Example ID: 52a199b1-989a-4b28-8910-dff562cebba9 ---><p>迄今为止，每一位Python开发者都会遇到类似以下的情况。</p><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x, y = (<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span> <span class="literal">True</span> <span class="keyword">else</span> <span class="literal">None</span>, <span class="literal">None</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x, y  # 期望的结果是 (0, 1)</span><br><span class="line">((0, 1), None)</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">t = (<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">t = (<span class="string">&#x27;one&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">t = ()</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">one</span><br><span class="line">two</span><br><span class="line">o</span><br><span class="line">n</span><br><span class="line">e</span><br><span class="line"><span class="built_in">tuple</span>()</span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ten_words_list = [</span><br><span class="line">    &quot;some&quot;,</span><br><span class="line">    &quot;very&quot;,</span><br><span class="line">    &quot;big&quot;,</span><br><span class="line">    &quot;list&quot;,</span><br><span class="line">    &quot;that&quot;</span><br><span class="line">    &quot;consists&quot;,</span><br><span class="line">    &quot;of&quot;,</span><br><span class="line">    &quot;exactly&quot;,</span><br><span class="line">    &quot;ten&quot;,</span><br><span class="line">    &quot;words&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(ten_words_list)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>4. 不够健壮的断言机制</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;python&quot;</span></span><br><span class="line">b = <span class="string">&quot;javascript&quot;</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 带有失败警告信息的assert表达式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span>(a == b, <span class="string">&quot;Both languages are different&quot;</span>)</span><br><span class="line"><span class="comment"># 未引发 AssertionError </span></span><br></pre></td></tr></table></figure><p>5.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">some_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">some_dict = &#123;</span><br><span class="line">  <span class="string">&quot;key_1&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;key_2&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&quot;key_3&quot;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">some_list = some_list.append(<span class="number">4</span>) </span><br><span class="line">some_dict = some_dict.update(&#123;<span class="string">&quot;key_4&quot;</span>: <span class="number">4</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(some_list)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(some_dict)</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><p>6.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">some_recursive_func</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">if</span> a[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    a[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">    some_recursive_func(a)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">similar_recursive_func</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    a -= <span class="number">1</span></span><br><span class="line">    similar_recursive_func(a)</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_recursive_func([<span class="number">5</span>, <span class="number">0</span>])</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>similar_recursive_func(<span class="number">5</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-43"><a href="#💡-说明-43" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>对于 1, 正确的语句是 <code>x, y = (0, 1) if True else (None, None)</code>.</p></li><li><p>对于 2, 正确的语句是 <code>t = (&#39;one&#39;,)</code> 或者 <code>t = &#39;one&#39;,</code> (缺少逗号) 否则解释器会认为 <code>t</code> 是一个字符串, 并逐个字符对其进行迭代.</p></li><li><p><code>()</code> 是一个特殊的标记，表示空元组.</p></li><li><p>对于 3，正如您可能已经弄清楚的那样，列表中的第5个元素（”that”）后面缺少一个逗号。因此，通过隐式字符串字面连接，</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ten_words_list</span><br><span class="line">[<span class="string">&#x27;some&#x27;</span>, <span class="string">&#x27;very&#x27;</span>, <span class="string">&#x27;big&#x27;</span>, <span class="string">&#x27;list&#x27;</span>, <span class="string">&#x27;thatconsists&#x27;</span>, <span class="string">&#x27;of&#x27;</span>, <span class="string">&#x27;exactly&#x27;</span>, <span class="string">&#x27;ten&#x27;</span>, <span class="string">&#x27;words&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>在第4个代码段中没有引发”AssertionError”，因为我们不是断言单个表达式 <code>a == b</code>，而是断言整个元组。以下代码段将说明问题，</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;javascript&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> a == b</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AssertionError</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> (a == b, <span class="string">&quot;Values are not equal&quot;</span>)</span><br><span class="line">&lt;stdin&gt;:<span class="number">1</span>: SyntaxWarning: assertion <span class="keyword">is</span> always true, perhaps remove parentheses?</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> a == b, <span class="string">&quot;Values are not equal&quot;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AssertionError: Values are <span class="keyword">not</span> equal</span><br></pre></td></tr></table></figure></li><li><p>至于第五个片段，大多数修改序列&#x2F;映射对象项的方法，如<code>list.append</code>、<code>dict.update</code>、<code>list.sort</code>等，都在原地修改对象并返回<code>None</code>。这背后的基本原理是通过原地操作，避免复制对象来提高性能(参考<a href="https://docs.python.org/3/faq/design.html#why-doesn-t-list-sort-return-the-sorted-list">这里</a>)。</p></li><li><p>最后一个应该相当明显，可变对象（如<code>list</code>）可以在函数中更改，不可变对象（<code>a -= 1</code>）的重新赋值则不属于值的改变。</p></li><li><p>了解这些细节可以在程序长期运行中，为您节省数小时的调试工作。</p></li></ul><hr><h3 id="Splitsies-分割函数"><a href="#Splitsies-分割函数" class="headerlink" title="&gt; Splitsies&#x2F;分割函数 *"></a>&gt; Splitsies&#x2F;分割函数 *</h3><!-- Example ID: ec3168ba-a81a-4482-afb0-691f1cc8d65a ---><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;a&#x27;</span>.split()</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># is same as</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;a&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># but</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">&#x27;&#x27;</span>.split())</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isn&#x27;t the same as</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">&#x27;&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-44"><a href="#💡-说明-44" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li><p>起初人们可能会认为 split 的默认分隔符是单个空格 <code>&#39; &#39;</code>，但根据 <a href="https://docs.python.org/3/library/stdtypes.html#str.split">文档</a>：</p><blockquote><p> 如果 sep 未指定或为 <code>None</code>，则应用不同的拆分算法：连续的空格被视为单个分隔符，如果字符串有前导或尾随空格，则结果将在开头或结尾不包含空字符串。因此，使用 <code>None</code> 分隔符拆分空字符串或仅包含空格的字符串将返回 <code>[]</code>。<br>如果给定 sep，连续的分隔符不会组合在一起，并被视为分隔空字符串（例如，<code>&#39;1,,2&#39;.split(&#39;,&#39;)</code> 返回 <code>[&#39;1&#39;, &#39;&#39;, &#39;2 &#39;]</code>）。使用指定的分隔符拆分空字符串会返回 <code>[&#39;&#39;]</code>。</p></blockquote></li><li><p>Noticing how the leading and trailing whitespaces are handled in the following snippet will make things clear,</p></li><li><p>注意以下代码段中如何处理前导和尾随空格，促进更深入的理解：</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27; a &#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27; a &#x27;</span>.split()</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Wild-imports-通配符导入方式"><a href="#Wild-imports-通配符导入方式" class="headerlink" title="&gt; Wild imports&#x2F;通配符导入方式 *"></a>&gt; Wild imports&#x2F;通配符导入方式 *</h3><!-- Example ID: 83deb561-bd55-4461-bb5e-77dd7f411e1c ---><!-- read-only --><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># File: module.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">some_weird_name_func_</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;works!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_another_weird_name_func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;works!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> module <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_weird_name_func_()</span><br><span class="line"><span class="string">&quot;works!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_another_weird_name_func()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;_another_weird_name_func&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h4 id="💡-说明-45"><a href="#💡-说明-45" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li><p>通常建议不要使用通配符导入。第一个明显的原因是，在通配符导入中，带有前导下划线的名称不会被导入。这可能会导致运行时出错。</p></li><li><p>如果我们使用 <code>from ... import a, b, c</code> 语法，上面的 <code>NameError</code> 就不会发生。</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> module <span class="keyword">import</span> some_weird_name_func_, _another_weird_name_func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_another_weird_name_func()</span><br><span class="line">works!</span><br></pre></td></tr></table></figure></li><li><p>如果你真的想使用通配符导入，那么你必须在你的模块中定义列表<code>__all__</code>，它包含一系列公共对象，当我们进行通配符导入时，列表中的这些对象将被导入。</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">__all__ = [<span class="string">&#x27;_another_weird_name_func&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">some_weird_name_func_</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;works!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_another_weird_name_func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;works!&quot;</span>)</span><br></pre></td></tr></table></figure><p>  <strong>Output</strong></p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>_another_weird_name_func()</span><br><span class="line"><span class="string">&quot;works!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_weird_name_func_()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;some_weird_name_func_&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="All-sorted-都排序了吗？"><a href="#All-sorted-都排序了吗？" class="headerlink" title="&gt; All sorted?&#x2F;都排序了吗？ *"></a>&gt; All sorted?&#x2F;都排序了吗？ *</h3><!-- Example ID: e5ff1eaf-8823-4738-b4ce-b73f7c9d5511 --><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(x) == x</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(x) == <span class="built_in">sorted</span>(x)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="built_in">reversed</span>(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(y) == <span class="built_in">sorted</span>(y)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-46"><a href="#💡-说明-46" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li><p><code>sorted</code> 方法一定返回列表类型, 比较列表与元组在Python中一定返回 <code>False</code>. </p></li><li><pre><code class="py">&gt;&gt;&gt; [] == tuple()False&gt;&gt;&gt; x = 7, 8, 9&gt;&gt;&gt; type(x), type(sorted(x))(tuple, list)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 与 `sorted` 不同，`reversed` 方法返回一个迭代器。为什么？因为排序需要就地修改迭代器或使用额外的容器（列表），而反向可以简单地通过从最后一个索引迭代到第一个索引来工作。</span><br><span class="line"></span><br><span class="line">- 所以在比较 `sorted(y) == sorted(y)` 时，第一次调用 `sorted()` 会消耗迭代器 `y`，下一次调用只会返回一个空列表。</span><br><span class="line"></span><br><span class="line">  ```py</span><br><span class="line">  &gt;&gt;&gt; x = 7, 8, 9</span><br><span class="line">  &gt;&gt;&gt; y = reversed(x)</span><br><span class="line">  &gt;&gt;&gt; sorted(y), sorted(y)</span><br><span class="line">  ([7, 8, 9], [])</span><br></pre></td></tr></table></figure></code></pre></li></ul><hr><h3 id="Midnight-time-doesn’t-exist-不存在的午夜"><a href="#Midnight-time-doesn’t-exist-不存在的午夜" class="headerlink" title="&gt; Midnight time doesn’t exist?&#x2F;不存在的午夜?"></a>&gt; Midnight time doesn’t exist?&#x2F;不存在的午夜?</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">midnight = datetime(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">midnight_time = midnight.time()</span><br><span class="line"></span><br><span class="line">noon = datetime(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">0</span>)</span><br><span class="line">noon_time = noon.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> midnight_time:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Time at midnight is&quot;</span>, midnight_time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> noon_time:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Time at noon is&quot;</span>, noon_time)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;Time at noon is&#x27;</span>, datetime.time(12, 0))</span><br></pre></td></tr></table></figure><p>midnight_time 并没有被输出.</p><h4 id="💡-说明-47"><a href="#💡-说明-47" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><p>在Python 3.5之前, 如果 <code>datetime.time</code> 对象存储的UTC的午夜时间(译: 就是 <code>00:00</code>), 那么它的布尔值会被认为是 <code>False</code>. 当使用 <code>if obj:</code> 语句来检查 <code>obj</code> 是否为 <code>null</code> 或者某些“空”值的时候, 很容易出错.</p><hr><h2 id="Section-The-Hidden-treasures-隐藏的宝藏"><a href="#Section-The-Hidden-treasures-隐藏的宝藏" class="headerlink" title="Section: The Hidden treasures!&#x2F;隐藏的宝藏!"></a>Section: The Hidden treasures!&#x2F;隐藏的宝藏!</h2><p>本节包含了一些像我这样的大多数初学者都不知道的关于Python的鲜为人知的有趣的事情（好吧，现在不是了）。</p><h3 id="Okay-Python-Can-you-make-me-fly-Python-可否带我飞"><a href="#Okay-Python-Can-you-make-me-fly-Python-可否带我飞" class="headerlink" title="&gt; Okay Python, Can you make me fly?&#x2F;Python, 可否带我飞? *"></a>&gt; Okay Python, Can you make me fly?&#x2F;Python, 可否带我飞? *</h3><p>好, 去吧.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> antigravity</span><br></pre></td></tr></table></figure><p><strong>Output:</strong><br>嘘.. 这是个超级秘密.</p><h4 id="💡-说明-48"><a href="#💡-说明-48" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><code>antigravity</code> 模块是 Python 开发人员发布的少数复活节彩蛋之一.</li><li><code>import antigravity</code> 会打开一个 Python 的<a href="http://xkcd.com/353/">经典 XKCD 漫画</a>页面.</li><li>不止如此. 这个<strong>复活节彩蛋里还有一个复活节彩蛋</strong>. 如果你看一下<a href="https://github.com/python/cpython/blob/master/Lib/antigravity.py#L7-L17">代码</a>, 就会发现还有一个函数实现了 <a href="https://xkcd.com/426/">XKCD’s geohashing 算法</a>.</li></ul><hr><h3 id="goto-but-why-goto-但为什么"><a href="#goto-but-why-goto-但为什么" class="headerlink" title="&gt; goto, but why?&#x2F;goto, 但为什么? *"></a>&gt; <code>goto</code>, but why?&#x2F;<code>goto</code>, 但为什么? *</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> goto <span class="keyword">import</span> goto, label</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m trapped, please rescue!&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> k == <span class="number">2</span>:</span><br><span class="line">                goto .breakout <span class="comment"># 从多重循环中跳出</span></span><br><span class="line">label .breakout</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Freedom!&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Output (Python 2.3):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">I<span class="string">&#x27;m trapped, please rescue!</span></span><br><span class="line"><span class="string">I&#x27;</span>m trapped, please rescue!</span><br><span class="line">Freedom!</span><br></pre></td></tr></table></figure><h4 id="💡-说明-49"><a href="#💡-说明-49" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>2004年4月1日, Python <a href="https://mail.python.org/pipermail/python-announce-list/2004-April/002982.html">宣布</a> 加入一个可用的 <code>goto</code> 作为愚人节礼物.</li><li>当前版本的 Python 并没有这个模块.</li><li>就算可以用, 也请不要使用它. 这里是为什么Python中没有 <code>goto</code> 的<a href="https://docs.python.org/3/faq/design.html#why-is-there-no-goto">原因</a>.</li></ul><hr><h3 id="Brace-yourself-做好思想准备"><a href="#Brace-yourself-做好思想准备" class="headerlink" title="&gt; Brace yourself!&#x2F;做好思想准备 *"></a>&gt; Brace yourself!&#x2F;做好思想准备 *</h3><p>如果你不喜欢在Python中使用空格来表示作用域, 你可以导入 C 风格的 {},</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> braces</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">  File <span class="string">&quot;some_file.py&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> __future__ <span class="keyword">import</span> braces</span><br><span class="line">SyntaxError: <span class="keyword">not</span> a chance</span><br></pre></td></tr></table></figure><p>想用大括号 <code>braces</code>? 没门! 觉得不爽, 请去用java。那么，另一个令人惊讶的事情，找一找在 <code>__future__</code> 模块中，哪里引发了 <code>SyntaxError</code> <a href="https://github.com/python/cpython/blob/master/Lib/__future__.py">code</a>?</p><h4 id="💡-说明-50"><a href="#💡-说明-50" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>通常 <code>__future__</code> 会提供 Python 未来版本的功能. 然而，这里的 “未来” 是一个讽刺.</li><li>这是一个表达社区对此类问题态度的复活节彩蛋.</li><li>代码实际上在[<code>future.c</code> 文件]中 (<a href="https://github.com/python/cpython/blob/025eb98dc0c1dc27404df6c544fc2944e0fa9f3a/Python/future.c#L49">https://github.com/python/cpython/blob/025eb98dc0c1dc27404df6c544fc2944e0fa9f3a/Python/future.c#L49</a>).</li><li>当 CPython 编译器遇到 <a href="https://docs.python.org/3.3/reference/simple_stmts.html#future-statements">future表达式</a> 时，它首先在 <code>future.c</code> 中运行相应的代码，然后再对其进行处理作为正常的<code>import</code>表达式。</li></ul><hr><h3 id="Let’s-meet-Friendly-Language-Uncle-For-Life-让生活更友好"><a href="#Let’s-meet-Friendly-Language-Uncle-For-Life-让生活更友好" class="headerlink" title="&gt; Let’s meet Friendly Language Uncle For Life&#x2F;让生活更友好 *"></a>&gt; Let’s meet Friendly Language Uncle For Life&#x2F;让生活更友好 *</h3><!-- Example ID: 6427fae6-e959-462d-85da-ce4c94ce41be ---><p><strong>Output (Python 3.x)</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> __future__ <span class="keyword">import</span> barry_as_FLUFL</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;Ruby&quot;</span> != <span class="string">&quot;Python&quot;</span> <span class="comment"># 这里没什么疑问</span></span><br><span class="line">  File <span class="string">&quot;some_file.py&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="string">&quot;Ruby&quot;</span> != <span class="string">&quot;Python&quot;</span></span><br><span class="line">              ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;Ruby&quot;</span> &lt;&gt; <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>这就对了.</p><h4 id="💡-说明-51"><a href="#💡-说明-51" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p>相关的 <a href="https://www.python.org/dev/peps/pep-0401/">PEP-401</a> 发布于 2009年4月1日 (所以你现在知道这意味着什么了吧).</p></li><li><p>引用 PEP-401</p><blockquote><p>意识到 Python 3.0 里的 !&#x3D; 运算符是一个会引起手指疼痛的恐怖错误, FLUFL 将 &lt;&gt; 运算符恢复为唯一写法.</p></blockquote></li><li><p>Uncle Barry 在 PEP 中还分享了其他东西; 你可以在<a href="https://www.python.org/dev/peps/pep-0401/">这里</a>获得他们.</p></li><li><p>(译: 虽然文档中没写，但应该是只能在交互解释器中使用.)</p></li><li><p>它在交互式环境中正常运行，但是当您通过 python 文件运行时它会引发 <code>SyntaxError</code>（请参阅此 <a href="https://github.com/satwikkansal/wtfpython/issues/94">问题</a>）。您可以将表达式作为<code>eval</code> 或 <code>compile</code> 参数中使用。</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> barry_as_FLUFL</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&#x27;&quot;Ruby&quot; &lt;&gt; &quot;Python&quot;&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Even-Python-understands-that-love-is-complicated-连Python也知道爱是难言的"><a href="#Even-Python-understands-that-love-is-complicated-连Python也知道爱是难言的" class="headerlink" title="&gt; Even Python understands that love is complicated&#x2F;连Python也知道爱是难言的 *"></a>&gt; Even Python understands that love is complicated&#x2F;连Python也知道爱是难言的 *</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><p>等等, <strong>this</strong> 是什么? <code>this</code> 是爱 :heart:</p><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful is better than ugly.</span><br><span class="line">优美胜于丑陋（Python 以编写优美的代码为目标）</span><br><span class="line">Explicit is better than implicit.</span><br><span class="line">明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</span><br><span class="line">Simple is better than complex.</span><br><span class="line">简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</span><br><span class="line">Complex is better than complicated.</span><br><span class="line">复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span><br><span class="line">Flat is better than nested.</span><br><span class="line">扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</span><br><span class="line">Sparse is better than dense.</span><br><span class="line">间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</span><br><span class="line">Readability counts.</span><br><span class="line">可读性很重要（优美的代码一定是可读的）</span><br><span class="line">Special cases aren&#x27;t special enough to break the rules.</span><br><span class="line">没有特例特殊到需要违背这些规则（这些规则至高无上）</span><br><span class="line">Although practicality beats purity.</span><br><span class="line">尽管我们更倾向于实用性</span><br><span class="line">Errors should never pass silently.</span><br><span class="line">不要安静的包容所有错误</span><br><span class="line">Unless explicitly silenced.</span><br><span class="line">除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）</span><br><span class="line">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="line">拒绝诱惑你去猜测的暧昧事物</span><br><span class="line">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="line">而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</span><br><span class="line">Although that way may not be obvious at first unless you&#x27;re Dutch.</span><br><span class="line">虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）</span><br><span class="line">Now is better than never.</span><br><span class="line">现在行动好过永远不行动</span><br><span class="line">Although never is often better than *right* now.</span><br><span class="line">尽管不行动要好过鲁莽行动</span><br><span class="line">If the implementation is hard to explain, it&#x27;s a bad idea.</span><br><span class="line">如果你无法向人描述你的方案，那肯定不是一个好方案；</span><br><span class="line">If the implementation is easy to explain, it may be a good idea.</span><br><span class="line">如果你能轻松向人描述你的方案，那也许会是一个好方案（方案测评标准）</span><br><span class="line">Namespaces are one honking great idea -- let&#x27;s do more of those!</span><br><span class="line">命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</span><br></pre></td></tr></table></figure><p>这是 Python 之禅!</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>love = this</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>this <span class="keyword">is</span> love</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>love <span class="keyword">is</span> <span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>love <span class="keyword">is</span> <span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>love <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>love <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span>; love <span class="keyword">is</span> love  <span class="comment"># 爱是难言的</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-52"><a href="#💡-说明-52" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><code>this</code> 模块是关于 Python 之禅的复活节彩蛋 (<a href="https://www.python.org/dev/peps/pep-0020">PEP 20</a>).</li><li>如果你认为这已经够有趣的了, 可以看看 <a href="https://hg.python.org/cpython/file/c3896275c0f6/Lib/this.py">this.py</a> 的实现. 有趣的是, Python 之禅的实现代码违反了他自己 (这可能是唯一会发生这种情况的地方).</li><li>至于 <code>love is not True or False; love is love</code>, 意外却又不言而喻.</li></ul><hr><h3 id="Yes-it-exists-是的-它存在"><a href="#Yes-it-exists-是的-它存在" class="headerlink" title="&gt; Yes, it exists!&#x2F;是的, 它存在!"></a>&gt; Yes, it exists!&#x2F;是的, 它存在!</h3><p><strong>循环的 <code>else</code>.</strong> 一个典型的例子:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">does_exists_num</span>(<span class="params">l, to_find</span>):</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">if</span> num == to_find:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Exists!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Does not exist&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>does_exists_num(some_list, <span class="number">4</span>)</span><br><span class="line">Exists!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>does_exists_num(some_list, -<span class="number">1</span>)</span><br><span class="line">Does <span class="keyword">not</span> exist</span><br></pre></td></tr></table></figure><p><strong>异常的 <code>else</code> .</strong> 例,</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Exception occurred!!!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Try block executed successfully...&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Try block executed successfully...</span><br></pre></td></tr></table></figure><h4 id="💡-说明-53"><a href="#💡-说明-53" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>循环后的 <code>else</code> 子句只会在循环没有触发 <code>break</code> 语句, 正常结束的情况下才会执行.</li><li>try 之后的 <code>else</code> 子句也被称为 “完成子句”, 因为在 <code>try</code> 语句中到达 <code>else</code> 子句意味着try块实际上已成功完成.</li></ul><hr><h3 id="Ellipsis-省略"><a href="#Ellipsis-省略" class="headerlink" title="&gt; Ellipsis&#x2F;省略 *"></a>&gt; Ellipsis&#x2F;省略 *</h3><!-- Example ID: 969b7100-ab3d-4a7d-ad7d-a6be16181b2b ---><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">some_func</span>():</span><br><span class="line">    <span class="literal">Ellipsis</span></span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_func()</span><br><span class="line"><span class="comment"># 没有输出，也没有报错</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SomeRandomString</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;SomeRandomString&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">Ellipsis</span></span><br><span class="line"><span class="literal">Ellipsis</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-54"><a href="#💡-说明-54" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li><p>在 Python 中，<code>Ellipsis</code> 是一个全局可用的内置对象，相当于<code>...</code>。</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>...</span><br><span class="line"><span class="literal">Ellipsis</span></span><br></pre></td></tr></table></figure></li><li><p>省略号可用于多种用途，</p><ul><li>作为尚未编写的代码的占位符（就像<code>pass</code>语句）</li><li>在切片语法中表示完整切片的其余维度</li></ul>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>three_dimensional_array = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">array([</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    [</span><br><span class="line">        [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">    ]</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>  所以我们的 <code>three_dimensional_array</code> 是一个数组的数组的数组。假设我们要打印所有最内层数组的第二个元素（索引 <code>1</code>），我们可以使用 Ellipsis 绕过所有前面的维度</p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>three_dimensional_array[:,:,<span class="number">1</span>]</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">   [<span class="number">5</span>, <span class="number">7</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>three_dimensional_array[..., <span class="number">1</span>] <span class="comment"># 使用Ellipsis.</span></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">   [<span class="number">5</span>, <span class="number">7</span>]])</span><br></pre></td></tr></table></figure><p>  注意：这适用于任意数量的维度。您甚至可以在第一个和最后一个维度中选择切片并以这种方式忽略中间的切片(<code>n_dimensional_array[firs_dim_slice, ..., last_dim_slice]</code>)</p><ul><li><p>在 <a href="https://docs.python.org/3/library/typing.html">类型提示</a>中仅表示类型的一部分（如 <code>(Callable[..., int]</code> 或 <code>Tuple[ str, ...]</code>))</p></li><li><p>您也可以使用省略号作为默认函数参数（在您想要区分“无参数”和“传递None值”场景的情况下）。</p></li></ul></li></ul><hr><h3 id="Inpinity-无限"><a href="#Inpinity-无限" class="headerlink" title="&gt; Inpinity&#x2F;无限 *"></a>&gt; Inpinity&#x2F;无限 *</h3><p>英文拼写是有意的, 请不要为此提交补丁.<br>(译: 这里是为了突出 Python 中无限的定义与<a href="https://en.wikipedia.org/wiki/Pi">Pi</a>有关, 所以将两个单词拼接了.)</p><p><strong>Output (Python 3.x):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>infinity = <span class="built_in">float</span>(<span class="string">&#x27;infinity&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(infinity)</span><br><span class="line"><span class="number">314159</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>))</span><br><span class="line">-<span class="number">314159</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-55"><a href="#💡-说明-55" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>infinity 的哈希值是 10⁵ x π.</li><li>有意思的是, <code>float(&#39;-inf&#39;)</code> 的哈希值在 Python 3 中是 “-10⁵ x π”  , 而在 Python 2 中是 “-10⁵ x e”.</li></ul><hr><h3 id="Let’s-mangle-修饰时间"><a href="#Let’s-mangle-修饰时间" class="headerlink" title="&gt; Let’s mangle&#x2F;修饰时间! *"></a>&gt; Let’s mangle&#x2F;修饰时间! *</h3><!-- Example ID: 37146d2d-9e67-43a9-8729-3c17934b910c ---><p>1.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Yo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.__honey = <span class="literal">True</span></span><br><span class="line">        <span class="variable language_">self</span>.bro = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Yo().bro</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Yo().__honey</span><br><span class="line">AttributeError: <span class="string">&#x27;Yo&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;__honey&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Yo()._Yo__honey</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Yo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 这次试试对称形式</span></span><br><span class="line">        <span class="variable language_">self</span>.__honey__ = <span class="literal">True</span></span><br><span class="line">        <span class="variable language_">self</span>.bro = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Yo().bro</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Yo()._Yo__honey__</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;Yo&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;_Yo__honey__&#x27;</span></span><br></pre></td></tr></table></figure><p>为什么 <code>Yo()._Yo__honey</code> 能运行? 只有印度人理解.(译: 这个梗可能是指印度音乐人<a href="https://en.wikipedia.org/wiki/Yo_Yo_Honey_Singh">Yo Yo Honey Singh</a>)</p><p>3.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">_A__variable = <span class="string">&quot;Some value&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">some_func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> __variable <span class="comment"># 没在任何地方初始化</span></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A().__variable</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;A&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;__variable&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A().some_func()</span><br><span class="line"><span class="string">&#x27;Some value&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-56"><a href="#💡-说明-56" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><a href="https://en.wikipedia.org/wiki/Name_mangling">命名修饰</a> 用于避免不同命名空间之间名称冲突.</li><li>在 Python 中, 解释器会通过给类中以 <code>__</code> (双下划线)开头且结尾最多只有一个下划线的类成员名称加上<code>_NameOfTheClass</code> 来修饰(mangles)名称.</li><li>所以, 要访问 <code>__honey</code> 对象,我们需要加上 <code>_Yo</code> 以防止与其他类中定义的相同名称的属性发生冲突.</li><li>但是为什么它在第二个片段中不起作用？ 因为命名修饰排除了以双下划线结尾的名称。</li><li>第三个片段也是命名修饰的结果。 <code>return __variable</code> 语句中的 <code>__variable</code> 名称被修改为 <code>_A__variable</code>，这也恰好是我们在外部作用域中声明的变量的名称。</li><li>此外，如果修饰后的变量名超过255个字符，则会进行截断。</li></ul><hr><h2 id="Section-Appearances-are-deceptive-外表是靠不住的"><a href="#Section-Appearances-are-deceptive-外表是靠不住的" class="headerlink" title="Section: Appearances are deceptive!&#x2F;外表是靠不住的!"></a>Section: Appearances are deceptive!&#x2F;外表是靠不住的!</h2><h3 id="Skipping-lines-跳过一行"><a href="#Skipping-lines-跳过一行" class="headerlink" title="&gt; Skipping lines?&#x2F;跳过一行?"></a>&gt; Skipping lines?&#x2F;跳过一行?</h3><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = <span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>valuе = <span class="number">32</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p>什么鬼?</p><p><strong>注意:</strong> 如果你想要重现的话最简单的方法是直接复制上面的代码片段到你的文件或命令行里.</p><h4 id="💡-说明-57"><a href="#💡-说明-57" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><p>一些非西方字符虽然看起来和英语字母相同, 但会被解释器识别为不同的字母.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;е&#x27;</span>) <span class="comment"># 西里尔语的 &#x27;e&#x27; (Ye)</span></span><br><span class="line"><span class="number">1077</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;e&#x27;</span>) <span class="comment"># 拉丁语的 &#x27;e&#x27;, 用于英文并使用标准键盘输入</span></span><br><span class="line"><span class="number">101</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;е&#x27;</span> == <span class="string">&#x27;e&#x27;</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = <span class="number">42</span> <span class="comment"># 拉丁语 e</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>valuе = <span class="number">23</span> <span class="comment"># 西里尔语 &#x27;e&#x27;, Python 2.x 的解释器在这会抛出 `SyntaxError` 异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value</span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><p>内置的 <code>ord()</code> 函数可以返回一个字符的 Unicode <a href="https://en.wikipedia.org/wiki/Code_point">代码点</a>, 这里西里尔语 ‘e’ 和拉丁语 ‘e’ 的代码点不同证实了上述例子.</p><hr><h3 id="Teleportation-空间移动"><a href="#Teleportation-空间移动" class="headerlink" title="&gt; Teleportation&#x2F;空间移动 *"></a>&gt; Teleportation&#x2F;空间移动 *</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">energy_send</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="comment"># 初始化一个 numpy 数组</span></span><br><span class="line">    np.array([<span class="built_in">float</span>(x)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">energy_receive</span>():</span><br><span class="line">    <span class="comment"># 返回一个空的 numpy 数组</span></span><br><span class="line">    <span class="keyword">return</span> np.empty((), dtype=np.<span class="built_in">float</span>).tolist()</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>energy_send(<span class="number">123.456</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>energy_receive()</span><br><span class="line"><span class="number">123.456</span></span><br></pre></td></tr></table></figure><p>谁来给我发个诺贝尔奖?</p><h4 id="💡-说明-58"><a href="#💡-说明-58" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>注意在 <code>energy_send</code> 函数中创建的 numpy 数组并没有返回, 因此内存空间被释放并可以被重新分配.</li><li><code>numpy.empty()</code> 直接返回下一段空闲内存，而不重新初始化. 而这个内存点恰好就是刚刚释放的那个(通常情况下, 并不绝对).</li></ul><hr><h3 id="Well-something-is-fishy…-嗯，有些可疑…"><a href="#Well-something-is-fishy…-嗯，有些可疑…" class="headerlink" title="&gt; Well, something is fishy…&#x2F;嗯，有些可疑…"></a>&gt; Well, something is fishy…&#x2F;嗯，有些可疑…</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    一个通过加法计算平方的简单函数.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sum_so_far = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> counter <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        sum_so_far = sum_so_far + x</span><br><span class="line">  <span class="keyword">return</span> sum_so_far</span><br></pre></td></tr></table></figure><p><strong>Output (Python 2.x):</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>square(<span class="number">10</span>)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>难道不应该是100吗?</p><p><strong>注意:</strong> 如果你无法重现, 可以尝试运行这个文件<a href="/mixed_tabs_and_spaces.py">mixed_tabs_and_spaces.py</a>.</p><h4 id="💡-说明-59"><a href="#💡-说明-59" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li><p><strong>不要混用制表符(tab)和空格(space)!</strong> 在上面的例子中, return 的前面是”1个制表符”, 而其他部分的代码前面是 “4个空格”.</p></li><li><p>Python是这么处理制表符的:</p><blockquote><p>首先, 制表符会从左到右依次被替换成8个空格, 直到被替换后的字符总数是八的倍数 &lt;…&gt;</p></blockquote></li><li><p>因此, <code>square</code> 函数最后一行的制表符会被替换成8个空格, 导致return语句进入循环语句里面.</p></li><li><p>Python 3 很友好, 在这种情况下会自动抛出错误.</p><p>  <strong>Output (Python 3.x):</strong></p>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">TabError: inconsistent use of tabs <span class="keyword">and</span> spaces <span class="keyword">in</span> indentation</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Section-Miscellaneous-杂项"><a href="#Section-Miscellaneous-杂项" class="headerlink" title="Section: Miscellaneous&#x2F;杂项"></a>Section: Miscellaneous&#x2F;杂项</h2><h3 id="is-faster-更快的"><a href="#is-faster-更快的" class="headerlink" title="&gt; += is faster&#x2F;更快的 +="></a>&gt; <code>+=</code> is faster&#x2F;更快的 <code>+=</code></h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用 &quot;+&quot; 连接三个字符串:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(<span class="string">&quot;s1 = s1 + s2 + s3&quot;</span>, setup=<span class="string">&quot;s1 = &#x27; &#x27; * 100000; s2 = &#x27; &#x27; * 100000; s3 = &#x27; &#x27; * 100000&quot;</span>, number=<span class="number">100</span>)</span><br><span class="line"><span class="number">0.25748300552368164</span></span><br><span class="line"><span class="comment"># 用 &quot;+=&quot; 连接三个字符串:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(<span class="string">&quot;s1 += s2 + s3&quot;</span>, setup=<span class="string">&quot;s1 = &#x27; &#x27; * 100000; s2 = &#x27; &#x27; * 100000; s3 = &#x27; &#x27; * 100000&quot;</span>, number=<span class="number">100</span>)</span><br><span class="line"><span class="number">0.012188911437988281</span></span><br></pre></td></tr></table></figure><h4 id="💡-说明-60"><a href="#💡-说明-60" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>连接两个以上的字符串时 <code>+=</code> 比 <code>+</code> 更快, 因为在计算过程中第一个字符串 (例如, <code>s1 += s2 + s3</code> 中的 <code>s1</code>) 不会被销毁.(译: 就是 <code>+=</code> 执行的是追加操作，少了一个销毁新建的动作.)</li></ul><hr><h3 id="Let’s-make-a-giant-string-来做个巨大的字符串吧！"><a href="#Let’s-make-a-giant-string-来做个巨大的字符串吧！" class="headerlink" title="&gt; Let’s make a giant string!&#x2F;来做个巨大的字符串吧！"></a>&gt; Let’s make a giant string!&#x2F;来做个巨大的字符串吧！</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_string_with_plus</span>(<span class="params">iters</span>):</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iters):</span><br><span class="line">        s += <span class="string">&quot;xyz&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(s) == <span class="number">3</span>*iters</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_bytes_with_plus</span>(<span class="params">iters</span>):</span><br><span class="line">    s = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iters):</span><br><span class="line">        s += <span class="string">b&quot;xyz&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(s) == <span class="number">3</span>*iters</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_string_with_format</span>(<span class="params">iters</span>):</span><br><span class="line">    fs = <span class="string">&quot;&#123;&#125;&quot;</span>*iters</span><br><span class="line">    s = fs.<span class="built_in">format</span>(*([<span class="string">&quot;xyz&quot;</span>]*iters))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(s) == <span class="number">3</span>*iters</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_string_with_join</span>(<span class="params">iters</span>):</span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iters):</span><br><span class="line">        l.append(<span class="string">&quot;xyz&quot;</span>)</span><br><span class="line">    s = <span class="string">&quot;&quot;</span>.join(l)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(s) == <span class="number">3</span>*iters</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_list_to_string</span>(<span class="params">l, iters</span>):</span><br><span class="line">    s = <span class="string">&quot;&quot;</span>.join(l)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(s) == <span class="number">3</span>*iters</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(add_string_with_plus(<span class="number">10000</span>))</span><br><span class="line"><span class="number">1000</span> loops, best of <span class="number">3</span>: <span class="number">972</span> µs per loop</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(add_bytes_with_plus(<span class="number">10000</span>))</span><br><span class="line"><span class="number">1000</span> loops, best of <span class="number">3</span>: <span class="number">815</span> µs per loop</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(add_string_with_format(<span class="number">10000</span>))</span><br><span class="line"><span class="number">1000</span> loops, best of <span class="number">3</span>: <span class="number">508</span> µs per loop</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(add_string_with_join(<span class="number">10000</span>))</span><br><span class="line"><span class="number">1000</span> loops, best of <span class="number">3</span>: <span class="number">878</span> µs per loop</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">&quot;xyz&quot;</span>]*<span class="number">10000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(convert_list_to_string(l, <span class="number">10000</span>))</span><br><span class="line"><span class="number">10000</span> loops, best of <span class="number">3</span>: <span class="number">80</span> µs per loop</span><br></pre></td></tr></table></figure><p>让我们将迭代次数增加10倍.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(add_string_with_plus(<span class="number">100000</span>)) <span class="comment"># 执行时间线性增加</span></span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">9.75</span> ms per loop</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(add_bytes_with_plus(<span class="number">100000</span>)) <span class="comment"># 二次增加</span></span><br><span class="line"><span class="number">1000</span> loops, best of <span class="number">3</span>: <span class="number">974</span> ms per loop</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(add_string_with_format(<span class="number">100000</span>)) <span class="comment"># 线性增加</span></span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">5.25</span> ms per loop</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(add_string_with_join(<span class="number">100000</span>)) <span class="comment"># 线性增加</span></span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">9.85</span> ms per loop</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">&quot;xyz&quot;</span>]*<span class="number">100000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(convert_list_to_string(l, <span class="number">100000</span>)) <span class="comment"># 线性增加</span></span><br><span class="line"><span class="number">1000</span> loops, best of <span class="number">3</span>: <span class="number">723</span> µs per loop</span><br></pre></td></tr></table></figure><h4 id="💡-说明-61"><a href="#💡-说明-61" class="headerlink" title="💡 说明:"></a>💡 说明:</h4><ul><li>你可以在这获得更多 <a href="https://docs.python.org/3/library/timeit.html">timeit</a> 的相关信息. 它通常用于衡量代码片段的执行时间.</li><li>不要用 <code>+</code> 去生成过长的字符串, 在 Python 中, <code>str</code> 是不可变的, 所以在每次连接中你都要把左右两个字符串复制到新的字符串中. 如果你连接四个长度为10的字符串, 你需要拷贝 (10+10) + ((10+10)+10) + (((10+10)+10)+10) &#x3D; 90 个字符而不是 40 个字符. 随着字符串的数量和大小的增加, 情况会变得越发的糟糕 (就像<code>add_bytes_with_plus</code> 函数的执行时间一样)</li><li>因此, 更建议使用 <code>.format.</code> 或 <code>%</code> 语法 (但是, 对于短字符串, 它们比 <code>+</code> 稍慢一点).</li><li>又或者, 如果你所需的内容已经以可迭代对象的形式提供了, 使用 <code>&#39;&#39;.join(可迭代对象)</code> 要快多了.</li><li><code>add_string_with_plus</code> 的执行时间没有像 <code>add_bytes_with_plus</code> 一样出现二次增加是因为解释器会如同上一个例子所讨论的一样优化 <code>+=</code>. 用 <code>s = s + &quot;x&quot; + &quot;y&quot; + &quot;z&quot;</code> 替代 <code>s += &quot;xyz&quot;</code> 的话, 执行时间就会二次增加了.<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_string_with_plus</span>(<span class="params">iters</span>):</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iters):</span><br><span class="line">        s = s + <span class="string">&quot;x&quot;</span> + <span class="string">&quot;y&quot;</span> + <span class="string">&quot;z&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(s) == <span class="number">3</span>*iters</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(add_string_with_plus(<span class="number">10000</span>))</span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">9.87</span> ms per loop</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(add_string_with_plus(<span class="number">100000</span>)) <span class="comment"># 执行时间二次增加</span></span><br><span class="line"><span class="number">1</span> loops, best of <span class="number">3</span>: <span class="number">1.09</span> s per loop</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Slowing-down-dict-lookups-让字典的查找慢下来"><a href="#Slowing-down-dict-lookups-让字典的查找慢下来" class="headerlink" title="&gt; Slowing down dict lookups&#x2F;让字典的查找慢下来 *"></a>&gt; Slowing down <code>dict</code> lookups&#x2F;让字典的查找慢下来 *</h3><!-- Example ID: c9c26ce6-df0c-47f7-af0b-966b9386d4c3 ---><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">some_dict = &#123;<span class="built_in">str</span>(i): <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1_000_000</span>)&#125;</span><br><span class="line">another_dict = &#123;<span class="built_in">str</span>(i): <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1_000_000</span>)&#125;</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>%timeit some_dict[<span class="string">&#x27;5&#x27;</span>]</span><br><span class="line"><span class="number">28.6</span> ns ± <span class="number">0.115</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000000</span> loops each)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_dict[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>%timeit some_dict[<span class="string">&#x27;5&#x27;</span>]</span><br><span class="line"><span class="number">37.2</span> ns ± <span class="number">0.265</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000000</span> loops each)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>%timeit another_dict[<span class="string">&#x27;5&#x27;</span>]</span><br><span class="line"><span class="number">28.5</span> ns ± <span class="number">0.142</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000000</span> loops each)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_dict[<span class="number">1</span>]  <span class="comment"># Trying to access a key that doesn&#x27;t exist</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>%timeit another_dict[<span class="string">&#x27;5&#x27;</span>]</span><br><span class="line"><span class="number">38.5</span> ns ± <span class="number">0.0913</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000000</span> loops each)</span><br></pre></td></tr></table></figure><p>为什么相同的查找会变得越来越慢？</p><h4 id="💡-说明-62"><a href="#💡-说明-62" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li>CPython 有一个通用的字典查找函数，可以处理所有类型的键（<code>str</code>、<code>int</code>、任何对象…），以及一个专门用于处理仅由 <code>str</code> 键组成的字典的常见情况。</li><li>专用函数（在 CPython 的 <a href="https://github.com/python/cpython/blob/522691c46e2ae51faaad5bbbce7d959dd61770df/Objects/dictobject.c#L841">源</a> 中名为 <code>lookdict_unicode</code>）知道所有现有的键（包括查找的 key) 是字符串，并使用更快和更简单的字符串比较来比较键，而不是调用 <code>__eq__</code> 方法。</li><li>第一次使用非 <code>str</code> 键访问 <code>dict</code> 实例时，会对其进行修改，以便将来的查找使用通用函数。</li><li>这个过程对于特定的 <code>dict</code> 实例是不可逆的，并且键甚至不必存在于字典中。 这就是为什么对不存在的键进行查找具有相同副作用的原因。</li></ul><hr><h3 id="Bloating-instance-dicts-变臃肿的dict实例们"><a href="#Bloating-instance-dicts-变臃肿的dict实例们" class="headerlink" title="&gt; Bloating instance dicts&#x2F;变臃肿的dict实例们 *"></a>&gt; Bloating instance <code>dict</code>s&#x2F;变臃肿的<code>dict</code>实例们 *</h3><!-- Example ID: fe706ab4-1615-c0ba-a078-76c98cbe3f48 ---><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.some_attr1 = <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.some_attr2 = <span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.some_attr3 = <span class="number">3</span></span><br><span class="line">        <span class="variable language_">self</span>.some_attr4 = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dict_size</span>(<span class="params">o</span>):</span><br><span class="line">    <span class="keyword">return</span> sys.getsizeof(o.__dict__)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Output:</strong> (Python 3.8, 其他 Python 3 的版本也许稍有不同)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1 = SomeClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o2 = SomeClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_size(o1)</span><br><span class="line"><span class="number">104</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_size(o2)</span><br><span class="line"><span class="number">104</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> o1.some_attr1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o3 = SomeClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_size(o3)</span><br><span class="line"><span class="number">232</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_size(o1)</span><br><span class="line"><span class="number">232</span></span><br></pre></td></tr></table></figure><p>让我们在一个新的解释器中再试一次：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1 = SomeClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o2 = SomeClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_size(o1)</span><br><span class="line"><span class="number">104</span>  <span class="comment"># 意料之中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.some_attr5 = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.some_attr6 = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_size(o1)</span><br><span class="line"><span class="number">360</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_size(o2)</span><br><span class="line"><span class="number">272</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o3 = SomeClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_size(o3)</span><br><span class="line"><span class="number">232</span></span><br></pre></td></tr></table></figure><p>是什么让那些字典变得臃肿？ 为什么新创建的对象也会变臃肿？</p><h4 id="💡-说明-63"><a href="#💡-说明-63" class="headerlink" title="💡 说明"></a>💡 说明</h4><ul><li>CPython 能够在多个字典中重用相同的“键”对象。 这添加在 <a href="https://www.python.org/dev/peps/pep-0412/">PEP 412</a> 中，目的是减少内存使用，特别是在实例字典中 —— 键（实例属性）几乎在所有实例都通用。</li><li>这种优化对于实例字典来说是十分自然的，但如果某些假设被打破，它就会被禁用。</li><li>密钥共享字典不支持删除；如果删除了实例属性，则字典是“未共享的”，并且同一类的所有未来实例都禁用密钥共享。</li><li>另外，如果字典键已被调整大小（因为插入了新键），它们保持共享<em>仅当</em>它们被一个完全单一的字典使用时（这允许在第一个创建的实例的 <code>__init__</code> 中添加许多属性，而不会导致“取消共享”）。如果发生调整大小时存在多个实例，则为同一类的所有未来实例禁用密钥共享：CPython 无法判断您的实例是否正在使用相同的属性集，并决定放弃尝试共享它们的键值。</li><li>一个小提示，如果你的目标是降低程序的内存占用：不要删除实例属性，并确保在 <code>__init__</code> 中初始化所有的属性！</li></ul><hr><h3 id="Minor-Ones-小知识点"><a href="#Minor-Ones-小知识点" class="headerlink" title="&gt; Minor Ones&#x2F;小知识点"></a>&gt; Minor Ones&#x2F;小知识点</h3><ul><li><p><code>join()</code> 是一个字符串操作而不是列表操作. (第一次接触会觉得有点违反直觉)</p><p><strong>💡 说明:</strong><br>如果 <code>join()</code> 是字符串方法 那么它就可以处理任何可迭代的对象(列表，元组，迭代器). 如果它是列表方法, 则必须在每种类型中单独实现. 另外, 在 <code>list</code> 对象的通用API中实现一个专用于字符串的方法没有太大的意义.</p></li><li><p>看着奇怪但能正确运行的语句:</p><ul><li><code>[] = ()</code> 语句在语义上是正确的 (解包一个空的 <code>tuple</code> 并赋值给 <code>list</code>)</li><li><code>&#39;a&#39;[0][0][0][0][0]</code> 在语义上也是正确的, 因为 Python 不像C语言及其派生语言那样，具有字符数据类型。因此，从字符串中选择单个字符将返回单个字符串。</li><li><code>3 --0-- 5 == 8</code> 和 <code>--5 == 5</code> 在语义上都是正确的, 且结果等于 <code>True</code>.(译: 3减负0等于3，再减负5相当于加5等于8；负的负5等于5.)</li></ul></li><li><p>鉴于 <code>a</code> 是一个数字, <code>++a</code> 和 <code>--a</code> 都是有效的 Python 语句, 但其效果与 C, C++ 或 Java 等不一样.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>++a</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>--a</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>💡 说明:</strong></p><ul><li>python 里没有 <code>++</code> 操作符. 这其实是两个 <code>+</code> 操作符.</li><li><code>++a</code> 被解析为 <code>+(+a)</code> 最后等于 <code>a</code>. <code>--a</code> 同理.</li><li>这个 StackOverflow <a href="https://stackoverflow.com/questions/3654830/why-are-there-no-and-operators-in-python">回答</a> 讨论了为什么 Python 中缺少增量和减量运算符.</li></ul></li><li><p>Python 使用 2个字节存储函数中的本地变量. 理论上, 这意味着函数中只能定义65536个变量. 但是，Python 内置了一个方便的解决方案，可用于存储超过2^16个变量名. 下面的代码演示了当定义了超过65536个局部变量时堆栈中发生的情况 (警告: 这段代码会打印大约2^18行文本, 请做好准备!):</p>   <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def f():</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> + <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.join([<span class="string">&quot;X&quot;</span>+<span class="built_in">str</span>(x)+<span class="string">&quot;=&quot;</span> + <span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65539</span>)]))</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dis.dis(f))</span><br></pre></td></tr></table></figure></li><li><p>你的 <em>Python 代码</em> 并不会多线程同时运行 (是的, 你没听错!). 虽然你觉得会产生多个线程并让它们同时执行你的代码, 但是, 由于 <a href="https://wiki.python.org/moin/GlobalInterpreterLock">全局解释锁</a>的存在, 你所做的只是让你的线程依次在同一个核心上执行. Python 多线程适用于IO密集型的任务, 但如果想要并行处理CPU密集型的任务, 你应该会想使用 <a href="https://docs.python.org/2/library/multiprocessing.html">multiprocessing</a> 模块.</p></li><li><p>列表切片超出索引边界而不引发任何错误</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>some_list[<span class="number">111</span>:]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li><li><p><code>int(&#39;١٢٣٤٥٦٧٨٩&#39;)</code> 在 Python 3 中会返回 <code>123456789</code>. 在 Python 中, 十进制字符包括数字字符, 以及可用于形成十进制数字的所有字符, 例如: U+0660, ARABIC-INDIC DIGIT ZERO. 这有一个关于此的 <a href="http://chris.improbable.org/2014/8/25/adventures-in-unicode-digits/">有趣故事</a>.</p></li><li><p><code>&#39;abc&#39;.count(&#39;&#39;) == 4</code>. 这有一个 <code>count</code> 方法的相近实现, 能更好的说明问题</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">s, sub</span>):</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s) + <span class="number">1</span> - <span class="built_in">len</span>(sub)):</span><br><span class="line">        result += (s[i:i + <span class="built_in">len</span>(sub)] == sub)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>这个行为是由于空子串(<code>&#39;&#39;</code>)与原始字符串中长度为0的切片相匹配导致的.</p></li></ul><hr><h1 id="Contributing-贡献"><a href="#Contributing-贡献" class="headerlink" title="Contributing&#x2F;贡献"></a>Contributing&#x2F;贡献</h1><p>欢迎各种补丁! 详情请看<a href="https://github.com/satwikkansal/wtfpython/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a>.(译: 这是给原库提贡献的要求模版)</p><p>你可以通过新建 <a href="https://github.com/satwikkansal/wtfpython/issues/new">issue</a> 或者在上 <a href="https://gitter.im/wtfpython/Lobby">Gitter</a> 与我们进行讨论.</p><p>(译: 如果你想对这个翻译项目提供帮助, 请看<a href="https://github.com/leisurelicht/wtfpython-cn/blob/master/CONTRIBUTING.md">这里</a>)</p><h1 id="Acknowledgements-致谢"><a href="#Acknowledgements-致谢" class="headerlink" title="Acknowledgements&#x2F;致谢"></a>Acknowledgements&#x2F;致谢</h1><p>这个系列最初的想法和设计灵感来自于 Denys Dovhan 的项目 <a href="https://github.com/denysdovhan/wtfjs">wtfjs</a>. 社区的强大支持让它成长为现在的模样.</p><h4 id="Some-nice-Links-一些不错的资源"><a href="#Some-nice-Links-一些不错的资源" class="headerlink" title="Some nice Links!&#x2F;一些不错的资源"></a>Some nice Links!&#x2F;一些不错的资源</h4><ul><li><a href="https://www.youtube.com/watch?v=sH4XF6pKKmk">https://www.youtube.com/watch?v=sH4XF6pKKmk</a></li><li><a href="https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python">https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python</a></li><li><a href="https://sopython.com/wiki/Common_Gotchas_In_Python">https://sopython.com/wiki/Common_Gotchas_In_Python</a></li><li><a href="https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines">https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines</a></li><li><a href="https://stackoverflow.com/questions/1011431/common-pitfalls-in-python">https://stackoverflow.com/questions/1011431/common-pitfalls-in-python</a></li><li><a href="https://www.python.org/doc/humor/">https://www.python.org/doc/humor/</a></li><li><a href="https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65">https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65</a></li></ul><h1 id="🎓-License-许可"><a href="#🎓-License-许可" class="headerlink" title="🎓 License&#x2F;许可"></a>🎓 License&#x2F;许可</h1><p><a href="http://www.wtfpl.net/"><img src="https://img.shields.io/badge/License-WTFPL%202.0-lightgrey.svg?style=flat-square" alt="CC 4.0"></a></p><p>&copy; <a href="https://satwikkansal.xyz/">Satwik Kansal</a></p><h2 id="Help-帮助"><a href="#Help-帮助" class="headerlink" title="Help&#x2F;帮助"></a>Help&#x2F;帮助</h2><p>如果您有任何想法或建议，欢迎分享.</p><h2 id="Surprise-your-geeky-pythonist-friends-想给你的极客朋友一个惊喜"><a href="#Surprise-your-geeky-pythonist-friends-想给你的极客朋友一个惊喜" class="headerlink" title="Surprise your geeky pythonist friends?&#x2F;想给你的极客朋友一个惊喜?"></a>Surprise your geeky pythonist friends?&#x2F;想给你的极客朋友一个惊喜?</h2><p>您可以使用这些快链向 Twitter 和 Linkedin 上的朋友推荐 wtfpython,</p><p><a href="https://twitter.com/intent/tweet?url=https://github.com/satwikkansal/wtfpython&hastags=python,wtfpython">Twitter</a><br> | <a href="https://www.linkedin.com/shareArticle?url=https://github.com/satwikkansal&title=What%20the%20f*ck%20Python!&summary=An%20interesting%20collection%20of%20subtle%20and%20tricky%20Python%20snippets.">Linkedin</a></p><h2 id="Need-a-pdf-version-需要来一份pdf版的"><a href="#Need-a-pdf-version-需要来一份pdf版的" class="headerlink" title="Need a pdf version?&#x2F;需要来一份pdf版的?"></a>Need a pdf version?&#x2F;需要来一份pdf版的?</h2><p>你可以快速在<a href="https://form.jotform.com/221593245656057">这</a>获得英文作者制作的版本.</p><h2 id="Follow-Commit-追踪Commit"><a href="#Follow-Commit-追踪Commit" class="headerlink" title="Follow Commit&#x2F;追踪Commit"></a>Follow Commit&#x2F;追踪Commit</h2><p>这是中文版 fork 时所处的原库 Commit, 当原库更新时我会跟随更新.</p><p><a href="https://github.com/satwikkansal/wtfpython/commit/19d4b075152d93e5bc75c5d08279338a895cfa27"><img src="https://img.shields.io/badge/Commit-19d4b0-yellow.svg" alt="Commit id"></a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> pyhton </tag>
            
            <tag> 特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地方谐音梗</title>
      <link href="/2024/06/13/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E5%87%BA%E5%8E%BB%E7%8E%A9%E8%B0%90%E9%9F%B3%E6%A2%97/"/>
      <url>/2024/06/13/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E5%87%BA%E5%8E%BB%E7%8E%A9%E8%B0%90%E9%9F%B3%E6%A2%97/</url>
      
        <content type="html"><![CDATA[<h1 id="谐音梗"><a href="#谐音梗" class="headerlink" title="谐音梗"></a>谐音梗</h1><p>上海：没有买卖就没有上海<br>深圳：深圳不怕影子斜<br>成都：成不成都不所谓啦，尽力就好<br>厦门：姐妹，请帮我开厦门<br>武汉：吃过热干面，此生武汉了<br>兰州：陌生的人，请给我一支兰州<br>南昌：我一路走南昌北<br>嘉兴：祝你升职嘉兴<br>惠州：谁惠州末出去玩呀<br>福州：哎呀你身在福州不知福<br>杭州：三百六十行，杭杭出状元<br>四川：有喜欢的可以四川一下<br>荆州：荆州有酒今朝醉<br>拉萨：吃喝拉萨<br>揭阳：你这人怎么揭阳子<br>钦州：钦州已过万重山<br>宁波：宁波打的电话已关机<br>江西：江西比心，静候佳音<br>天津：到点下班天津地义<br>郑州：抓紧挣钱是才是郑州之重<br>海口：海口以(还可以)<br>开封：开封后请尽快食用<br>南京：在山的那边海的那边有一群南京灵<br>铜陵：眼睛瞪得像铜陵<br>苏州：苏州自有黄金屋，苏州自有颜如玉<br>淄博：欢迎来到我的淄博间<br>无锡：君无锡言<br>金华：浓缩就是金华<br>吉林：解铃还需吉林人<br>柳州：轻飘飘的旧时光就这么柳州<br>曲靖：四季如春，闹中曲靖<br>酒泉：我醉了，因为酒泉被我喝了<br>台湾：台湾啦，我要睡觉啦<br>延吉：人生如戏，全靠延吉<br>杭州：三百六十杭 州末加班忙<br>绍兴：出来玩就别绍兴啦<br>丽江：来，我跟丽江个事儿<br>贵州：请保管好您的贵州物品<br>桂林：那么桂林还买啊？<br>新疆：没听清楚，你重新疆一遍<br>汕头：你一句真上头 我就到了真汕头<br>日照：日照香炉生紫烟<br>海口：夸下海口<br>吉林：解铃还需吉林人</p>]]></content>
      
      
      <categories>
          
          <category> 想法 </category>
          
          <category> 素材 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 勇敢的人先享受世界 </tag>
            
            <tag> 勇敢 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>福建厦门的好玩好吃好逛</title>
      <link href="/2024/06/13/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E7%A6%8F%E5%BB%BA%E5%8E%A6%E9%97%A8/"/>
      <url>/2024/06/13/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E7%A6%8F%E5%BB%BA%E5%8E%A6%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="好玩"><a href="#好玩" class="headerlink" title="好玩"></a>好玩</h1><ul><li>鼓浪屿</li><li>厦门园林植物园</li><li>钟鼓索道</li><li>厦门大学</li><li>厦门科技馆</li><li>日光岩</li><li>罗宾森广场</li></ul><h1 id="好吃"><a href="#好吃" class="headerlink" title="好吃"></a>好吃</h1><ul><li>闽南菜</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>躺平计划</title>
      <link href="/2024/06/07/%E8%BA%BA%E5%B9%B3%E8%AE%A1%E5%88%92/%E8%BA%BA%E5%B9%B3%E8%AE%A1%E5%88%92/"/>
      <url>/2024/06/07/%E8%BA%BA%E5%B9%B3%E8%AE%A1%E5%88%92/%E8%BA%BA%E5%B9%B3%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h1><h1 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h1><h1 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 躺平 </tag>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>种子搜索地址</title>
      <link href="/2024/06/06/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/bt%E9%93%BE%E6%8E%A5/"/>
      <url>/2024/06/06/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/bt%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://anybt.eth.link/#/">https://anybt.eth.link/#/</a></p><p><a href="https://cilisousuo.com/">https://cilisousuo.com/</a></p><p><a href="https://ciliku.net/">https://ciliku.net/</a></p><p><a href="https://tt2.ttcl.cc/">https://tt2.ttcl.cc/</a></p><p><a href="https://clxf.me/">https://clxf.me/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xiaojiejei</title>
      <link href="/2024/06/06/%E7%88%AC%E8%99%AB/xiaojiejei/"/>
      <url>/2024/06/06/%E7%88%AC%E8%99%AB/xiaojiejei/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求地址转义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_quote</span>(<span class="params">url</span>):</span><br><span class="line">    _ = url.replace(<span class="string">&quot;https://xiaojiejie.me&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    __ = quote(_)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;https://xiaojiejie.me&quot;</span> + __</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表中的所有元素转化为字符串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_to_str</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则表达式替换掉标点符号</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_punctuation</span>(<span class="params">text</span>):</span><br><span class="line">    result = re.sub(<span class="string">r&#x27;[^\u4e00-\u9fa5]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, text)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Apifox/1.0.0 (https://apifox.com)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载单张图片(单组图)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_single_img</span>(<span class="params">url,classify=<span class="literal">None</span>,name=<span class="literal">None</span>,index=<span class="literal">None</span></span>):</span><br><span class="line">    response = requests.get(url,headers=headers)</span><br><span class="line">    root = etree.HTML(response.text)</span><br><span class="line">    <span class="comment"># with open(&quot;two.html&quot;, &quot;w&quot;,encoding=&#x27;utf-8&#x27;) as f:</span></span><br><span class="line">    <span class="comment">#     f.write(response.text)</span></span><br><span class="line">    <span class="comment"># 保存目录</span></span><br><span class="line">    local_img = root.xpath(<span class="string">&#x27;//div[@id=&quot;image_div&quot;]//img/@src&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(local_img)</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> local_img:</span><br><span class="line">        <span class="built_in">print</span>(img)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;webp&quot;</span> <span class="keyword">in</span> img <span class="keyword">and</span> <span class="string">&quot;logo&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> img:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ok:&quot;</span>,img)</span><br><span class="line">            _save = os.path.join(save_dir,classify,name)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(_save):</span><br><span class="line">                os.makedirs(_save)</span><br><span class="line">            res = requests.get(url_quote(img))</span><br><span class="line">            <span class="built_in">print</span>(res.status_code,<span class="string">&quot;write&quot;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(_save,<span class="built_in">str</span>(index)+<span class="string">&quot;.jpg&quot;</span>), <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(res.content)</span><br><span class="line">                </span><br><span class="line"><span class="comment"># 获取单页的内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_single_page_content</span>(<span class="params">url,classify=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    r = requests.get(url,headers=headers)</span><br><span class="line">    root = etree.HTML(r.text)</span><br><span class="line">    item_info = root.xpath(<span class="string">&#x27;//ul[@id=&quot;index_ajax_list&quot;]/li&#x27;</span>) <span class="comment"># li</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> item_info:</span><br><span class="line">        source_url = list_to_str(item.xpath(<span class="string">&#x27;a/@href&#x27;</span>))</span><br><span class="line">        page_number = list_to_str(item.xpath(<span class="string">&#x27;a/div/span/text()&#x27;</span>))</span><br><span class="line">        _name = remove_punctuation(list_to_str(item.xpath(<span class="string">&#x27;div/a/text()&#x27;</span>)))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            download_single_img(url,classify=classify,name=_name,index=<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error:&quot;</span>,source_url)</span><br><span class="line">        <span class="keyword">for</span> _index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">int</span>(page_number)+<span class="number">1</span>):</span><br><span class="line">            _url = source_url + <span class="built_in">str</span>(_index) + <span class="string">&quot;/&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(_url,classify)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                download_single_img(_url,classify=classify,name=_name,index=_index)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;error:&quot;</span>,_url)</span><br><span class="line"></span><br><span class="line">u = [</span><br><span class="line">    &#123;<span class="string">&quot;https://xiaojiejie.me/coser/ucoser&quot;</span>:<span class="number">83</span>&#125;,   <span class="comment"># 83</span></span><br><span class="line">    &#123;<span class="string">&quot;https://xiaojiejie.me/life/yygirls&quot;</span>:<span class="number">235</span>&#125;,   <span class="comment"># 235</span></span><br><span class="line">    &#123;<span class="string">&quot;https://xiaojiejie.me/aigirls&quot;</span>:<span class="number">1</span>&#125;    <span class="comment"># 1</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">save_dir = <span class="string">&quot;/root/info/xiao/img&quot;</span></span><br><span class="line"><span class="keyword">for</span> sub <span class="keyword">in</span> u:</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> sub.items():</span><br><span class="line">        <span class="built_in">print</span>(k,v)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,v+<span class="number">1</span>):</span><br><span class="line">            _ = k + <span class="string">&quot;/page/&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;/&quot;</span></span><br><span class="line">            get_single_page_content(_,classify=k.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>youku</title>
      <link href="/2024/06/06/%E7%88%AC%E8%99%AB/%E4%BC%98%E9%85%B7%E8%A7%86%E9%A2%91/"/>
      <url>/2024/06/06/%E7%88%AC%E8%99%AB/%E4%BC%98%E9%85%B7%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="youku"><a href="#youku" class="headerlink" title="youku"></a>youku</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># youku_downloader.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YoukuVideoDownloader</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_id_from_url</span>(<span class="params">self, url</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从优酷URL中提取视频ID&quot;&quot;&quot;</span></span><br><span class="line">        pattern = <span class="string">r&#x27;id_([^\.]+)\.html&#x27;</span></span><br><span class="line">        <span class="keyword">match</span> = re.search(pattern, url)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_videos</span>(<span class="params">self, video_files, output_filename</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;合并视频文件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 将视频文件路径写入到一个文本文件中</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;input_files.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> video_files:</span><br><span class="line">                f.write(<span class="string">&quot;file &#x27;&#123;&#125;&#x27;\n&quot;</span>.<span class="built_in">format</span>(file))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(output_filename)</span><br><span class="line">        <span class="comment"># 构建 ffmpeg 命令</span></span><br><span class="line">        ffmpeg_command = [</span><br><span class="line">            <span class="string">&#x27;ffmpeg.exe&#x27;</span>,  <span class="comment"># ffmpeg 可执行文件的路径（假设在当前目录下）</span></span><br><span class="line">            <span class="string">&#x27;-y&#x27;</span>,  <span class="comment"># 覆盖输出文件而不询问</span></span><br><span class="line">            <span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;concat&#x27;</span>,  <span class="comment"># 指定输入文件格式为 concat（连接多个文件）</span></span><br><span class="line">            <span class="string">&#x27;-safe&#x27;</span>, <span class="string">&#x27;0&#x27;</span>,  <span class="comment"># 禁用安全模式，允许使用任意文件名</span></span><br><span class="line">            <span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;input_files.txt&#x27;</span>,  <span class="comment"># 指定包含输入文件列表的文件（每行一个文件名）</span></span><br><span class="line">            <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>,  <span class="comment"># 使用 copy 编解码器，快速拷贝视频和音频流而不重新编码</span></span><br><span class="line">            output_filename  <span class="comment"># 输出文件名</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 执行ffmpeg命令</span></span><br><span class="line">        result = subprocess.run(ffmpeg_command, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除临时文本文件</span></span><br><span class="line">        os.remove(<span class="string">&#x27;input_files.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除原始视频文件</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> video_files:</span><br><span class="line">            os.remove(file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download_and_merge</span>(<span class="params">self, url, title</span>):</span><br><span class="line">        <span class="comment"># 获取视频 ID</span></span><br><span class="line">        video_id = <span class="variable language_">self</span>.extract_id_from_url(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> video_id:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;无法获取视频ID，请检查URL是否正确&quot;</span>)</span><br><span class="line">            <span class="comment"># progress_callback(&quot;无法获取视频ID，请检查URL是否正确&quot;, &quot;error&quot;)</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建下载目录</span></span><br><span class="line">        download_dir = <span class="string">&quot;download&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download_dir):</span><br><span class="line">            os.makedirs(download_dir)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 自定义浏览器位置</span></span><br><span class="line">        firefox_executable_path = <span class="string">&quot;firefox-1440&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建 Playwright 的浏览器实例</span></span><br><span class="line">        <span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">            <span class="comment"># 设置浏览器启动参数</span></span><br><span class="line">            browser = p.firefox.launch(headless=<span class="literal">True</span>)  <span class="comment"># 设置 headless 参数为 True，无头模式</span></span><br><span class="line">            page = browser.new_page()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 打开网页</span></span><br><span class="line">            page.goto(<span class="string">&#x27;https://player.youku.com/embed/&#x27;</span> + video_id)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 等待一段时间，以确保动态内容加载完成</span></span><br><span class="line">            page.wait_for_timeout(<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取页面的 HTML 内容</span></span><br><span class="line">            html_content = page.content().encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用 BeautifulSoup 解析 HTML</span></span><br><span class="line">            soup = BeautifulSoup(html_content, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 从页面源码中提取mp4链接</span></span><br><span class="line">            video_divs = soup.find_all(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> video_divs:</span><br><span class="line">                video_files = []</span><br><span class="line">                <span class="comment"># 遍历视频标签</span></span><br><span class="line">                <span class="keyword">for</span> index, video_div <span class="keyword">in</span> <span class="built_in">enumerate</span>(video_divs):</span><br><span class="line">                    mp4_url = video_div.get(<span class="string">&#x27;src&#x27;</span>) <span class="keyword">or</span> video_div.get(<span class="string">&#x27;data-orginal-src&#x27;</span>)  <span class="comment"># 获取视频链接</span></span><br><span class="line">                    <span class="keyword">if</span> mp4_url:</span><br><span class="line">                        response = requests.get(mp4_url, stream=<span class="literal">True</span>)</span><br><span class="line">                        total_length = <span class="built_in">int</span>(response.headers.get(<span class="string">&#x27;content-length&#x27;</span>))</span><br><span class="line">                        filename = os.path.join(download_dir, <span class="string">f&quot;video_<span class="subst">&#123;video_id&#125;</span>_<span class="subst">&#123;index&#125;</span>.mp4&quot;</span>)</span><br><span class="line">                        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                            downloaded = <span class="number">0</span></span><br><span class="line">                            <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(chunk_size=<span class="number">4096</span>):  <span class="comment"># 限制块的大小</span></span><br><span class="line">                                <span class="keyword">if</span> chunk:</span><br><span class="line">                                    f.write(chunk)</span><br><span class="line">                                    downloaded += <span class="built_in">len</span>(chunk)</span><br><span class="line">                                    <span class="comment"># progress_callback(downloaded, total_length)</span></span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">&quot;Download&quot;</span>, downloaded, total_length)</span><br><span class="line"></span><br><span class="line">                        video_files.append(filename)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> video_files:</span><br><span class="line">                    <span class="comment"># 合并视频</span></span><br><span class="line">                    output_filename = os.path.join(download_dir, <span class="string">f&quot;video_<span class="subst">&#123;title&#125;</span>_merged.mp4&quot;</span>)</span><br><span class="line">                    <span class="variable language_">self</span>.merge_videos(video_files, output_filename)</span><br><span class="line">                    <span class="comment"># progress_callback(f&quot;合并后的视频已保存为 &#123;output_filename&#125;&quot;, &quot;success&quot;)</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;合并后的视频已保存为 <span class="subst">&#123;output_filename&#125;</span>&quot;</span>, <span class="string">&quot;success&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># progress_callback(&quot;没有可用的视频链接，无法合并视频&quot;, &quot;error&quot;)</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;没有可用的视频链接，无法合并视频&quot;</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># progress_callback(&quot;未找到可用的视频标签或此视频需要VIP&quot;, &quot;error&quot;)</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;未找到可用的视频标签或此视频需要VIP&quot;</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 关闭浏览器</span></span><br><span class="line">            browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">youku = YoukuVideoDownloader()</span><br><span class="line">info = <span class="string">&quot;甜心格格&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> index,line <span class="keyword">in</span> <span class="built_in">enumerate</span>(f.readlines()):</span><br><span class="line">        line = line.strip()</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            youku.download_and_merge(line, info+<span class="string">&quot;_&quot;</span>+<span class="built_in">str</span>(index))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker构建网易云自动签到听歌</title>
      <link href="/2024/06/02/docker/docker%E6%9E%84%E5%BB%BA%E7%BD%91%E6%98%93%E4%BA%91%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E5%90%AC%E6%AD%8C/"/>
      <url>/2024/06/02/docker/docker%E6%9E%84%E5%BB%BA%E7%BD%91%E6%98%93%E4%BA%91%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E5%90%AC%E6%AD%8C/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="下载配置config-json"><a href="#下载配置config-json" class="headerlink" title="下载配置config.json"></a>下载配置config.json</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL -o config.json https://raw.githubusercontent.com/miloce/NeteaseCloudMusicTasks/main/config.example.json</span><br></pre></td></tr></table></figure><h1 id="获取微信推送消息通知"><a href="#获取微信推送消息通知" class="headerlink" title="获取微信推送消息通知"></a>获取微信推送消息通知</h1><ul><li>打开这个网站 <code>https://www.pushplus.plus</code>  微信扫码登录</li><li>选择发送消息 -&gt; <code>一对一消息</code></li><li>复制你的token<img src="http://doc.lideshan.top/media/202406/2024-06-03_092333_8457180.6694628586002874.png" alt="image.png"></li></ul><h1 id="修改config-json的配置"><a href="#修改config-json的配置" class="headerlink" title="修改config.json的配置"></a>修改config.json的配置</h1><p>大概在25行的<br>username<br>大概29行的<br>password<br>大概33行的<br>cookie<br>大概36行的<br>X-Real-IP<br>大概59行的pushToken</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* 开源地址: https://github.com/miloce/NeteaseCloudMusicTasks */</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.21&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sha&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commitId&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;17337139558&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;countrycode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;passwprd&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cookie&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;X-Real-IP&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span> </span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;push&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;serverChan&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serverChan&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;KEY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pushPlus&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pushPlus&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;pushToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;markdown&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;topic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CoolPush&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CoolPush&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;send&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Skey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;WeCom&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WeCom&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;corpid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;agentid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@all&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;msgtype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Telegram&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Telegram&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;botToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Bark&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bark&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Bark_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Bark_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pushdeer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pushdeer&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;pushkey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;yunbei_task&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;162005&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发布动态&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;publishEvent&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;每日分享&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;今日分享&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;分享歌单&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;216002&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;访问云音乐商城&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;visitMall&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;200002&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云贝推歌&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rcmdSong&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;songId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;yunbeiNum&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;有些美好会迟到，但音乐能带你找到&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;希望找到和我一样喜欢这首歌的朋友&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;人间好声音，推荐给你听&quot;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;162006&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发布Mlog&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;publishMlog&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;songId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">65528</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;分享$artist的歌曲: $song&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;分享歌曲: $song&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;166000&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;分享歌曲/歌单&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;share&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;656007&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浏览会员中心&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;visitVipCenter&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;musician_task&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;749006&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;音乐人中心签到&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;musicianSignin&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;740004&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发布动态&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;publishEvent&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;每日分享&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;今日分享&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;分享歌单&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;755000&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发布主创说&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;publishComment&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;感谢大家收听&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;732004&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;回复粉丝评论&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;replyComment&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;感谢收听&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;755001&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;回复粉丝私信&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sendPrivateMsg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;你好&quot;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;739008&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;观看课程&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;watchCollegeLesson&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;740005&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;访问自己的云圈&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;visitMyCircle&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;circleId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;744005&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发布mlog&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;publishMlog&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;songId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;分享$artist的歌曲: $song&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;分享歌曲: $song&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;vip_task&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;816&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;taskName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;创建共享歌单&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;createSharedPlaylist&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;木一哦歌单&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;我的歌单木一哦&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>                </span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;daka&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;full_stop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;auto&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tolerance&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;song_number&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sleep_time&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;upload_num&quot;</span><span class="punctuation">:</span> <span class="number">300</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;other&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;play_playlists&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;playlist_ids&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;times&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;follow&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="随机时间执行"><a href="#随机时间执行" class="headerlink" title="随机时间执行"></a>随机时间执行</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --restart=on-failure \</span><br><span class="line">    -v $(<span class="built_in">pwd</span>)/config.json:/root/config.json \</span><br><span class="line">    --name netease-cloud-music-tasks \</span><br><span class="line">    enwaiax/netease-cloud-music-tasks:latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用opencv检测图片中是否有人物</title>
      <link href="/2024/05/28/python/%E4%BD%BF%E7%94%A8opencv%E6%A3%80%E6%B5%8B%E5%9B%BE%E7%89%87%E4%B8%AD%E6%98%AF%E5%90%A6%E6%9C%89%E4%BA%BA%E7%89%A9/"/>
      <url>/2024/05/28/python/%E4%BD%BF%E7%94%A8opencv%E6%A3%80%E6%B5%8B%E5%9B%BE%E7%89%87%E4%B8%AD%E6%98%AF%E5%90%A6%E6%9C%89%E4%BA%BA%E7%89%A9/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="使用opencv检测图片中是否有人物"><a href="#使用opencv检测图片中是否有人物" class="headerlink" title="使用opencv检测图片中是否有人物"></a>使用opencv检测图片中是否有人物</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3  </span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">@Project ：all_daily_tasks_code @File    ：使用opencv检测图片中是否有人物.py  </span></span><br><span class="line"><span class="string">@Author  ：木子  </span></span><br><span class="line"><span class="string">@Date    ：2024/5/29 上午11:25 &quot;&quot;&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> shutil  </span><br><span class="line"><span class="comment"># 解决中文路径的问题  </span></span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取当前文件路径  </span></span><br><span class="line">cur_path = os.path.abspath(__file__)  </span><br><span class="line"><span class="comment"># 获取当前文件的父目录  </span></span><br><span class="line">father_path = os.path.abspath(os.path.dirname(cur_path) + os.path.sep + <span class="string">&quot;.&quot;</span>)  </span><br><span class="line"><span class="comment"># 将父目录添加到系统路径中  </span></span><br><span class="line">sys.path.append(father_path)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用opencv检测图片中是否有人物  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_person</span>(<span class="params">image_path</span>):  </span><br><span class="line">    <span class="comment"># 读取图片  </span></span><br><span class="line">    img = cv2.imread(image_path)  </span><br><span class="line">    <span class="keyword">if</span> img <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: Unable to load image at <span class="subst">&#123;image_path&#125;</span>&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span>  <span class="comment"># 或者适当的错误处理  </span></span><br><span class="line">    <span class="comment"># 转换为灰度图  </span></span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  </span><br><span class="line">    <span class="comment"># 加载人脸检测器  </span></span><br><span class="line">    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + <span class="string">&#x27;haarcascade_frontalface_default.xml&#x27;</span>)  </span><br><span class="line">    <span class="comment"># 检测人脸  </span></span><br><span class="line">    <span class="comment"># faces = face_cascade.detectMultiScale(gray, 1.3, 5)  </span></span><br><span class="line">    faces = face_cascade.detectMultiScale(gray, scaleFactor=<span class="number">1.1</span>, minNeighbors=<span class="number">5</span>)  </span><br><span class="line">    <span class="comment"># 如果检测到人脸，则返回True，否则返回False  </span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(faces) &gt; <span class="number">0</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 测试  </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    _<span class="built_in">dir</span> = <span class="string">r&quot;F:\upload\others\ios\img\chat&quot;</span>  </span><br><span class="line">    pho = <span class="string">r&quot;F:\upload\others\ios\img\photo&quot;</span>  </span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(_<span class="built_in">dir</span>):  </span><br><span class="line">        t = os.path.join(_<span class="built_in">dir</span>, item)  </span><br><span class="line">        <span class="keyword">if</span> detect_person(t):  </span><br><span class="line">            _dst = os.path.join(pho, item)  </span><br><span class="line">            shutil.move(t, _dst)  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;item&#125;</span> 已移动到 <span class="subst">&#123;_dst&#125;</span>&quot;</span>)  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;item&#125;</span> 无人脸&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 想法 </category>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据图片的md5值进行去重</title>
      <link href="/2024/05/28/python/%E6%A0%B9%E6%8D%AE%E5%9B%BE%E7%89%87%E7%9A%84md5%E5%80%BC%E8%BF%9B%E8%A1%8C%E5%8E%BB%E9%87%8D/"/>
      <url>/2024/05/28/python/%E6%A0%B9%E6%8D%AE%E5%9B%BE%E7%89%87%E7%9A%84md5%E5%80%BC%E8%BF%9B%E8%A1%8C%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3  </span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">@Project ：all_daily_tasks_code @File    ：根据图片的md5值进行去重.py  </span></span><br><span class="line"><span class="string">@Author  ：木子  </span></span><br><span class="line"><span class="string">@Date    ：2024/5/29 上午11:12 &quot;&quot;&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> hashlib  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 读取文件获取md5  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_md5</span>(<span class="params">file_path</span>):  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(file_path):  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">        md5 = hashlib.md5(f.read()).hexdigest()  </span><br><span class="line">    <span class="keyword">return</span> md5  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">path = <span class="string">r&quot;F:\upload\others\ios\img\微博&quot;</span>  </span><br><span class="line">md5_list = []  </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(path):  </span><br><span class="line">    t = os.path.join(path, item)  </span><br><span class="line">    md5 = get_md5(t)  </span><br><span class="line">    <span class="keyword">if</span> md5 <span class="keyword">not</span> <span class="keyword">in</span> md5_list:  </span><br><span class="line">        md5_list.append(md5)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        os.remove(t)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;t&#125;</span> 已删除&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shell配置</title>
      <link href="/2024/05/28/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/shell%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/05/28/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/shell%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="安装zsh-并设置"><a href="#安装zsh-并设置" class="headerlink" title="安装zsh 并设置"></a>安装zsh 并设置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install zsh -y</span><br><span class="line"><span class="comment"># 设置为默认shell</span></span><br><span class="line"><span class="built_in">sudo</span> chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure><h1 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure><h1 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 将 ZSH_THEME=&quot;robbyrussell&quot; 修改为 ZSH_THEME=&quot;ys&quot;</span></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="安装配置oh-my-zsh插件"><a href="#安装配置oh-my-zsh插件" class="headerlink" title="安装配置oh-my-zsh插件"></a>安装配置oh-my-zsh插件</h1><ul><li>autosuggestion插件<ul><li>根据历史命名进行填充</li><li><code>git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</code></li><li>编辑zshrc添加插件</li><li><code>vim ~/.zshrc</code>  <img src="http://doc.lideshan.top/media/202405/2024-05-31_105016_5585980.6764067161679452.png" alt="image.png"></li><li>重新加载配置 <code>source ~/.zshrc</code></li><li>修改配置字体改亮</li><li>&#96;&#96;cd ~&#x2F;.oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;zsh-autosuggestions</li><li><code>vim zsh-autosuggestions.zsh</code></li><li><code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=10&#39;</code></li></ul></li><li><h2 id="语法高亮插件-sudo-apt-install-zsh-syntax-highlighting-echo-source-usr-share-zsh-syntax-highlighting-zsh-syntax-highlighting-zsh-zshrc-source-zshrc"><a href="#语法高亮插件-sudo-apt-install-zsh-syntax-highlighting-echo-source-usr-share-zsh-syntax-highlighting-zsh-syntax-highlighting-zsh-zshrc-source-zshrc" class="headerlink" title="语法高亮插件  - sudo apt install zsh-syntax-highlighting  - echo &quot;source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &gt;&gt; ~/.zshrc  - source ~/.zshrc"></a>语法高亮插件<br>  - <code>sudo apt install zsh-syntax-highlighting</code><br>  - <code>echo &quot;source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &gt;&gt; ~/.zshrc</code><br>  - <code>source ~/.zshrc</code></h2><ul><li></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> code </category>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苏州游玩攻略</title>
      <link href="/2024/05/14/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E8%8B%8F%E5%B7%9E%E6%94%BB%E7%95%A5/"/>
      <url>/2024/05/14/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E8%8B%8F%E5%B7%9E%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="行程规划"><a href="#行程规划" class="headerlink" title="行程规划"></a>行程规划</h1><ul><li><p>周六</p><ul><li>早上<ul><li>从<code>常州</code>出发高铁到<code>苏州园林站</code>(9点58-10点39)【<code>9点半</code>到常州高铁站，<code>8点50</code>出发打车过去】</li><li>先去把东西放在 预定的酒店(<code>格林元素酒店</code>)</li><li>周六上午预约了<code>苏州博物馆</code></li></ul></li><li>中午<ul><li>在<code>博物馆</code>附近的饭店或者小吃街吃饭<ul><li><code>鸿鑫楼</code>  4.8<ul><li>特色 松鼠桂鱼、苏帮菜</li></ul></li><li><code>苏宴 新苏人家苏帮菜 观前店</code> 4.8分<ul><li>特色 松鼠桂鱼、苏帮菜</li></ul></li><li><code>苏小院苏帮菜</code> 4.9分<ul><li>特色 松鼠桂鱼、苏帮菜</li></ul></li></ul></li></ul></li><li>下午<ul><li><code>拙政园</code> 逛逛</li></ul></li><li>晚上 <ul><li><code>金鸡湖</code> 看夜景</li></ul></li><li>订的蛋糕</li></ul></li><li><p>周日</p><ul><li>上午 汉服馆<code>妆造、簪花</code></li><li><code>寒山寺 七里山塘</code></li><li>下午 6点返程</li><li>7点去机场</li></ul></li><li><p>周六上午</p><ul><li>常州-&gt;苏州高铁(苏州园区)(全天有票)</li><li>从高铁站打车到观前街(预约酒店)<ul><li>放东西</li><li>看看有没有租汉服的地方</li></ul></li><li>距离 <code>拙政园</code>  1.5km -&gt;节省体力 打车过去</li><li>距离 <code>苏州博物馆</code>  2km -&gt;节省体力 打车过去</li><li><code>拙政园</code> <code>苏州博物馆</code> <code>平江路</code>  几个点之间距离不超过1km </li><li>下午看累不累 不累的话去 <code>金鸡湖</code></li></ul></li><li><p>周日</p><ul><li><code>寒山寺</code> <code>七里山塘</code> 两个景点 不累的话可以去听听 <code>山塘昆曲馆</code></li></ul></li><li><p>周日下午</p><ul><li>高铁返程</li></ul></li><li><p>其他</p><ul><li>景点列表 <ul><li><code>拙政园</code>   适合打卡拍照  有种放松的感觉</li><li><code>苏州博物馆</code>   置身之内有天空之境的感觉</li><li><code>金鸡湖</code>  夜景比较好看</li><li><code>寒山寺</code> 寒山钟声</li><li><code>七里山塘</code>  古色建筑 特色小吃</li></ul></li><li>玩乐<ul><li><code>平江路</code>   江南水乡的感觉</li><li><code>观前街</code>  购物小吃</li></ul></li></ul></li></ul><h1 id="D1"><a href="#D1" class="headerlink" title="D1"></a>D1</h1><ol><li>拙政园(2h)</li><li>苏州博物馆(2h)需要预约_微信公众号</li><li>平江路(1h)</li><li>金鸡湖(2h)</li></ol><h2 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h2><p>行程:</p><ul><li>早上先到达苏州的代表园林-拙政园游玩，园子分为东、中、西三部分，每个部分都有不同的风采，推荐游玩顺序东部、中部、西部。</li><li>然后去贝聿铭设计的苏州博物馆(周末或者高峰期，建议提前在网上预约参观时间段)。</li><li>下午到达历史老街平江路，道路两旁有数不尽的美食和创意小铺。</li><li>最后漫步金鸡湖，建议傍晚去，因为日落时分的金鸡湖是最美的。此外，每周五、六晚上20:00-20:30金鸡湖有音乐喷泉表演。</li></ul><h2 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h2><ul><li>碧螺虾仁、笋腌鲜、母油鸡</li><li>小吃，蜜汁豆腐干、松子糖、玫瑰瓜子等。</li><li>中午选择拙政园附近<ul><li>吃饭，有面馆、苏帮菜、特色小吃供大家选择。</li></ul></li><li>晚饭选择金鸡湖附近，各种菜式的餐厅应有尽有。</li></ul><h2 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h2><ul><li>观前街 去几个景点比较方便</li></ul><h1 id="D2"><a href="#D2" class="headerlink" title="D2"></a>D2</h1><ol><li>寒山寺(1h)</li><li>虎丘(3h)</li><li>七里山塘(2h)</li><li>山塘昆曲馆(2h)</li></ol><h2 id="路线-1"><a href="#路线-1" class="headerlink" title="路线"></a>路线</h2><p>行程:</p><ul><li>上午先游览因《枫桥夜泊》而闻名遐迩的寒山寺，</li><li>然后到达”吴中第一名胜”的虎丘。景点附近吃完午饭，</li><li>下午开始游玩七里山塘，在这里可以赏景品尝美食</li><li>山塘昆曲馆听评弹、昆曲,另外，山塘的夜景也非常的漂亮。需注意的是评弹:14:00-16:00:昆曲:19:30-22:00.</li><li>交通:<ul><li>寒山寺到虎丘，从来凤桥站乘坐816路到虎丘路站下车，步行210米到达。</li><li>虎丘到达七里山塘，在虎丘首末站乘坐游1路南线到广济桥站下车，步行830米到达。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 勇敢的人先享受世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>港澳通行证办理</title>
      <link href="/2024/05/13/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E6%B8%AF%E6%BE%B3%E9%80%9A%E8%A1%8C%E8%AF%81/"/>
      <url>/2024/05/13/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E6%B8%AF%E6%BE%B3%E9%80%9A%E8%A1%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="支付宝搜索"><a href="#支付宝搜索" class="headerlink" title="支付宝搜索"></a>支付宝搜索</h1><p><code>港澳通行证</code> -&gt; 选择 <code>预约办证</code><br><img src="http://doc.lideshan.top/media/202405/2024-05-13_164838_5637230.9703427253712709.png" alt="image.png"></p><h2 id="选择往来港澳通行证和签注"><a href="#选择往来港澳通行证和签注" class="headerlink" title="选择往来港澳通行证和签注"></a>选择往来港澳通行证和签注</h2><p>台湾的暂时办了没用去不了(上次去办的时候问了工作人员，所以只需要选择港澳通行证就可以了)<br><img src="http://doc.lideshan.top/media/202405/2024-05-13_164931_5654710.24449297326541697.png" alt="1715590158941.png"></p><h2 id="选择要办理的地址"><a href="#选择要办理的地址" class="headerlink" title="选择要办理的地址"></a>选择要办理的地址</h2><p>看了下地图<code>新北区太湖中路</code>距离你最近的地方 可以做<code>24路公交</code>到<br><img src="http://doc.lideshan.top/media/202405/2024-05-13_165223_9099960.3550884375427148.png" alt="1715590329741.png"><br><img src="http://doc.lideshan.top/media/202405/2024-05-13_165309_4786360.9542801729851511.png" alt="image.png"></p><h2 id="然后就是选择时间"><a href="#然后就是选择时间" class="headerlink" title="然后就是选择时间"></a>然后就是选择时间</h2><p>一般都是<code>工作日</code> 偶尔可能会有<code>周六日</code>可以办<br><img src="http://doc.lideshan.top/media/202405/2024-05-13_165446_3478300.913220768104336.png" alt="image.png"></p><h2 id="然后选择"><a href="#然后选择" class="headerlink" title="然后选择"></a>然后选择</h2><p>户口所在地  <code>河南南阳</code><br>办证类型 <code>往来港澳通行证和签注</code> 右边有个蓝色的信息 <code>填写办理信息</code><br>选择 <code>通行证和签注</code> -&gt; <code>首次申请</code> -&gt; <code>香港</code>-&gt; <code>团队旅游</code> -&gt; <code>按照需要选择就可以 1年2次差不多就可以</code><br><code>也可以把澳门的一块填写了</code><br><img src="http://doc.lideshan.top/media/202405/2024-05-13_165524_2982970.31697402689662046.png" alt="1715590513810.png"></p><h2 id="在填写下基本信息"><a href="#在填写下基本信息" class="headerlink" title="在填写下基本信息"></a>在填写下基本信息</h2><p><img src="http://doc.lideshan.top/media/202405/2024-05-13_170027_2410060.9268362975406528.png" alt="image.png"></p><h2 id="最后在选择是自取还是邮政快递"><a href="#最后在选择是自取还是邮政快递" class="headerlink" title="最后在选择是自取还是邮政快递"></a>最后在选择是自取还是邮政快递</h2><p><code>一般邮政快递比较晚几天的</code><br><img src="http://doc.lideshan.top/media/202405/2024-05-13_170102_4545510.03526618665919068.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ū��С��Ϸ</title>
      <link href="/2024/05/13/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E6%90%9E%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
      <url>/2024/05/13/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E6%90%9E%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/itorr/sakana">GitHub - itorr&#x2F;sakana: 🐟「Sakana!」石蒜模拟器</a><br><a href="https://lab.magiconch.com/sakana/?v=chisato">Sakana! - 石蒜模拟�- 石蒜虚拟�- 神奇海螺试验场</a></p>]]></content>
      
      
      <categories>
          
          <category> �˹����� </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
            <tag> openai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用ai自动生成视频</title>
      <link href="/2024/05/13/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E8%A7%86%E9%A2%91/"/>
      <url>/2024/05/13/%E5%8B%87%E6%95%A2%E7%9A%84%E4%BA%BA%E5%85%88%E4%BA%AB%E5%8F%97%E4%B8%96%E7%95%8C/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h2 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h2><ul><li>git地址: <a href="https://github.com/harry0703/MoneyPrinterTurbo">GitHub - harry0703&#x2F;MoneyPrinterTurbo: 利用AI大模型，一键生成高清短视频 Generate short videos with one click using AI LLM.</a></li><li><img src="http://doc.lideshan.top/media/202405/2024-05-13_142007_1168840.6510031476650087.png" alt="image.png"></li></ul><h2 id="更新仓库"><a href="#更新仓库" class="headerlink" title="更新仓库"></a>更新仓库</h2><p><img src="http://doc.lideshan.top/media/202405/2024-05-13_142037_1188330.0806301636458332.png" alt="image.png"></p><p>双击等待更新完成</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><img src="http://doc.lideshan.top/media/202405/2024-05-13_142103_2937370.9255737883736087.png" alt="image.png"><br>双击启动等到加载完成 加载完成会自动打开浏览器的</p><h2 id="点击配置使用的模型和pexeis"><a href="#点击配置使用的模型和pexeis" class="headerlink" title="点击配置使用的模型和pexeis"></a>点击配置使用的模型和pexeis</h2><p><img src="http://doc.lideshan.top/media/202405/2024-05-13_142230_2429640.9156769854422401.png" alt="image.png"></p><h2 id="开始生成"><a href="#开始生成" class="headerlink" title="开始生成"></a>开始生成</h2><p><img src="http://doc.lideshan.top/media/202405/2024-05-13_142440_7481620.6955325077946594.png" alt="image.png"></p><p>输入视频主题后生成视频文案和视频关键词 选择朗读的音频 点击生成视频</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openai </tag>
            
            <tag> ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>samba</title>
      <link href="/2024/02/02/samba/samba%E9%85%8D%E7%BD%AE%E5%AE%A1%E8%AE%A1/"/>
      <url>/2024/02/02/samba/samba%E9%85%8D%E7%BD%AE%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="安装samba"><a href="#安装samba" class="headerlink" title="安装samba"></a>安装samba</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install samba</span><br></pre></td></tr></table></figure><h1 id="创建共享目录"><a href="#创建共享目录" class="headerlink" title="创建共享目录"></a>创建共享目录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /data</span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line"><span class="built_in">chmod</span> 777 /data</span><br><span class="line"><span class="comment"># 添加登录用户</span></span><br><span class="line"><span class="comment">## 创建一个用户组</span></span><br><span class="line">groupadd dmai</span><br><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line">useradd -s /sbin/nologin -M -g dmai user1</span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">smbpasswd -a user1</span><br></pre></td></tr></table></figure><h1 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[caiwu]</span><br><span class="line">comment = caiwu share</span><br><span class="line">path = /data</span><br><span class="line">public = yes</span><br><span class="line">writebale =yew</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>&#x2F;etc&#x2F;samba&#x2F;smb.conf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span> file = /data/samba_log/log.%I</span><br><span class="line">        vfs object = full_audit</span><br><span class="line">        full_audit:prefix = %u|%I|%m|%S</span><br><span class="line">        full_audit:success = connect disconnect opendir <span class="built_in">mkdir</span> <span class="built_in">rmdir</span> closedir open close fchmod <span class="built_in">chown</span> fchown <span class="built_in">chdir</span> rename <span class="built_in">unlink</span> pwrite write create delete</span><br><span class="line">        full_audit:failure = none</span><br><span class="line">        full_audit:facility = LOCAL5</span><br><span class="line">        full_audit:prrority = notice</span><br><span class="line">        vfs object = recycle</span><br><span class="line">        recycle:repository = /data/deleted/%U</span><br><span class="line">        recycle:keeptree = Yes</span><br><span class="line">        recycle:versions = Yes</span><br><span class="line">        recycle:maxsixe = 0</span><br><span class="line">        recycle:exclude = *.tmp ,*.TMP</span><br></pre></td></tr></table></figure><h1 id="设置日志"><a href="#设置日志" class="headerlink" title="设置日志"></a>设置日志</h1><p>&#x2F;etc&#x2F;rsyslog.conf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">local5.* /data/log/samba/info.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> samba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ubuntu服务器启动samba并创建不同用户组访问限制</title>
      <link href="/2024/02/02/server/%E5%85%B3%E4%BA%8Eubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8samba%E5%B9%B6%E5%88%9B%E5%BB%BA%E4%B8%8D%E5%90%8C%E7%94%A8%E6%88%B7%E7%BB%84%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6/"/>
      <url>/2024/02/02/server/%E5%85%B3%E4%BA%8Eubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8samba%E5%B9%B6%E5%88%9B%E5%BB%BA%E4%B8%8D%E5%90%8C%E7%94%A8%E6%88%B7%E7%BB%84%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="安装samba"><a href="#安装samba" class="headerlink" title="安装samba"></a>安装samba</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br><span class="line"><span class="built_in">sudo</span> apt install samba -y</span><br></pre></td></tr></table></figure><h2 id="创建共享文件夹"><a href="#创建共享文件夹" class="headerlink" title="创建共享文件夹"></a>创建共享文件夹</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/ubuntu</span><br><span class="line"><span class="built_in">mkdir</span> sharefolder</span><br></pre></td></tr></table></figure><h2 id="创建用户并分配不用用户组"><a href="#创建用户并分配不用用户组" class="headerlink" title="创建用户并分配不用用户组"></a>创建用户并分配不用用户组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建用户组</span><br><span class="line">groupadd person</span><br><span class="line">useradd -s /sbin/nologin -M -g person user1</span><br><span class="line">useradd -s /sbin/nologin -M -g person user2</span><br><span class="line"># 创建管理员用户组</span><br><span class="line">groupadd personadmin</span><br><span class="line">useradd -s /sbin/nologin -M -g personadmin useradmin1</span><br><span class="line">useradd -s /sbin/nologin -M -g personadmin useradmin2</span><br><span class="line"># 设置密码</span><br><span class="line">smbpasswd -a XXXX</span><br><span class="line">smbpasswd -a user1</span><br><span class="line">smbpasswd -a user2</span><br><span class="line">smbpasswd -a useradmin1</span><br><span class="line">smbpasswd -a useradmin2</span><br></pre></td></tr></table></figure><h2 id="修改samba配置"><a href="#修改samba配置" class="headerlink" title="修改samba配置"></a>修改samba配置</h2><h3 id="在这个位置"><a href="#在这个位置" class="headerlink" title="在这个位置"></a>在这个位置</h3><p><img src="https://lideshan.cn/zb_users/upload/2022/05/202205271057358974598.png"></p><h3 id="添加以下信息"><a href="#添加以下信息" class="headerlink" title="添加以下信息"></a>添加以下信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[spider]  # 共享的名字</span><br><span class="line">   comment = sambaadmin dm # 共享的简介</span><br><span class="line">   path = /home/ubuntu/sharefolder   # 共享路径</span><br><span class="line">   public = yes   # 是否开放</span><br><span class="line">   writeable = yes   # 是否可写</span><br><span class="line">   read only = no   # 是否只读</span><br><span class="line">   valid users = @person, @personadmin # 允许访问的用户组,用户直接dm1,d1</span><br><span class="line">   create mask = 0777 # 创建文件给予的权限</span><br><span class="line">   force create mask = 0777  # 强制文件的权限</span><br><span class="line">   directory mask = 0777   # 创建文件夹给予的权限</span><br><span class="line">   force directory mask = 0777 # 强制文件夹的权限</span><br><span class="line">   force user = ubuntu   # 强制归属于ubuntu用户</span><br><span class="line">   browseable = yes   # 允许打开</span><br><span class="line">   available = yes</span><br></pre></td></tr></table></figure><h2 id="重启samba服务"><a href="#重启samba服务" class="headerlink" title="重启samba服务"></a>重启samba服务</h2><p><font color=Red>注意：重启服务的时候一定要把正在操作的文件给关闭掉，不然可能会出问题</font></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/smbd restart</span><br></pre></td></tr></table></figure><h2 id="账号不能使用问题"><a href="#账号不能使用问题" class="headerlink" title="账号不能使用问题"></a>账号不能使用问题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除samba账号</span><br><span class="line">sudo smbpasswd -d lds</span><br><span class="line"># 删除用户</span><br><span class="line">sudo userdel -r lds</span><br><span class="line"># 创建没有文件夹的账号</span><br><span class="line">sudo useradd -s /sbin/nologin -M -g dmai lds</span><br><span class="line"># 设置samba账号密码</span><br><span class="line">sudo smbpasswd -a lds</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> samba </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>api</title>
      <link href="/2024/01/01/%E6%8E%A5%E5%8F%A3/api/"/>
      <url>/2024/01/01/%E6%8E%A5%E5%8F%A3/api/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="随机图"><a href="#随机图" class="headerlink" title="随机图"></a>随机图</h1><p><a href="https://www.dmoe.cc/">樱花随机二次元图片API-樱花</a><br>    <a href="https://www.dmoe.cc/random.php">Fetching Title#4wb6</a><br><a href="https://blog.csdn.net/SectSnow/article/details/115835711">十五个免费随机图片api接口网站[超详细]（不定时更新）-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些接口</title>
      <link href="/2024/01/01/%E6%8E%A5%E5%8F%A3/%E4%B8%80%E4%BA%9B%E6%8E%A5%E5%8F%A3/"/>
      <url>/2024/01/01/%E6%8E%A5%E5%8F%A3/%E4%B8%80%E4%BA%9B%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p><a href="https://javabetter.cn/home.html">二哥的Java进阶之路x沉默王二 | 二哥的Java进阶之路</a><br><a href="https://javaguide.cn/">Java 面试指南 | JavaGuide</a><br><a href="https://www.codermast.com/">「编程桅杆」Java 全栈学习指南 | CoderMast编程桅杆</a><br><a href="https://java.isture.com/">项目主页 | Java学习笔记</a></p><h1 id="个性化定制"><a href="#个性化定制" class="headerlink" title="个性化定制"></a>个性化定制</h1><p><a href="https://innenu.com/">主页 | inNENU</a></p><h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><p><a href="https://golang.halfiisland.com/">首页 | Golang中文学习文档</a></p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p><a href="https://docs.crawlab.cn/zh/guide/">介绍</a></p><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p><a href="https://idea.javaguide.cn/">主页 | IDEA 高效使用指南</a></p><h1 id="Other-blog"><a href="#Other-blog" class="headerlink" title="Other blog"></a>Other blog</h1><p><a href="https://blog.mo7.cc/category/%E4%B9%A6%E5%8D%95/">书单 分类 | 墨七</a><br><a href="https://wenchao.ren/">博客主页 | 被遗忘的博客</a><br><a href="https://408.142vip.cn/quick-start.html">快速开始 | 计算机408全家桶</a><br><a href="https://aneot.terrach.net/">主页 | 回归线</a><br><a href="https://www.csview.cn/start-learning">学习指南 | CSView计算机招聘知识分享</a><br><a href="https://142vip.github.io/JavaScriptCollection/quick-start.html">快速开始 | 凡是过往、皆为序章</a><br><a href="https://xiangweizeng.github.io/damone-blog/">主页 | Damone’s Blog</a><br><a href="https://brain.sunguoqi.com/">首页 | 小孙同学 Coding</a><br><a href="https://zhiyu1998.github.io/Computer-Science-Learn-Notes/">主页 | CSLN</a><br><a href="https://newzone.top/">LearnData 开源笔记 | LearnData 开源笔记</a><br><a href="https://lulaoshi.info/blog/">文章 | 鲁老师</a><br><a href="https://blog.dselegent.icu/">dselegent-blog</a><br><a href="https://timpcfan.site/category/api/">API 分类 | TrystanLei</a><br><a href="https://blog.white233.top/docs/">首页 | 温故而知新~</a><br><a href="https://www.zhaobc.site/">主页 | 赵斌的小站</a><br><a href="https://liubing.me/">首页 | Bing🐣</a><br><a href="https://oragekk.me/">Fetching Title#856p</a><br><a href="https://clay-wangzhi.com/">主页 | SRE运维进阶之路</a><br><a href="https://topjavaer.cn/">主页 | Java学习&amp;面试指南-程序员大彬</a></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序</title>
      <link href="/2023/06/06/%E6%96%87%E6%A1%A3/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/06/06/%E6%96%87%E6%A1%A3/%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><a href="https://github.com/zhuige-com/jiangqie_kafei">GitHub - zhuige-com&#x2F;jiangqie_kafei: 酱茄小程序开源版，基于WordPress的微信小程序，适用于博客小程序和新闻资讯小程序。</a><br><a href="https://github.com/mark420524/question/tree/develop">GitHub - mark420524&#x2F;question: 小程序，微信答题小程序，可以进行答题，模拟考试。增加了词典查询，汉字成语查询等功能</a></p>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> document </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>document</title>
      <link href="/2023/06/06/%E6%96%87%E6%A1%A3/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
      <url>/2023/06/06/%E6%96%87%E6%A1%A3/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><a href="https://g1879.gitee.io/drissionpagedocs/get_start/installation">🌏 安装 | DrissionPage</a></p><p><a href="https://blog.csdn.net/weixin_43582101/category_9291501.html">爬虫案例合集_考古学家lx(李玺)的博客-CSDN博客</a><br><a href="https://blog.csdn.net/weixin_43582101/category_11192755.html">签名逆向合集_考古学家lx(李玺)的博客-CSDN博客</a><br><a href="https://zhuanlan.zhihu.com/p/672918285">23 个超棒的开源应用程序 - 知乎</a><br><a href="https://www.cnblogs.com/clsn/p/8244206.html#auto-id-5">MongoDB的备份与恢复 - 惨绿少年 - 博客园</a></p><ul><li>维权<ul><li><a href="https://www.yuque.com/spermwhale/flower/bcwqzjqd">被裁维权自救清单</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> document </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib无法显示中文解决方法</title>
      <link href="/2023/06/06/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/matplotlib%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2023/06/06/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/matplotlib%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># import matplotlib.pyplot as plt</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"><span class="comment">#from pylab import mpl</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#mpl.rcParams[u&#x27;font.sans-serif&#x27;] =  [&#x27;simabs&#x27;]  # 指定默认字体</span></span><br><span class="line"><span class="comment">#mpl.rcParams[&#x27;axes.unicode_minus&#x27;] = False  # 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line">font=FontProperties(fname=<span class="string">r&#x27;/data/env_env/python/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/simabs.ttf&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_image</span>(<span class="params">save_path, text</span>):</span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">1.25</span>))</span><br><span class="line">    fig.text(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">u&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(text),</span><br><span class="line">             horizontalalignment=<span class="string">&#x27;center&#x27;</span>, verticalalignment=<span class="string">&#x27;center&#x27;</span>, fontsize=<span class="number">15</span>,fontproperties=font)</span><br><span class="line">    plt.savefig(save_path)</span><br><span class="line">    plt.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matplotlib </tag>
            
            <tag> pyhton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL速查</title>
      <link href="/2023/06/06/%E6%95%B0%E6%8D%AE%E5%BA%93/sql/SQL%E9%80%9F%E6%9F%A5/"/>
      <url>/2023/06/06/%E6%95%B0%E6%8D%AE%E5%BA%93/sql/SQL%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="1-查找数据的查询"><a href="#1-查找数据的查询" class="headerlink" title="1. 查找数据的查询"></a>1. 查找数据的查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>: 用于从数据库中选择数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name;</span><br><span class="line"><span class="keyword">DISTINCT</span>: 用于过滤掉重复的值并返回指定列的行</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column_name;</span><br></pre></td></tr></table></figure><h4 id="WHERE-用于过滤记录-行"><a href="#WHERE-用于过滤记录-行" class="headerlink" title="WHERE: 用于过滤记录&#x2F;行"></a><strong>WHERE</strong>: 用于过滤记录&#x2F;行</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2 <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> condition1 <span class="keyword">AND</span> condition2;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> condition1 <span class="keyword">OR</span> condition2;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">condition</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> condition1 <span class="keyword">AND</span> (condition2 <span class="keyword">OR</span> condition3);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>);</span><br></pre></td></tr></table></figure><h4 id="ORDER-BY-用于结果集的排序，升序（ASC）或者降序（DESC）"><a href="#ORDER-BY-用于结果集的排序，升序（ASC）或者降序（DESC）" class="headerlink" title="ORDER BY: 用于结果集的排序，升序（ASC）或者降序（DESC）"></a><strong>ORDER BY</strong>: 用于结果集的排序，升序（ASC）或者降序（DESC）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span> <span class="keyword">DESC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1 <span class="keyword">ASC</span>, column2 <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="SELECT-TOP-用于指定从表顶部返回的记录数"><a href="#SELECT-TOP-用于指定从表顶部返回的记录数" class="headerlink" title="SELECT TOP: 用于指定从表顶部返回的记录数"></a><strong>SELECT TOP</strong>: 用于指定从表顶部返回的记录数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP number columns_names <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="keyword">percent</span> columns_names <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line"># 并非所有数据库系统都支持<span class="keyword">SELECT</span> TOP。 MySQL 中是LIMIT子句</span><br><span class="line"><span class="keyword">SELECT</span> column_names <span class="keyword">FROM</span> table_name LIMIT <span class="keyword">offset</span>, count;</span><br></pre></td></tr></table></figure><h4 id="LIKE-用于搜索列中的特定模式，WHERE-子句中使用的运算符"><a href="#LIKE-用于搜索列中的特定模式，WHERE-子句中使用的运算符" class="headerlink" title="LIKE: 用于搜索列中的特定模式，WHERE 子句中使用的运算符"></a><strong>LIKE</strong>: 用于搜索列中的特定模式，WHERE 子句中使用的运算符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span> (<span class="keyword">percent</span> sign) 是一个表示零个，一个或多个字符的通配符</span><br><span class="line">_ (underscore) 是一个表示单个字符通配符</span><br><span class="line"><span class="keyword">SELECT</span> column_names <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="keyword">LIKE</span> <span class="keyword">pattern</span>;</span><br><span class="line"><span class="keyword">LIKE</span> ‘a<span class="operator">%</span>’    （查找任何以“a”开头的值）</span><br><span class="line"><span class="keyword">LIKE</span> ‘<span class="operator">%</span>a’    （查找任何以“a”结尾的值）</span><br><span class="line"><span class="keyword">LIKE</span> ‘<span class="operator">%</span><span class="keyword">or</span><span class="operator">%</span>’  （查找任何包含“<span class="keyword">or</span>”的值）</span><br><span class="line"><span class="keyword">LIKE</span> ‘_r<span class="operator">%</span>’   （查找任何第二位是“r”的值）</span><br><span class="line"><span class="keyword">LIKE</span> ‘a_<span class="operator">%</span>_<span class="operator">%</span>’ （查找任何以“a”开头且长度至少为<span class="number">3</span>的值）</span><br><span class="line"><span class="keyword">LIKE</span> ‘[a<span class="operator">-</span>c]<span class="operator">%</span>’（查找任何以“a”或“b”或“c”开头的值）</span><br></pre></td></tr></table></figure><h4 id="IN-用于在-WHERE-子句中指定多个值的运算符"><a href="#IN-用于在-WHERE-子句中指定多个值的运算符" class="headerlink" title="IN: 用于在 WHERE 子句中指定多个值的运算符"></a><strong>IN</strong>: 用于在 WHERE 子句中指定多个值的运算符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">本质上，<span class="keyword">IN</span>运算符是多个<span class="keyword">OR</span>条件的简写</span><br><span class="line"><span class="keyword">SELECT</span> column_names <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="keyword">IN</span> (value1, value2, …);</span><br><span class="line"><span class="keyword">SELECT</span> column_names <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="keyword">IN</span> (<span class="keyword">SELECT</span> STATEMENT);</span><br></pre></td></tr></table></figure><h4 id="BETWEEN-用于过滤给定范围的值的运算符"><a href="#BETWEEN-用于过滤给定范围的值的运算符" class="headerlink" title="BETWEEN: 用于过滤给定范围的值的运算符"></a><strong>BETWEEN</strong>: 用于过滤给定范围的值的运算符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_names <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Products <span class="keyword">WHERE</span> (column_name <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2) <span class="keyword">AND</span> <span class="keyword">NOT</span> column_name2 <span class="keyword">IN</span> (value3, value4);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Products <span class="keyword">WHERE</span> column_name <span class="keyword">BETWEEN</span> #<span class="number">01</span><span class="operator">/</span><span class="number">07</span><span class="operator">/</span><span class="number">1999</span># <span class="keyword">AND</span> #<span class="number">03</span><span class="operator">/</span><span class="number">12</span><span class="operator">/</span><span class="number">1999</span>#;</span><br></pre></td></tr></table></figure><h4 id="NULL-代表一个字段没有值"><a href="#NULL-代表一个字段没有值" class="headerlink" title="NULL: 代表一个字段没有值"></a><strong>NULL</strong>: 代表一个字段没有值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="AS-用于给表或者列分配别名"><a href="#AS-用于给表或者列分配别名" class="headerlink" title="AS: 用于给表或者列分配别名"></a><strong>AS</strong>: 用于给表或者列分配别名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">AS</span> alias_name <span class="keyword">FROM</span> table_name;</span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name <span class="keyword">AS</span> alias_name;</span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">AS</span> alias_name1, column_name2 <span class="keyword">AS</span> alias_name2;</span><br><span class="line"><span class="keyword">SELECT</span> column_name1, column_name2 <span class="operator">+</span> ‘, ‘ <span class="operator">+</span> column_name3 <span class="keyword">AS</span> alias_name;</span><br></pre></td></tr></table></figure><h4 id="UNION-用于组合两个或者多个-SELECT-语句的结果集的运算符"><a href="#UNION-用于组合两个或者多个-SELECT-语句的结果集的运算符" class="headerlink" title="UNION: 用于组合两个或者多个 SELECT 语句的结果集的运算符"></a><strong>UNION</strong>: 用于组合两个或者多个 SELECT 语句的结果集的运算符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">每个 <span class="keyword">SELECT</span> 语句必须拥有相同的列数</span><br><span class="line">列必须拥有相似的数据类型</span><br><span class="line">每个 <span class="keyword">SELECT</span> 语句中的列也必须具有相同的顺序</span><br><span class="line"><span class="keyword">SELECT</span> columns_names <span class="keyword">FROM</span> table1 <span class="keyword">UNION</span> <span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table2;</span><br><span class="line"><span class="keyword">UNION</span> 仅允许选择不同的值, <span class="keyword">UNION</span> <span class="keyword">ALL</span> 允许重复</span><br></pre></td></tr></table></figure><h4 id="ANY-ALL-用于检查-WHERE-或-HAVING-子句中使用的子查询条件的运算符"><a href="#ANY-ALL-用于检查-WHERE-或-HAVING-子句中使用的子查询条件的运算符" class="headerlink" title="ANY|ALL: 用于检查 WHERE 或 HAVING 子句中使用的子查询条件的运算符"></a><strong>ANY|ALL</strong>: 用于检查 WHERE 或 HAVING 子句中使用的子查询条件的运算符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ANY</span> 如果任何子查询值满足条件，则返回 <span class="literal">true</span>。</span><br><span class="line"><span class="keyword">ALL</span> 如果所有子查询值都满足条件，则返回 <span class="literal">true</span>。</span><br><span class="line"><span class="keyword">SELECT</span> columns_names <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> column_name operator (<span class="keyword">ANY</span><span class="operator">|</span><span class="keyword">ALL</span>) (<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>);</span><br></pre></td></tr></table></figure><h4 id="GROUP-BY-通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列"><a href="#GROUP-BY-通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列" class="headerlink" title="GROUP BY: 通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列"></a><strong>GROUP BY</strong>: 通常与聚合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，用于将结果集分组为一列或多列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name1, <span class="built_in">COUNT</span>(column_name2) <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name1 <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">COUNT</span>(column_name2) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="HAVING-HAVING-子句指定-SELECT-语句应仅返回聚合值满足指定条件的行。它被添加到-SQL-语言中，因为WHERE关键字不能与聚合函数一起使用。"><a href="#HAVING-HAVING-子句指定-SELECT-语句应仅返回聚合值满足指定条件的行。它被添加到-SQL-语言中，因为WHERE关键字不能与聚合函数一起使用。" class="headerlink" title="HAVING: HAVING 子句指定 SELECT 语句应仅返回聚合值满足指定条件的行。它被添加到 SQL 语言中，因为WHERE关键字不能与聚合函数一起使用。"></a><strong>HAVING</strong>: HAVING 子句指定 SELECT 语句应仅返回聚合值满足指定条件的行。它被添加到 SQL 语言中，因为WHERE关键字不能与聚合函数一起使用。</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(column_name1), column_name2 <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name2 <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(column_name1) <span class="operator">&gt;</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="2-修改数据的查询"><a href="#2-修改数据的查询" class="headerlink" title="2.修改数据的查询"></a>2.修改数据的查询</h2><h4 id="INSERT-INTO-用于在表中插入新记录-行"><a href="#INSERT-INTO-用于在表中插入新记录-行" class="headerlink" title="INSERT INTO: 用于在表中插入新记录&#x2F;行"></a><strong>INSERT INTO</strong>: 用于在表中插入新记录&#x2F;行</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1, column2) <span class="keyword">VALUES</span> (value1, value2);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name <span class="keyword">VALUES</span> (value1, value2 …);</span><br></pre></td></tr></table></figure><h4 id="UPDATE-用于修改表中的现有记录-行"><a href="#UPDATE-用于修改表中的现有记录-行" class="headerlink" title="UPDATE: 用于修改表中的现有记录&#x2F;行"></a><strong>UPDATE</strong>: 用于修改表中的现有记录&#x2F;行</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2 <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> column_name <span class="operator">=</span> <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure><h4 id="DELETE-用于删除表中的现有记录-行"><a href="#DELETE-用于删除表中的现有记录-行" class="headerlink" title="DELETE: 用于删除表中的现有记录&#x2F;行"></a><strong>DELETE</strong>: 用于删除表中的现有记录&#x2F;行</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><h2 id="3-聚合查询"><a href="#3-聚合查询" class="headerlink" title="3. 聚合查询"></a>3. 聚合查询</h2><h4 id="COUNT-返回出现次数"><a href="#COUNT-返回出现次数" class="headerlink" title="COUNT: 返回出现次数"></a><strong>COUNT</strong>: 返回出现次数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span> (<span class="keyword">DISTINCT</span> column_name);</span><br></pre></td></tr></table></figure><h4 id="MIN-and-MAX-返回所选列的最小-最大值"><a href="#MIN-and-MAX-返回所选列的最小-最大值" class="headerlink" title="MIN() and MAX(): 返回所选列的最小&#x2F;最大值"></a><strong>MIN() and MAX()</strong>: 返回所选列的最小&#x2F;最大值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span> (column_names) <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span> (column_names) <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h4 id="AVG-返回数字列的平均值"><a href="#AVG-返回数字列的平均值" class="headerlink" title="AVG(): 返回数字列的平均值"></a><strong>AVG()</strong>: 返回数字列的平均值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span> (column_name) <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h4 id="SUM-返回数值列的总和"><a href="#SUM-返回数值列的总和" class="headerlink" title="SUM(): 返回数值列的总和"></a><strong>SUM()</strong>: 返回数值列的总和</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span> (column_name) <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h2 id="4-连接查询"><a href="#4-连接查询" class="headerlink" title="4.连接查询"></a>4.连接查询</h2><h4 id="INNER-JOIN-内连接，返回在两张表中具有匹配值的记录"><a href="#INNER-JOIN-内连接，返回在两张表中具有匹配值的记录" class="headerlink" title="INNER JOIN: 内连接，返回在两张表中具有匹配值的记录"></a><strong>INNER JOIN</strong>: 内连接，返回在两张表中具有匹配值的记录</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_names <span class="keyword">FROM</span> table1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.column_name<span class="operator">=</span>table2.column_name;</span><br><span class="line"><span class="keyword">SELECT</span> table1.column_name1, table2.column_name2, table3.column_name3 <span class="keyword">FROM</span> ((table1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> relationship) <span class="keyword">INNER</span> <span class="keyword">JOIN</span> table3 <span class="keyword">ON</span> relationship);</span><br></pre></td></tr></table></figure><h4 id="LEFT-OUTER-JOIN-左外连接，返回左表（table1）中的所有记录，以及右表中的匹配记录（table2）"><a href="#LEFT-OUTER-JOIN-左外连接，返回左表（table1）中的所有记录，以及右表中的匹配记录（table2）" class="headerlink" title="LEFT (OUTER) JOIN: 左外连接，返回左表（table1）中的所有记录，以及右表中的匹配记录（table2）"></a><strong>LEFT (OUTER) JOIN</strong>: 左外连接，返回左表（table1）中的所有记录，以及右表中的匹配记录（table2）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_names <span class="keyword">FROM</span> table1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.column_name<span class="operator">=</span>table2.column_name;</span><br></pre></td></tr></table></figure><h4 id="RIGHT-OUTER-JOIN-右外连接，返回右表（table2）中的所有记录，以及左表（table1）中匹配的记录"><a href="#RIGHT-OUTER-JOIN-右外连接，返回右表（table2）中的所有记录，以及左表（table1）中匹配的记录" class="headerlink" title="RIGHT (OUTER) JOIN: 右外连接，返回右表（table2）中的所有记录，以及左表（table1）中匹配的记录"></a><strong>RIGHT (OUTER) JOIN</strong>: 右外连接，返回右表（table2）中的所有记录，以及左表（table1）中匹配的记录</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_names <span class="keyword">FROM</span> table1 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.column_name<span class="operator">=</span>table2.column_name;</span><br></pre></td></tr></table></figure><h4 id="FULL-OUTER-JOIN-全外连接，全连接是左右外连接的并集-连接表包含被连接的表的所有记录-如果缺少匹配的记录-以-NULL-填充。"><a href="#FULL-OUTER-JOIN-全外连接，全连接是左右外连接的并集-连接表包含被连接的表的所有记录-如果缺少匹配的记录-以-NULL-填充。" class="headerlink" title="FULL (OUTER) JOIN: 全外连接，全连接是左右外连接的并集. 连接表包含被连接的表的所有记录, 如果缺少匹配的记录, 以 NULL 填充。"></a><strong>FULL (OUTER) JOIN</strong>: 全外连接，全连接是左右外连接的并集. 连接表包含被连接的表的所有记录, 如果缺少匹配的记录, 以 NULL 填充。</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_names <span class="keyword">FROM</span> table1 <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.column_name<span class="operator">=</span>table2.column_name;</span><br></pre></td></tr></table></figure><h4 id="Self-JOIN-自连接，表自身连接"><a href="#Self-JOIN-自连接，表自身连接" class="headerlink" title="Self JOIN: 自连接，表自身连接"></a><strong>Self JOIN</strong>: 自连接，表自身连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_names <span class="keyword">FROM</span> table1 T1, table1 T2 <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h2 id="5-视图查询"><a href="#5-视图查询" class="headerlink" title="5.视图查询"></a>5.视图查询</h2><h4 id="CREATE-创建视图"><a href="#CREATE-创建视图" class="headerlink" title="CREATE: 创建视图"></a><strong>CREATE</strong>: 创建视图</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span> <span class="keyword">SELECT</span> column1, column2 <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h4 id="SELECT-检索视图"><a href="#SELECT-检索视图" class="headerlink" title="SELECT: 检索视图"></a><strong>SELECT</strong>: 检索视图</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> view_name;</span><br></pre></td></tr></table></figure><h4 id="DROP-删除视图"><a href="#DROP-删除视图" class="headerlink" title="DROP: 删除视图"></a><strong>DROP</strong>: 删除视图</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name;</span><br></pre></td></tr></table></figure><h2 id="6-修改表的查询"><a href="#6-修改表的查询" class="headerlink" title="6.修改表的查询"></a>6.修改表的查询</h2><h4 id="ADD-添加字段"><a href="#ADD-添加字段" class="headerlink" title="ADD: 添加字段"></a><strong>ADD</strong>: 添加字段</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> column_name column_definition;</span><br></pre></td></tr></table></figure><h4 id="MODIFY-修改字段数据类型"><a href="#MODIFY-修改字段数据类型" class="headerlink" title="MODIFY: 修改字段数据类型"></a><strong>MODIFY</strong>: 修改字段数据类型</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name MODIFY column_name column_type;</span><br></pre></td></tr></table></figure><h4 id="DROP-删除字段"><a href="#DROP-删除字段" class="headerlink" title="DROP: 删除字段"></a><strong>DROP</strong>: 删除字段</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql主从同步集群搭建</title>
      <link href="/2023/06/06/%E6%95%B0%E6%8D%AE%E5%BA%93/sql/mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/06/06/%E6%95%B0%E6%8D%AE%E5%BA%93/sql/mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>docker方式搭建</p><h1 id="主服务器配置"><a href="#主服务器配置" class="headerlink" title="主服务器配置"></a>主服务器配置</h1><h2 id="1-创建并启动mysql主服务器"><a href="#1-创建并启动mysql主服务器" class="headerlink" title="1.创建并启动mysql主服务器"></a>1.创建并启动mysql主服务器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -v /home/yuluo/shardingsphere-env/master/conf:/etc/mysql/conf.d -v /home/yuluo/shardingsphere-env/master/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name yuluo-mysql-master mysql:8.0.29</span><br><span class="line">eg:</span><br><span class="line">docker run -d -p 3306:3306 -v F:\db\mysql\conf:/etc/mysql/conf.d -v F:\db\mysql\data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql-master mysql:8.0.29</span><br></pre></td></tr></table></figure><h2 id="2-创建mysql主服务器配置文件"><a href="#2-创建mysql主服务器配置文件" class="headerlink" title="2.创建mysql主服务器配置文件"></a>2.创建mysql主服务器配置文件</h2><p>my.cnf</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 服务器唯一id，默认值1</span><br><span class="line">server-id=1</span><br><span class="line"># 设置日志格式，默认值ROW</span><br><span class="line">binlog_format=STATEMENT</span><br><span class="line"># 二进制日志名，默认binlog</span><br><span class="line"># log-bin=binlog</span><br><span class="line"># 设置需要复制的数据库，默认复制全部数据库</span><br><span class="line">#binlog-do-db=mytestdb</span><br><span class="line"># 设置不需要复制的数据库</span><br><span class="line">#binlog-ignore-db=mysql</span><br><span class="line">#binlog-ignore-db=infomation_schema</span><br></pre></td></tr></table></figure><h2 id="3-测试连接"><a href="#3-测试连接" class="headerlink" title="3.测试连接"></a>3.测试连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入容器：env LANG=C.UTF-8 避免容器中显示中文乱码</span><br><span class="line">docker exec -it mysql-master env LANG=C.UTF-8 /bin/bash</span><br><span class="line">#进入容器内的mysql命令行</span><br><span class="line">mysql -uroot -p123456</span><br><span class="line">#修改默认密码校验方式</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h2 id="4-主节点创建slave用户"><a href="#4-主节点创建slave用户" class="headerlink" title="4.主节点创建slave用户"></a>4.主节点创建slave用户</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user &#x27;lds_slave&#x27;@&#x27;%&#x27;;</span><br><span class="line"># 设置密码</span><br><span class="line">alter user &#x27;lds_slave&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br><span class="line"># 授予复制权限</span><br><span class="line">grant replication slave on *.* to &#x27;lds_slave&#x27;@&#x27;%&#x27;;</span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="5-在主机中查询master的状态"><a href="#5-在主机中查询master的状态" class="headerlink" title="5.在主机中查询master的状态"></a>5.在主机中查询master的状态</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">记录File和Position的值</span><br><span class="line"> File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+---------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| binlog.000002 |     1345 |              |                  |                   |</span><br><span class="line">+---------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure><h1 id="从服务器配置"><a href="#从服务器配置" class="headerlink" title="从服务器配置"></a>从服务器配置</h1><h2 id="1-启动从服务器"><a href="#1-启动从服务器" class="headerlink" title="1.启动从服务器"></a>1.启动从服务器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -v /home/yuluo/shardingsphere-env/master/conf:/etc/mysql/conf.d -v /home/yuluo/shardingsphere-env/master/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name yuluo-mysql-master mysql:8.0.29</span><br><span class="line">eg:</span><br><span class="line">docker run -d -p 3307:3306 -v F:\db\mysql_slave\conf:/etc/mysql/conf.d -v F:\db\mysql_slave\data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql-slave1 mysql:8.0.29</span><br></pre></td></tr></table></figure><h2 id="2-从服务器配置"><a href="#2-从服务器配置" class="headerlink" title="2.从服务器配置"></a>2.从服务器配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id</span><br><span class="line">server-id=2</span><br><span class="line"># 中继日志名，默认xxxxxxxxxxxx-relay-bin</span><br><span class="line">#relay-log=relay-bin</span><br></pre></td></tr></table></figure><h2 id="3-测试连接-1"><a href="#3-测试连接-1" class="headerlink" title="3.测试连接"></a>3.测试连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入容器：env LANG=C.UTF-8 避免容器中显示中文乱码</span><br><span class="line">docker exec -it mysql-slave1 env LANG=C.UTF-8 /bin/bash</span><br><span class="line">#进入容器内的mysql命令行</span><br><span class="line">mysql -uroot -p123456</span><br><span class="line">#修改默认密码校验方式</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h2 id="4-在从机中配置主从关系"><a href="#4-在从机中配置主从关系" class="headerlink" title="4.在从机中配置主从关系"></a>4.在从机中配置主从关系</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;192.168.28.23&#x27;,master_user=&#x27;lds_slave&#x27;,master_password=&#x27;123456&#x27;,master_port=3306,master_log_file=&#x27;binlog.000002&#x27;,master_log_pos=1345;</span><br></pre></td></tr></table></figure><h2 id="5-启动从机的复制功能"><a href="#5-启动从机的复制功能" class="headerlink" title="5.启动从机的复制功能"></a>5.启动从机的复制功能</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start slave</span><br><span class="line"># 查看状态(不需要分号)</span><br><span class="line">show slave status\G</span><br><span class="line">slave_io_running</span><br><span class="line"></span><br><span class="line">下边两个都是Yes搭建成功</span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><h1 id="从服务器配置2"><a href="#从服务器配置2" class="headerlink" title="从服务器配置2"></a>从服务器配置2</h1><h2 id="1-创建并启动从服务器2"><a href="#1-创建并启动从服务器2" class="headerlink" title="1.创建并启动从服务器2"></a>1.创建并启动从服务器2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -v /home/yuluo/shardingsphere-env/master/conf:/etc/mysql/conf.d -v /home/yuluo/shardingsphere-env/master/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name yuluo-mysql-master mysql:8.0.29</span><br><span class="line">eg:</span><br><span class="line">docker run -d -p 3308:3306 -v F:\db\mysql_slave2\conf:/etc/mysql/conf.d -v F:\db\mysql_slave2\data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql-slave2 mysql:8.0.29</span><br></pre></td></tr></table></figure><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id</span><br><span class="line">server-id=3</span><br><span class="line"># 中继日志名，默认xxxxxxxxxxxx-relay-bin</span><br><span class="line">#relay-log=relay-bin</span><br></pre></td></tr></table></figure><h2 id="3-配置主从关系"><a href="#3-配置主从关系" class="headerlink" title="3.配置主从关系"></a>3.配置主从关系</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;192.168.28.23&#x27;,master_user=&#x27;lds_slave&#x27;,master_password=&#x27;123456&#x27;,master_port=3306,master_log_file=&#x27;binlog.000002&#x27;,master_log_pos=1345;</span><br></pre></td></tr></table></figure><h2 id="4-启动从机的复制功能"><a href="#4-启动从机的复制功能" class="headerlink" title="4.启动从机的复制功能"></a>4.启动从机的复制功能</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start slave</span><br><span class="line"># 查看状态(不需要分号)</span><br><span class="line">show slave status\G</span><br><span class="line">slave_io_running</span><br><span class="line"></span><br><span class="line">下边两个都是Yes搭建成功</span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><h2 id="5-同步测试"><a href="#5-同步测试" class="headerlink" title="5.同步测试"></a>5.同步测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master中</span><br><span class="line">CREATE DATABASE db_user;</span><br><span class="line"></span><br><span class="line">USE db_user;</span><br><span class="line"></span><br><span class="line">CREATE TABLE t_user (</span><br><span class="line"> id BIGINT AUTO_INCREMENT,</span><br><span class="line"> uname VARCHAR(30),</span><br><span class="line"> PRIMARY KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO t_user(uname) VALUES(&#x27;zhang3&#x27;);</span><br><span class="line">INSERT INTO t_user(uname) VALUES(@@hostname);</span><br><span class="line"># 在从机中查看</span><br></pre></td></tr></table></figure><h1 id="停止和重置"><a href="#停止和重置" class="headerlink" title="停止和重置"></a>停止和重置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 在从机上执行。功能说明：停止I/O 线程和SQL线程的操作。</span><br><span class="line">stop slave; </span><br><span class="line"></span><br><span class="line">-- 在从机上执行。功能说明：用于删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件。</span><br><span class="line">reset slave;</span><br><span class="line"></span><br><span class="line">-- 在主机上执行。功能说明：删除所有的binglog日志文件，并将日志索引文件清空，重新开始所有新的日志文件。</span><br><span class="line">-- 用于第一次进行搭建主从库时，进行主库binlog初始化工作；</span><br><span class="line">reset master;</span><br></pre></td></tr></table></figure><h1 id="常见问题错误解决"><a href="#常见问题错误解决" class="headerlink" title="常见问题错误解决"></a>常见问题错误解决</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 在从机停止slave</span><br><span class="line">stop slave; </span><br><span class="line"></span><br><span class="line">-- 在主机查看mater状态</span><br><span class="line">SHOW MASTER STATUS;</span><br><span class="line">-- 在主机刷新日志</span><br><span class="line">FLUSH LOGS;</span><br><span class="line">-- 再次在主机查看mater状态（会发现File和Position发生了变化）</span><br><span class="line">SHOW MASTER STATUS;</span><br><span class="line">-- 修改从机连接主机的SQL，并重新连接即可</span><br><span class="line"></span><br><span class="line">-- 查看server_id </span><br><span class="line">show variables like &#x27;server_id&#x27;;</span><br><span class="line"></span><br><span class="line">-- 如果为1 查看配置文件是否映射进去</span><br><span class="line"></span><br><span class="line">重启容器问题解决</span><br><span class="line">启动docker容器后提示 WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">C:\Users\administrator&gt;mysql -h 192.168.100.201 -P 3306 -u root -p</span><br><span class="line">#修改配置文件：</span><br><span class="line">vim /usr/lib/sysctl.d/00-system.conf</span><br><span class="line">#追加</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">#接着重启网络</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda的一些操作</title>
      <link href="/2023/01/01/%E5%85%A5%E9%97%A8/conda%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/01/01/%E5%85%A5%E9%97%A8/conda%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>获取版本号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda --version</span><br><span class="line">conda -V</span><br></pre></td></tr></table></figure><p>获取帮助</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda --help</span><br><span class="line">conda -h</span><br><span class="line">eg：conda update --help</span><br></pre></td></tr></table></figure><p>创建环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --name your_env_name</span><br><span class="line">eg:conda create --name your_env_name python=2.7</span><br></pre></td></tr></table></figure><p>创建包含某些包的环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --name your_env_name numpy scipy</span><br></pre></td></tr></table></figure><p>创建指定python版本下包含某些包的环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --name your_env_name python=3.5 numpy scipy</span><br></pre></td></tr></table></figure><p>列举当前所有环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda info --envs</span><br><span class="line">conda env list</span><br></pre></td></tr></table></figure><p>切换到某个环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate your_env_name</span><br></pre></td></tr></table></figure><p>退出某个环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><p>复制某个环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --name new_env_name --clone old_env_name </span><br></pre></td></tr></table></figure><p>删除某个环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda remove --name your_env_name --all</span><br></pre></td></tr></table></figure><p>分享环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 导出</span><br><span class="line">conda env export &gt; environment.yml</span><br><span class="line"># 导入</span><br><span class="line">conda env create -f environment.yml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python相见恨晚的库</title>
      <link href="/2023/01/01/%E5%85%A5%E9%97%A8/python%E7%9B%B8%E8%A7%81%E6%81%A8%E6%99%9A%E7%9A%84%E5%BA%93/"/>
      <url>/2023/01/01/%E5%85%A5%E9%97%A8/python%E7%9B%B8%E8%A7%81%E6%81%A8%E6%99%9A%E7%9A%84%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="数据来源于awesome-python项目"><a href="#数据来源于awesome-python项目" class="headerlink" title="数据来源于awesome-python项目"></a><a href="https://github.com/jobbole/awesome-python-cn">数据来源于awesome-python项目</a></h1><h2 id="Python-相见恨晚的库"><a href="#Python-相见恨晚的库" class="headerlink" title="Python 相见恨晚的库"></a>Python 相见恨晚的库</h2><h3 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h3><p>管理 Python 版本和环境的工具</p><ul><li><a href="https://github.com/qw3rtman/p">p</a>：非常简单的交互式 Python 版本管理工具。</li><li><a href="https://github.com/yyuu/pyenv">pyenv</a>：简单的 Python 版本管理工具。</li><li><a href="https://github.com/sashahart/vex">Vex</a>：可以在虚拟环境中执行命令。</li><li><a href="https://pypi.python.org/pypi/virtualenv">virtualenv</a>：创建独立 Python 环境的工具。</li><li><a href="https://pypi.python.org/pypi/virtualenvwrapper">virtualenvwrapper</a>：virtualenv 的一组扩展。</li><li><a href="http://www.buildout.org/en/latest">buildout</a>：在隔离环境初始化后使用声明性配置管理。</li></ul><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><p>管理包和依赖的工具。</p><ul><li><a href="https://pip.pypa.io/">pip</a>：Python 包和依赖关系管理工具。</li><li><a href="https://github.com/nvie/pip-tools">pip-tools</a>：保证 Python 包依赖关系更新的一组工具。</li><li><a href="https://pypi.org/">PyPI</a>：Python 正式的第三方包软件存储库。</li><li><a href="https://github.com/pypa/pipenv">pipenv</a>：Python 官方推荐的新一代包管理工具。</li><li><a href="https://poetry.eustace.io/">poetry</a>：可完全取代 setup.py 的包管理工具。</li><li><a href="https://github.com/conda/conda/">conda</a>：跨平台的 Python 二进制包管理工具。</li><li><a href="http://clarete.li/curdling/">Curdling</a>：管理 Python 包的命令行工具。</li><li><a href="http://pythonwheels.com/">wheel</a>：Python 分发的新标准，意在取代 eggs。</li></ul><h3 id="包仓库"><a href="#包仓库" class="headerlink" title="包仓库"></a>包仓库</h3><p>本地 PyPI 仓库服务和代理。</p><ul><li><a href="https://github.com/pypa/warehouse">warehouse</a>：下一代 PyPI。</li><li><a href="https://bitbucket.org/pypa/bandersnatch">bandersnatch</a>：PyPA 提供的 PyPI 镜像工具。</li><li><a href="http://doc.devpi.net/">devpi</a>：PyPI 服务和打包&#x2F;测试&#x2F;分发工具。</li><li><a href="https://github.com/mvantellingen/localshop">localshop</a>：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。</li></ul><h3 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h3><p>打包为可执行文件以便分发</p><ul><li><a href="https://github.com/pyinstaller/pyinstaller">PyInstaller</a>：将 Python 程序转换成独立的执行文件（跨平台）。</li><li><a href="https://cx-freeze.readthedocs.io/en/latest/index.html">cx_Freeze</a>：将python程序转换为带有一个动态链接库的可执行文件。</li><li><a href="http://dh-virtualenv.readthedocs.org/">dh-virtualenv</a>：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。</li><li><a href="http://nuitka.net/">Nuitka</a>：将脚本、模块、包编译成可执行文件或扩展模块。</li><li><a href="http://pythonhosted.org/py2app/">py2app</a>：将 Python 脚本变为独立软件包（Mac OS X）。</li><li><a href="http://www.py2exe.org/">py2exe</a>：将 Python 脚本变为独立软件包（Windows）。</li><li><a href="http://pynsist.readthedocs.org/">pynsist</a>：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python 本身。</li><li><a href="https://github.com/dashingsoft/pyarmor">pyarmor</a>：一个用于加密 python 脚本的工具，也可以将加密后的脚本绑定到固件上，或设置已加密脚本的有效期。</li><li><a href="https://github.com/linkedin/shiv">shiv</a>：一个命令行工具，可用于构建完全独立的 zip 应用（PEP 441 所描述的那种），同时包含了所有的依赖项。</li></ul><h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>将源码编译成软件。</p><ul><li><a href="http://www.buildout.org/">buildout</a>：一个构建系统，从多个组件来创建，组装和部署应用。</li><li><a href="http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html">BitBake</a>：针对嵌入式 Linux 的类似 make 的构建工具。</li><li><a href="https://code.google.com/archive/p/fabricate">fabricate</a>：对任何语言自动找到依赖关系的构建工具。</li><li><a href="https://github.com/platformio/platformio">PlatformIO</a>：多平台命令行构建工具。</li><li><a href="https://github.com/pybuilder/pybuilder">PyBuilder</a>：纯 Python 实现的持续化构建工具。</li><li><a href="http://www.scons.org/">SCons</a>：软件构建工具。</li></ul><h3 id="交互式解析器"><a href="#交互式解析器" class="headerlink" title="交互式解析器"></a>交互式解析器</h3><p>交互式 Python 解析器。</p><ul><li><a href="https://github.com/ipython/ipython">IPython</a>：功能丰富的工具，非常有效的使用交互式 Python。</li><li><a href="https://github.com/bpython/bpython">bpython</a>：界面丰富的 Python 解析器。</li><li><a href="https://github.com/jonathanslenders/ptpython">ptpython</a>：高级交互式 Python 解析器， 构建于 <a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a> 之上。</li><li><a href="https://jupyter.org/">Jupyter Notebook (IPython)</a>：一个能够让你最大限度地以交互式方式使用 Python 的丰富工具包。</li><li><a href="https://github.com/markusschanta/awesome-jupyter">awesome-jupyter</a></li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。</p><ul><li><a href="https://github.com/Tinche/aiofiles">aiofiles</a>：基于 asyncio，提供文件异步操作。</li><li><a href="https://docs.python.org/2/library/imghdr.html">imghdr</a>：（Python 标准库）检测图片类型。</li><li><a href="https://docs.python.org/2/library/mimetypes.html">mimetypes</a>：（Python 标准库）将文件名映射为 MIME 类型。</li><li><a href="https://github.com/jaraco/path.py">path.py</a>：对 os.path 进行封装的模块。</li><li><a href="https://pathlib.readthedocs.org/en/pep428/">pathlib</a>：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。</li><li><a href="https://github.com/ahupp/python-magic">python-magic</a>：文件类型检测的第三方库 libmagic 的 Python 接口。</li><li><a href="https://github.com/mikeorr/Unipath">Unipath</a>：用面向对象的方式操作文件和目录。</li><li><a href="https://github.com/gorakhargosh/watchdog">watchdog</a>：管理文件系统事件的 API 和 shell 工具。</li><li><a href="https://github.com/pyfilesystem/pyfilesystem2">PyFilesystem2</a>：Python 的文件系统抽象层。</li></ul><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p>操作日期和时间的类库。</p><ul><li><a href="https://github.com/crsmithdev/arrow">arrow</a>：更好的 Python 日期时间操作类库。</li><li><a href="https://github.com/KoffeinFlummi/Chronyk">Chronyk</a>：Python 3 的类库，用于解析手写格式的时间和日期。</li><li><a href="https://pypi.python.org/pypi/python-dateutil">dateutil</a>：Python datetime 模块的扩展。</li><li><a href="https://github.com/myusuf3/delorean/">delorean</a>：解决 Python 中有关日期处理的棘手问题的库。</li><li><a href="https://github.com/kennethreitz/maya">maya</a>：人性化的时间处理库。</li><li><a href="https://github.com/sdispater/pendulum">pendulum</a>：一个比 arrow 更具有明确的，可预测的行为的时间操作库。</li><li><a href="https://github.com/shinux/PyTime">PyTime</a>：一个简单易用的 Python 模块，用于通过字符串来操作日期&#x2F;时间。</li><li><a href="https://launchpad.net/pytz">pytz</a>：现代以及历史版本的世界时区定义。将时区数据库引入 Python。</li><li><a href="https://github.com/dirn/When.py">when.py</a>：提供用户友好的函数来帮助用户进行常用的日期和时间操作。</li><li><a href="https://github.com/dateutil/dateutil">dateutil</a>：Python 标准包 <a href="https://docs.python.org/3/library/datetime.html">datetime</a> 的扩展。</li><li><a href="https://github.com/zachwill/moment">moment</a>：一个处理日期&#x2F;时间的库，灵感来自 <a href="http://momentjs.com/">Moment.js</a>。</li><li><a href="https://launchpad.net/pytz">pytz</a>：支持跨平台时区计算，并将 <a href="https://en.wikipedia.org/wiki/Tz_database">tz database</a> 引入 Python。</li></ul><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p>用于解析和操作文本的库。</p><ul><li>通用<ul><li><a href="https://github.com/chardet/chardet">chardet</a>：字符编码检测器，兼容 Python 2 和 Python 3。</li><li><a href="https://docs.python.org/2/library/difflib.html">difflib</a>：(Python 标准库)帮助我们进行差异化比较。</li><li><a href="https://github.com/LuminosoInsight/python-ftfy">ftfy</a>：让 Unicode 文本更完整更连贯。</li><li><a href="https://github.com/seatgeek/thefuzz">thefuzz</a>：模糊字符串匹配。</li><li><a href="https://github.com/ztane/python-Levenshtein/">Levenshtein</a>：快速计算编辑距离以及字符串的相似度。</li><li><a href="https://github.com/vinta/pangu.py">pangu.py</a>：在中日韩语字符和数字字母之间添加空格。</li><li><a href="https://github.com/mozillazg/python-pinyin">pypinyin</a>：汉字拼音转换工具 Python 版。</li><li><a href="https://github.com/stochastic-technologies/shortuuid">shortuuid</a>：一个生成器库，用以生成简洁的，明白的，URL 安全的 UUID。</li><li><a href="https://github.com/simplejson/simplejson">simplejson</a>：Python 的 JSON 编码、解码器。</li><li><a href="https://pypi.python.org/pypi/Unidecode">unidecode</a>：Unicode 文本的 ASCII 转换形式 。</li><li><a href="https://github.com/moskytw/uniout">uniout</a>：打印可读的字符，而不是转义的字符串。</li><li><a href="https://github.com/lxneng/xpinyin">xpinyin</a>：一个用于把汉字转换为拼音的库。</li><li><a href="https://github.com/pwaller/pyfiglet">pyfiglet</a>：figlet 的 Python 实现。</li><li><a href="https://github.com/vi3k6i5/flashtext">flashtext</a>：一个高效的文本查找替换库。</li><li><a href="https://github.com/orsinium/textdistance">textdistance</a>：支持 30 多种算法来计算序列之间的距离。</li></ul></li><li>Slug 化<ul><li><a href="https://github.com/dimka665/awesome-slugify">awesome-slugify</a>：一个 Python slug 化库，可以保持 Unicode。</li><li><a href="https://github.com/un33k/python-slugify">python-slugify</a>：Python slug 化库，可以把 unicode 转化为 ASCII。</li><li><a href="https://github.com/mozilla/unicode-slugify">unicode-slugify</a>：一个 slug 工具，可以生成 unicode slugs ,需要依赖 Django 。</li></ul></li><li>解析器<ul><li><a href="https://github.com/daviddrysdale/python-phonenumbers">phonenumbers</a>：解析，格式化，储存，验证电话号码。</li><li><a href="https://github.com/daviddrysdale/python-phonenumbers">python-phonenumbers</a>：解析，格式化，存储，校验国际电话号码。</li><li><a href="http://www.dabeaz.com/ply/">PLY</a>：lex 和 yacc 解析工具的 Python 实现。</li><li><a href="http://pygments.org/">Pygments</a>：通用语法高亮工具。</li><li><a href="http://pyparsing.wikispaces.com/">pyparsing</a>：生成通用解析器的框架。</li><li><a href="https://github.com/derek73/python-nameparser">python-nameparser</a>：把一个人名分解为几个独立的部分。</li><li><a href="https://github.com/selwin/python-user-agents">python-user-agents</a>：浏览器 user agent 解析器。</li><li><a href="https://sqlparse.readthedocs.org/en/latest/">sqlparse</a>：一个无验证的 SQL 解析器。</li></ul></li></ul><h3 id="特殊文本格式处理"><a href="#特殊文本格式处理" class="headerlink" title="特殊文本格式处理"></a>特殊文本格式处理</h3><p>一些用来解析和操作特殊文本格式的库。</p><ul><li>通用<ul><li><a href="https://github.com/kennethreitz/tablib">tablib</a>：一个用来处理中表格数据的模块。</li></ul></li><li>Office<ul><li><a href="https://github.com/brianray/mm">Marmir</a>：把输入的 Python 数据结构转换为电子表单。</li><li><a href="https://openpyxl.readthedocs.org/en/latest/">openpyxl</a>：一个用来读写 Excel 2010 xlsx&#x2F;xlsm&#x2F;xltx&#x2F;xltm 文件的库。</li><li><a href="https://github.com/pyexcel/pyexcel">pyexcel</a>：一个提供统一 API，用来读写，操作 Excel 文件的库。</li><li><a href="https://github.com/python-openxml/python-docx">python-docx</a>：读取，查询以及修改 Microsoft Word 2007&#x2F;2008 docx 文件。</li><li><a href="https://github.com/scanny/python-pptx">python-pptx</a>：可用于创建和修改 ppt 文件的 Python 库。</li><li><a href="http://relatorio.tryton.org/">relatorio</a>：模板化 OpenDocument 文件。</li><li><a href="https://github.com/dagwieers/unoconv">unoconv</a>：在 LibreOffice&#x2F;OpenOffice 支持的任意文件格式之间进行转换。</li><li><a href="https://xlsxwriter.readthedocs.org/en/latest/">XlsxWriter</a>：一个用于创建 Excel .xlsx 文件的 Python 模块。</li><li><a href="http://xlwings.org/">xlwings</a>：一个使得在 Excel 中方便调用 Python 的库（反之亦然），基于 BSD 协议。</li><li><a href="https://github.com/python-excel/xlwt">xlwt</a> &#x2F; <a href="https://github.com/python-excel/xlrd">xlrd</a>：读写 Excel 文件的数据和格式信息。</li><li><a href="https://github.com/elapouya/python-docx-template">docxtpl</a>：通过 jinja2 模版编辑 docx 文档。</li></ul></li><li>PDF<ul><li><a href="https://github.com/euske/pdfminer">PDFMiner</a>：一个用于从 PDF 文档中抽取信息的工具。</li><li><a href="https://github.com/mstamy2/PyPDF2">PyPDF2</a>：一个可以分割，合并和转换 PDF 页面的库。</li><li><a href="http://www.reportlab.com/opensource/">ReportLab</a>：快速创建富文本 PDF 文档。</li></ul></li><li>Markdown<ul><li><a href="https://github.com/lepture/mistune">Mistune</a>：快速并且功能齐全的纯 Python 实现的 Markdown 解析器。</li><li><a href="https://github.com/waylan/Python-Markdown">Python-Markdown</a>：John Gruber’s Markdown 的 Python 版实现。</li><li><a href="https://github.com/trentm/python-markdown2">Python-Markdown2</a>：纯 Python 实现的 Markdown 解析器，比 Python-Markdown 更快，更准确，可扩展。</li></ul></li><li>YAML<ul><li><a href="http://pyyaml.org/">PyYAML</a>：Python 版本的 YAML 解析器。</li></ul></li><li>CSV<ul><li><a href="https://github.com/wireservice/csvkit">csvkit</a>：用于转换和操作 CSV 的工具。</li></ul></li><li>Archive<ul><li><a href="https://github.com/mitsuhiko/unp">unp</a>：一个用来方便解包归档文件的命令行工具。</li></ul></li></ul><h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><p>用来处理人类语言的库。</p><ul><li><a href="http://www.nltk.org/">NLTK</a>：一个先进的平台，用以构建处理人类语言数据的 Python 程序。</li><li><a href="https://github.com/piskvorky/gensim">gensim</a>：人性化的话题建模库。</li><li><a href="https://github.com/fxsjy/jieba">jieba</a>：中文分词工具。</li><li><a href="https://github.com/saffsd/langid.py">langid.py</a>：独立的语言识别系统。</li><li><a href="http://www.clips.ua.ac.be/pattern">Pattern</a>：Python 网络信息挖掘模块。</li><li><a href="https://github.com/isnowfy/snownlp">SnowNLP</a>：一个用来处理中文文本的库。</li><li><a href="http://textblob.readthedocs.org/en/latest/">TextBlob</a>：为进行普通自然语言处理任务提供一致的 API。</li><li><a href="https://github.com/2shou/TextGrocery">TextGrocery</a>：一简单高效的短文本分类工具，基于 LibLinear 和 Jieba。</li><li><a href="https://github.com/thunlp/THULAC-Python">thulac</a>：清华大学自然语言处理与社会人文计算实验室研制推出的一套中文词法分析工具包。</li><li><a href="https://github.com/aboSamoor/polyglot">polyglot</a>：支持数百种语言的自然语言处理管道。</li><li><a href="https://github.com/facebookresearch/pytext">pytext</a>：基于 PyTouch 的自然语言模型框架。</li><li><a href="https://github.com/PetrochukM/PyTorch-NLP">PyTorch-NLP</a>：一个支持快速深度学习 NLP 原型研究的工具包。</li><li><a href="https://spacy.io/">spacy</a>：Python 和 Cython 中用于工业级自然语言处理的库。</li><li><a href="https://github.com/stanfordnlp/stanza">Stanza</a>：斯坦福 NLP 集团的官方 Python 库，支持 60 多种语言。</li><li><a href="https://github.com/fighting41love/funNLP">funNLP</a>：中文自然语言处理的工具和数据集。</li><li><a href="https://github.com/lancopku/pkuseg-python">pkuseg-python</a>：一个支持对不同领域进行中文分词的工具箱。</li></ul><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>用以生成项目文档的库。</p><ul><li><a href="http://www.sphinx-doc.org/en/latest/">Sphinx</a>：Python 文档生成器。</li><li><a href="https://github.com/yoloseem/awesome-sphinxdoc">awesome-sphinxdoc</a></li><li><a href="http://www.mkdocs.org/">MkDocs</a>：对 Markdown 友好的文档生成器。</li><li><a href="https://github.com/BurntSushi/pdoc">pdoc</a>：一个可以替换 Epydoc 的库，可以自动生成 Python 库的 API 文档。</li><li><a href="https://github.com/pycco-docs/pycco">Pycco</a>：文学编程（literate-programming）风格的文档生成器。</li><li><a href="https://github.com/rtfd/readthedocs.org/">readthedocs</a>：一个基于 Sphinx&#x2F;MkDocs 的在线文档托管系统，对开源项目免费开放使用。</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>用来保存和解析配置的库。</p><ul><li><a href="https://www.red-dove.com/config-doc/">config</a>：<a href="https://docs.python.org/2/library/logging.html">logging</a> 模块作者写的分级配置模块。</li><li><a href="http://www.voidspace.org.uk/python/configobj.html">ConfigObj</a>：INI 文件解析器，带验证功能。</li><li><a href="https://docs.python.org/2/library/configparser.html">ConfigParser</a>：(Python 标准库) INI 文件解析器。</li><li><a href="http://profig.readthedocs.org/en/default/">profig</a>：通过多种格式进行配置，具有数值转换功能。</li><li><a href="https://github.com/henriquebastos/python-decouple">python-decouple</a>：将设置和代码完全隔离。</li><li><a href="https://github.com/facebookresearch/hydra">hydra</a>：一个优雅地配置复杂应用程序的框架。</li></ul><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>用于创建命令行程序的库。</p><ul><li>命令行程序开发<ul><li><a href="http://builtoncement.com/">cement</a>：Python 的命令行程序框架。</li><li><a href="http://click.pocoo.org/dev/">click</a>：一个通过组合的方式来创建精美命令行界面的包。</li><li><a href="http://docs.openstack.org/developer/cliff/">cliff</a>：一个用于创建命令行程序的框架，可以创建具有多层命令的命令行程序。</li><li><a href="https://github.com/kennethreitz/clint">clint</a>：Python 命令行程序工具。</li><li><a href="http://docopt.org/">docopt</a>：Python 风格的命令行参数解析器。</li><li><a href="https://github.com/chriskiehl/Gooey">Gooey</a>：一条命令，将命令行程序变成一个 GUI 程序。</li><li><a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a>：一个用于构建强大的交互式命令行程序的库。</li><li><a href="https://github.com/google/python-fire">python-fire</a>：Google 出品的一个基于 Python 类的构建命令行界面的库。</li><li><a href="https://github.com/Russell91/pythonpy/wiki">Pythonpy</a>：在命令行中直接执行任何 Python 指令。</li></ul></li><li>终端呈现方式</li><li><a href="https://github.com/peterbrittain/asciimatics">asciimatics</a>：跨平台，全屏终端包（即鼠标&#x2F;键盘输入和彩色，定位文本输出），完整的复杂动画和特殊效果的高级 API。</li><li><a href="https://github.com/rsalmei/alive-progress">alive-progress</a>：一款新的进度条，具有实时吞吐量信息以及非常酷的动画。</li><li><a href="https://pypi.python.org/pypi/colorama">colorama</a>：跨平台彩色终端文本。</li><li><a href="https://github.com/glamp/bashplotlib">bashplotlib</a>：在终端中进行基本绘图。</li><li><a href="https://github.com/willmcgugan/rich">rich</a>：一个在终端中支持富文本和格式美化的 Python 库， 同时提供了<code>RichHandler</code>日志处理程序。</li><li><a href="https://github.com/tqdm/tqdm">tqdm</a>：一个可在循环和命令行中使用的快速、可扩展的进度条。</li><li>生产力工具<ul><li><a href="https://github.com/aws/aws-cli">aws-cli</a>：Amazon Web Services 的通用命令行界面。</li><li><a href="https://github.com/brettcannon/caniusepython3">caniusepython3</a>：判断是哪个项目妨碍你你移植到 Python 3。</li><li><a href="https://github.com/audreyr/cookiecutter">cookiecutter</a>：从 cookiecutters（项目模板）创建项目的一个命令行工具。</li><li><a href="https://github.com/sloria/doitlive">doitlive</a>：一个用来在终端中进行现场演示的工具。</li><li><a href="https://github.com/giampaolo/pyftpdlib">pyftpdlib</a>：一个速度极快和可扩展的 Python FTP 服务库。</li><li><a href="https://github.com/gleitz/howdoi">howdoi</a>：通过命令行获取即时的编程问题解答。</li><li><a href="https://github.com/facebook/PathPicker">PathPicker</a>：从 bash 输出中选出文件。</li><li><a href="https://github.com/mooz/percol">percol</a>：向 UNIX shell 传统管道概念中加入交互式选择功能。</li><li><a href="https://github.com/nvbn/thefuck">thefuck</a>：修正你之前的命令行指令。</li><li><a href="https://github.com/timofurrer/try">try</a>：一个极其简单的命令行工具，用来试用 python 库。</li><li><a href="https://github.com/pykong/copier">copier</a>：用于呈现项目模板的库和命令行实用程序。</li><li><a href="https://github.com/pyinvoke/invoke#readme">Invoke</a>：用于管理面向 shell 的子进程，同时支持将可执行的 Python 代码组织成命令行可调用的状态。</li><li><a href="https://github.com/tony/tmuxp">tmuxp</a>： <a href="https://github.com/tmux/tmux">tmux</a> 会话管理器。</li></ul></li><li>高级 CLI</li><li><a href="https://github.com/jkbrzt/httpie">httpie</a>：一个命令行 HTTP 客户端，cURL 的替代品，易用性更好。</li><li><a href="https://github.com/laixintao/iredis">iredis</a>：支持自动补全和高亮显示的 redis 命令行工具。</li><li><a href="https://github.com/cloudnativelabs/kube-shell">kube-shell</a>：K8S 命令行集成的 shell 工具。</li><li><a href="https://github.com/dbcli/litecli">litecli</a>：支持自动补全和语法高亮的 SQLite 命令行工具。</li><li><a href="https://github.com/dbcli/mycli">mycli</a>：支持自动补全和语法高亮的 MySQL 命令行客户端</li><li><a href="https://github.com/dbcli/pgcli">pgcli</a>：支持自动补全和语法高亮的 Postgres 命令行工具。</li><li><a href="https://github.com/donnemartin/saws">SAWS</a>：一个加强版的 AWS 命令行。</li><li>Shell</li><li><a href="https://github.com/xonsh/xonsh/">xonsh</a>：一种基于 python 的跨平台，面向 unix 的 shell 语言和命令提示符。</li></ul><h3 id="下载器"><a href="#下载器" class="headerlink" title="下载器"></a>下载器</h3><p>用来进行下载的库.</p><ul><li><a href="https://github.com/s3tools/s3cmd">s3cmd</a>：一个用来管理 Amazon S3 和 CloudFront 的命令行工具。</li><li><a href="https://github.com/bloomreach/s4cmd">s4cmd</a>：超级 S3 命令行工具，性能更加强劲。</li><li><a href="https://www.soimort.org/you-get/">you-get</a>：一个 YouTube&#x2F;Youku&#x2F;Niconico 视频下载器，使用 Python 3 编写。</li><li><a href="http://rg3.github.io/youtube-dl/">youtube-dl</a>：一个小巧的命令行程序，用来下载 YouTube 视频。</li><li><a href="https://github.com/jindaxiang/akshare">akshare</a>：为方便人使用而创建的金融数据接口库。</li></ul><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><p>用来操作图像的库.</p><ul><li><a href="http://pillow.readthedocs.org/en/latest/">pillow</a>：Pillow 是一个更加易用版的 <a href="http://www.pythonware.com/products/pil/">PIL</a>。</li><li><a href="https://github.com/rossgoodwin/hmap">hmap</a>：图像直方图映射。</li><li><a href="https://sourceforge.net/projects/imgseek/">imgSeek</a>：一个使用视觉相似性搜索一组图片集合的项目。</li><li><a href="https://github.com/hhatto/nude.py">nude.py</a>：裸体检测。</li><li><a href="https://github.com/WhyNotHugo/python-barcode">python-barcode</a>：不借助其他库在 Python 程序中生成条形码。</li><li><a href="https://github.com/ajkumar25/pygram">pygram</a>：类似 Instagram 的图像滤镜。</li><li><a href="https://github.com/lincolnloop/python-qrcode">python-qrcode</a>：一个纯 Python 实现的二维码生成器。</li><li><a href="https://github.com/fogleman/Quads">Quads</a>：基于四叉树的计算机艺术。</li><li><a href="http://scikit-image.org/">scikit-image</a>：一个用于（科学）图像处理的 Python 库。</li><li><a href="https://github.com/thumbor/thumbor">thumbor</a>：一个小型图像服务，具有剪裁，尺寸重设和翻转功能。</li><li><a href="https://github.com/dahlia/wand">wand</a>：<a href="http://www.imagemagick.org/script/magick-wand.php">MagickWand </a>的 Python 绑定。MagickWand 是 ImageMagick 的 C API 。</li><li><a href="https://github.com/ageitgey/face_recognition">face_recognition</a>：简单易用的 Python 人脸识别库。</li><li><a href="https://github.com/daboth/pagan">pagan</a>：基于输入和哈希的复古风图标（头像）生成工具。</li><li><a href="https://github.com/pymatting/pymatting">PyMatting</a>：支持 alpha matting 的库。</li><li><a href="https://github.com/dylanaraps/pywal">pywal</a>：由图像生成配色方案的工具。</li><li><a href="https://github.com/libvips/pyvips">pyvips</a>：低内存消耗且快速的图像处理库。</li></ul><h3 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h3><p>光学字符识别库。</p><ul><li><a href="https://github.com/PaddlePaddle/PaddleOCR">paddleocr</a>: 除光学字符识别外还引入了表格识别。</li><li><a href="https://gitlab.gnome.org/World/OpenPaperwork/pyocr">pyocr</a>：Tesseract 和 Cuneiform 的一个封装。</li><li><a href="https://github.com/madmaze/pytesseract">pytesseract</a>：<a href="https://github.com/tesseract-ocr">Google Tesseract OCR</a> 的一个封装。</li></ul><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><p>用来操作音频的库</p><ul><li><a href="https://github.com/danilobellini/audiolazy">audiolazy</a>：Python 的数字信号处理包。</li><li><a href="https://github.com/beetbox/audioread">audioread</a>：交叉库 (GStreamer + Core Audio + MAD + FFmpeg) 音频解码。</li><li><a href="http://beets.io/">beets</a>：一个音乐库管理工具及 <a href="https://musicbrainz.org/">MusicBrainz</a> 标签添加工具。</li><li><a href="https://github.com/worldveil/dejavu">dejavu</a>：音频指纹提取和识别。</li><li><a href="https://github.com/StreetVoice/django-elastic-transcoder">django-elastic-transcoder</a>：Django + <a href="http://aws.amazon.com/elastictranscoder/">Amazon Elastic Transcoder</a>。</li><li><a href="http://eyed3.nicfit.net/">eyeD3</a>：一个用来操作音频文件的工具，具体来讲就是包含 ID3 元信息的 MP3 文件。</li><li><a href="http://nedbatchelder.com/code/modules/id3reader.py">id3reader</a>：一个用来读取 MP3 元数据的 Python 模块。</li><li><a href="https://github.com/globocom/m3u8">m3u8</a>：一个用来解析 m3u8 文件的模块。</li><li><a href="https://bitbucket.org/lazka/mutagen">mutagen</a>：一个用来处理音频元数据的 Python 模块。</li><li><a href="https://github.com/jiaaro/pydub">pydub</a>：通过简单、简洁的高层接口来操作音频文件。</li><li><a href="https://github.com/echonest/pyechonest">pyechonest</a>：<a href="http://developer.echonest.com/">Echo Nest</a> API 的 Python 客户端。</li><li><a href="http://scikits.appspot.com/talkbox">talkbox</a>：一个用来处理演讲&#x2F;信号的 Python 库。</li><li><a href="https://github.com/Parisson/TimeSide">TimeSide</a>：开源 web 音频处理框架。</li><li><a href="https://github.com/devsnd/tinytag">tinytag</a>：一个用来读取 MP3, OGG, FLAC 以及 Wave 文件音乐元数据的库。</li><li><a href="http://bspaans.github.io/python-mingus/">mingus</a>：一个高级音乐理论和曲谱包，支持 MIDI 文件和回放功能。</li><li><a href="https://github.com/keunwoochoi/kapre">kapre</a>：Keras 音频处理器。</li><li><a href="https://github.com/librosa/librosa">librosa</a>：音频音乐分析 Python 库。</li><li><a href="https://github.com/sergree/matchering">matchering</a>：用于音频母带制作的库。</li><li><a href="https://github.com/tyiannak/pyAudioAnalysis">pyAudioAnalysis</a>：音频特征提取，分类，分段和应用。</li><li><a href="https://github.com/beetbox/beets">beets</a>：一个音乐库管理器和 <a href="https://musicbrainz.org/">MusicBrainz</a> 标记器。</li></ul><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>用来操作视频和 GIF 的库。</p><ul><li><a href="http://zulko.github.io/moviepy/">moviepy</a>：一个用来进行基于脚本的视频编辑模块，适用于多种格式，包括动图 GIFs。</li><li><a href="https://github.com/aizvorski/scikit-video">scikit-video</a>：SciPy 视频处理常用程序。</li><li><a href="https://github.com/abhiTronix/vidgear">vidgear</a>： 强大的多线程视频处理框架。</li></ul><h3 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h3><p>地理编码地址以及用来处理经纬度的库。</p><ul><li><a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/">GeoDjango</a>：世界级地理图形 web 框架。</li><li><a href="https://github.com/maxmind/geoip-api-python">GeoIP</a>：MaxMind GeoIP Legacy 数据库的 Python API。</li><li><a href="https://github.com/frewsxcv/python-geojson">geojson</a>：GeoJSON 的 Python 绑定及工具。</li><li><a href="https://github.com/geopy/geopy">geopy</a>：Python 地址编码工具箱。</li><li><a href="https://github.com/maxmind/GeoIP2-python">GeoIP2</a>：GeoIP2 Webservice 客户端与数据库 Python API。</li><li><a href="https://github.com/SmileyChris/django-countries">django-countries</a>：一个 Django 应用程序，提供用于表格的国家选择功能，国旗图标静态文件以及模型中的国家字段。</li><li><a href="https://github.com/appliedsec/pygeoip">pygeoip</a>：Python GeoIP 接口。</li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>使用 HTTP 的库。</p><ul><li><a href="https://github.com/aio-libs/aiohttp">aiohttp</a>：基于 asyncio 的异步 HTTP 网络库。</li><li><a href="http://docs.python-requests.org/en/latest/">requests</a>：人性化的 HTTP 请求库。</li><li><a href="https://github.com/kennethreitz/grequests">grequests</a>：requests 库 + gevent ，用于异步 HTTP 请求。</li><li><a href="https://github.com/jcgregorio/httplib2">httplib2</a>：全面的 HTTP 客户端库。</li><li><a href="https://github.com/twisted/treq">treq</a>：类似 requests 的 Python API 构建于 Twisted HTTP 客户端之上。</li><li><a href="https://github.com/shazow/urllib3">urllib3</a>：一个具有线程安全连接池，支持文件 post，清晰友好的 HTTP 库。</li><li><a href="https://github.com/encode/httpx">httpx</a>：下一代 Python HTTP 客户端。</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Python 实现的数据库。</p><ul><li><a href="https://pythonhosted.org/pickleDB/">pickleDB</a>：一个简单，轻量级键值储存数据库。</li><li><a href="https://www.pipelinedb.com/">PipelineDB</a>：流式 SQL 数据库。</li><li><a href="https://github.com/msiemens/tinydb">TinyDB</a>：一个微型的，面向文档型数据库。</li><li><a href="http://www.zodb.org/en/latest/">ZODB</a>：一个 Python 原生对象数据库。一个键值和对象图数据库。</li></ul><h3 id="数据库驱动"><a href="#数据库驱动" class="headerlink" title="数据库驱动"></a>数据库驱动</h3><p>用来连接和操作数据库的库。</p><ul><li>MySQL：<a href="http://shlomi-noach.github.io/awesome-mysql/">awesome-mysql</a> 系列<ul><li><a href="https://github.com/aio-libs/aiomysql">aiomysql</a>：基于 asyncio 的异步 MySQL 数据库操作库。</li><li><a href="https://sourceforge.net/projects/mysql-python/">mysql-python</a>：Python 的 MySQL 数据库连接器。</li><li>ysqlclient：<a href="https://github.com/PyMySQL/mysqlclient-python">mysql-python</a> 分支，支持 Python 3。</li><li><a href="https://pythonhosted.org/oursql/">oursql</a>：一个更好的 MySQL 连接器，支持原生预编译指令和 BLOBs。</li><li><a href="https://github.com/PyMySQL/PyMySQL">PyMySQL</a>：纯 Python MySQL 驱动，兼容 mysql-python。</li></ul></li><li>PostgreSQL<ul><li><a href="http://initd.org/psycopg/">psycopg2</a>：Python 中最流行的 PostgreSQL 适配器。</li><li><a href="https://github.com/gmr/queries">queries</a>：psycopg2 库的封装，用来和 PostgreSQL 进行交互。</li><li><a href="http://txpostgres.readthedocs.org/en/latest/">txpostgres</a>：基于 Twisted 的异步 PostgreSQL 驱动。</li></ul></li><li>其他关系型数据库<ul><li><a href="http://rogerbinns.github.io/apsw/">apsw</a>：另一个 Python SQLite 封装。</li><li>dataset：在数据库中存储 Python 字典</li><li><a href="http://www.pymssql.org/en/latest/">pymssql</a>：一个简单的 Microsoft SQL Server 数据库接口。</li></ul></li><li>NoSQL 数据库<ul><li><a href="https://github.com/jonathanslenders/asyncio-redis">asyncio-redis</a>：基于 asyncio 的 redis 客户端 (PEP 3156)。</li><li><a href="https://github.com/datastax/python-driver">cassandra-python-driver</a>：Cassandra 的 Python 驱动。</li><li><a href="http://happybase.readthedocs.org/en/latest/">HappyBase</a>：一个为 Apache HBase 设计的，对开发者友好的库。</li><li><a href="https://plyvel.readthedocs.org/en/latest/">Plyvel</a>：一个快速且功能丰富的 LevelDB 的 Python 接口。</li><li><a href="http://py2neo.org/2.0/">py2neo</a>：Neo4j restful 接口的 Python 封装客户端。</li><li><a href="https://github.com/pycassa/pycassa">pycassa</a>：Cassandra 的 Python Thrift 驱动。</li><li><a href="https://docs.mongodb.org/ecosystem/drivers/python/">PyMongo</a>：MongoDB 的官方 Python 客户端。</li><li><a href="https://github.com/andymccurdy/redis-py">redis-py</a>：Redis 的 Python 客户端。</li><li><a href="https://github.com/driftx/Telephus">telephus</a>：基于 Twisted 的 Cassandra 客户端。</li><li><a href="https://github.com/deldotdr/txRedis">txRedis</a>：基于 Twisted 的 Redis 客户端。</li><li><a href="https://github.com/dpkp/kafka-python">kafka-python</a>：Apache Kafka Python 客户端。</li></ul></li><li>异步客户端</li><li><a href="https://github.com/mongodb/motor">motor</a>：支持 MongoDB 的异步 Python 驱动程序。</li></ul><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>实现对象关系映射或数据映射技术的库。</p><ul><li>关系型数据库<ul><li><a href="https://docs.djangoproject.com/en/dev/topics/db/models/">Django Models</a>：Django 的一部分。</li><li><a href="http://www.sqlalchemy.org/">SQLAlchemy</a>：Python SQL 工具以及对象关系映射工具。</li></ul></li><li><a href="https://github.com/dahlia/awesome-sqlalchemy">awesome-sqlalchemy</a><ul><li><a href="https://github.com/dahlia/awesome-sqlalchemy">awesome-sqlalchemy</a> 系列</li><li><a href="https://github.com/coleifer/peewee">Peewee</a>：一个小巧，富有表现力的 ORM。</li><li><a href="https://ponyorm.com/">PonyORM</a>：提供面向生成器的 SQL 接口的 ORM。</li><li><a href="https://pypi.python.org/pypi/python-sql">python-sql</a>：编写 Python 风格的 SQL 查询。</li><li><a href="https://github.com/pudo/dataset">dataset</a>：在数据库中存储字典，支持 SQLite，MySQL 和 PostgreSQL。</li><li><a href="https://github.com/sdispater/orator">orator</a>：Orator ORM，提供了一个简单而美观的 ActiveRecord 实现。</li><li><a href="https://github.com/encode/orm">orm</a>：一个异步的 ORM。</li><li><a href="https://github.com/ponyorm/pony/">pony</a>：提供面向生成器的SQL接口的ORM。</li><li><a href="https://github.com/web2py/pydal/">pydal</a>：纯 Python 数据库抽象接口层。</li></ul></li><li>NoSQL 数据库<ul><li><a href="https://github.com/django-nonrel/mongodb-engine">django-mongodb-engine</a>：Django MongoDB 后端。</li><li><a href="https://github.com/jlafon/PynamoDB">PynamoDB</a>：<a href="https://aws.amazon.com/dynamodb/">Amazon DynamoDB</a> 的一个 Python 风格接口。</li><li><a href="https://github.com/mathcamp/flywheel">flywheel</a>：Amazon DynamoDB 的对象映射工具。</li><li><a href="http://mongoengine.org/">MongoEngine</a>：一个 Python 对象文档映射工具，用于 MongoDB。</li><li><a href="https://github.com/stephenmcd/hot-redis">hot-redis</a>：为 Redis 提供 Python 丰富的数据类型。</li><li><a href="https://github.com/kiddouk/redisco">redisco</a>：一个 Python 库，提供可以持续存在在 Redis 中的简单模型和容器。</li></ul></li><li>其他<ul><li><a href="https://github.com/Widdershin/butterdb">butterdb</a>：Google Drive 电子表格的 Python ORM。</li></ul></li></ul><h3 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h3><p>全栈 Web 框架。</p><ul><li><a href="https://www.djangoproject.com/">Django</a>：Python 界最流行的 web 框架。<ul><li><a href="https://github.com/shahraizali/awesome-django">awesome-django(by shahraizali)</a> 系列</li><li><a href="https://github.com/wsvincent/awesome-django">awesome-django(by wsvincent)</a> 系列</li></ul></li><li><a href="http://flask.pocoo.org/">Flask</a>：一个 Python 微型框架。<ul><li><a href="https://github.com/humiaozuzu/awesome-flask">awesome-flask</a> 系列</li></ul></li><li><a href="https://pylonsproject.org/">Pyramid</a>：一个小巧，快速，接地气的开源 Python web 框架。<ul><li><a href="https://github.com/uralbash/awesome-pyramid">awesome-pyramid</a> 系列</li></ul></li><li><a href="http://bottlepy.org/docs/dev/index.html">Bottle</a>：一个快速小巧，轻量级的 WSGI 微型 web 框架。</li><li><a href="http://www.cherrypy.org/">CherryPy</a>：一个极简的 Python web 框架，服从 HTTP&#x2F;1.1 协议且具有 WSGI 线程池。</li><li><a href="http://www.turbogears.org/">TurboGears</a>：一个可以扩展为全栈解决方案的微型框架。</li><li><a href="http://webpy.org/">web.py</a>：一个 Python 的 web 框架，既简单，又强大。</li><li><a href="http://www.web2py.com/">web2py</a>：一个全栈 web 框架和平台，专注于简单易用。</li><li><a href="http://www.tornadoweb.org/en/latest/">Tornado</a>：一个 web 框架和异步网络库。</li><li><a href="https://github.com/channelcat/sanic/">sanic</a>：基于 Python3.5+ 的异步网络框架。</li><li><a href="https://www.starlette.io/">starlette</a>： 一款轻量级，高性能的 ASGI 框架。</li><li><a href="https://github.com/MasoniteFramework/masonite">Masonite</a>：以开发者为中心的现代 Python Web 框架。</li></ul><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>Web socket 相关库。</p><ul><li><a href="https://github.com/crossbario/autobahn-python">autobahn-python</a>：适用于 Twisted 和 asyncio 的 Python WebSocket 和 WAMP。</li><li><a href="https://github.com/django/channels">channels</a>：开发者友好的 Django 异步工具。</li><li><a href="https://github.com/aaugustin/websockets">websockets</a>：一个用于构建 WebSocket 服务器和客户端的库，着重于正确性和简单性。</li></ul><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>允许或拒绝用户访问数据或功能的库。</p><ul><li><a href="https://github.com/neuman/python-carteblanche/">Carteblanche</a>：站在用户和设计者角度开发的一个代码对齐模块，很好地处理了代码导航及权限。</li><li><a href="https://github.com/django-guardian/django-guardian">django-guardian</a>：Django 1.2+ ，实现了单个对象权限。</li><li><a href="https://github.com/dfunckt/django-rules">django-rules</a>：一个小巧但是强大的应用，提供对象级别的权限管理，且不需要使用数据库。</li></ul><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>内容管理系统。</p><ul><li><a href="http://www.odoo.com/">odoo-cms</a>：一个开源的，企业级 CMS，基于 odoo。</li><li><a href="http://www.django-cms.org/en/">django-cms</a>：一个开源的，企业级 CMS，基于 Django。</li><li><a href="http://djedi-cms.org/">djedi-cms</a>：一个轻量级但却非常强大的 Django CMS ，考虑到了插件，内联编辑以及性能。</li><li><a href="http://www.feincms.org/">FeinCMS</a>：基于 Django 构建的最先进的内容管理系统之一。</li><li><a href="http://kotti.pylonsproject.org/">Kotti</a>：一个高级的，Python 范的 web 应用框架，基于 Pyramid 构建。</li><li><a href="http://mezzanine.jupo.org/">Mezzanine</a>：一个强大的，持续的，灵活的内容管理平台。</li><li><a href="http://opps.github.io/opps/">Opps</a>：一个为杂志，报纸网站以及大流量门户网站设计的 CMS 平台，基于 Django。</li><li><a href="https://plone.org/">Plone</a>：一个构建于开源应用服务器 Zope 之上的 CMS。</li><li><a href="https://quintagroup.com/cms/python/quokka">Quokka</a>：灵活，可扩展的小型 CMS，基于 Flask 和 MongoDB。</li><li><a href="https://wagtail.io/">Wagtail</a>：一个 Django 内容管理系统。</li><li><a href="https://wid.gy/">Widgy</a>：最新的 CMS 框架，基于 Django。</li><li><a href="https://github.com/indico/indico">indico</a>：一个功能丰富的事件管理系统，由 @<a href="https://en.wikipedia.org/wiki/CERN">CERN</a> 开发。</li></ul><h3 id="电子商务"><a href="#电子商务" class="headerlink" title="电子商务"></a>电子商务</h3><p>用于电子商务以及支付的框架和库。</p><ul><li><a href="http://oscarcommerce.com/">django-oscar</a>：一个用于 Django 的开源的电子商务框架。</li><li><a href="https://github.com/awesto/django-shop">django-shop</a>：一个基于 Django 的店铺系统。</li><li><a href="https://github.com/stephenmcd/cartridge">Cartridge</a>：一个基于 Mezzanine 构建的购物车应用。</li><li><a href="https://www.shoop.io/en/">shoop</a>：一个基于 Django 的开源电子商务平台。</li><li><a href="https://github.com/lxneng/alipay">alipay</a>：非官方的 Python 支付宝 API。</li><li><a href="https://github.com/agiliq/merchant">merchant</a>：一个可以接收来自多种支付平台支付的 Django 应用。</li><li><a href="https://github.com/carlospalol/money">money</a>：一个货币类库。带有可选的 CLDR 后端本地化格式，提供可扩展的货币兑换解决方案。</li><li><a href="https://github.com/Alir3z4/python-currencies">python-currencies</a>：显示货币格式以及它的数值。</li><li><a href="https://github.com/MicroPyramid/forex-python">forex-python</a>：外汇汇率，比特币价格指数和货币换算。</li><li><a href="http://getsaleor.com/">saleor</a>：一款兼容 Django 的电子商务平台。</li></ul><h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><p>用来开发 RESTful APIs 的库</p><ul><li>Django<ul><li><a href="http://www.django-rest-framework.org/">django-rest-framework</a>：一个强大灵活的工具，用来构建 web API。</li><li><a href="http://tastypieapi.org/">django-tastypie</a>：为 Django 应用开发 API。</li><li><a href="https://github.com/5monkeys/django-formapi">django-formapi</a>：为 Django 的表单验证，创建 JSON APIs 。</li></ul></li><li>Flask<ul><li><a href="http://www.flaskapi.org/">flask-api</a>：为 flask 开发的，可浏览 Web APIs 。</li><li><a href="http://flask-restful.readthedocs.org/en/latest/">flask-restful</a>：为 flask 快速创建 REST APIs 。</li><li><a href="https://flask-restless.readthedocs.org/en/latest/">flask-restless</a>：为 SQLAlchemy 定义的数据库模型创建 RESTful APIs 。</li><li><a href="https://github.com/marselester/flask-api-utils">flask-api-utils</a>：为 Flask 处理 API 表示和验证。</li><li><a href="https://github.com/nicolaiarocci/eve">eve</a>：REST API 框架，由 Flask, MongoDB 等驱动。</li></ul></li><li>Pyramid<ul><li><a href="https://cornice.readthedocs.org/en/latest/">cornice</a>：一个 Pyramid 的 REST 框架 。</li></ul></li><li>与框架无关的<ul><li><a href="http://falconframework.org/">falcon</a>：一个用来建立云 API 和 web app 后端的高性能框架。</li><li><a href="https://github.com/jeffknupp/sandman">sandman</a>：为现存的数据库驱动系统自动创建 REST APIs 。</li><li><a href="http://restless.readthedocs.org/en/latest/">restless</a>：框架无关的 REST 框架 ，基于从 Tastypie 学到的知识。</li><li><a href="https://github.com/vertical-knowledge/ripozo">ripozo</a>：快速创建 REST&#x2F;HATEOAS&#x2F;Hypermedia APIs。</li><li><a href="https://github.com/encode/apistar">apistar</a>：专为Python 3设计的智能 Web API 框架。</li><li><a href="https://github.com/tiangolo/fastapi">fastapi</a>：一个现代，快速，基于标准 Python 类型注解的的 web框架，可使用 Python3.6+ 版本构建 API。</li><li><a href="https://github.com/hugapi/hug">hug</a>：一个为纯净公开的 API 打造的 Python 3 框架。</li><li><a href="https://github.com/jeffknupp/sandman2">sandman2</a>：为数据库驱动的系统自动生成 REST API。</li><li><a href="https://vibora.io/">vibora</a>：快速高效且支持异步的 Web 框架，灵感来源于 Flask。</li></ul></li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>实现验证方案的库。</p><ul><li>OAuth<ul><li><a href="https://github.com/lepture/authlib">authlib</a>：一个强大的Python库，用来构建 OAuth 和 OpenID 服务端。包括：JWS, JWK, JWA, JWT。</li><li><a href="http://peterhudec.github.io/authomatic/">Authomatic</a>：简单但是强大的框架，身份验证&#x2F;授权客户端。</li><li><a href="https://github.com/pennersr/django-allauth">django-allauth</a>：Django 的验证应用。</li><li><a href="https://github.com/evonove/django-oauth-toolkit">django-oauth-toolkit</a>：为 Django 用户准备的 OAuth2。</li><li><a href="https://github.com/caffeinehit/django-oauth2-provider">django-oauth2-provider</a>：为 Django 应用提供 OAuth2 接入。</li><li><a href="https://github.com/lepture/flask-oauthlib">Flask-OAuthlib</a>：OAuth 1.0&#x2F;a, 2.0 客户端实现，供 Flask 使用。</li><li><a href="https://github.com/idan/oauthlib">OAuthLib</a>：一个 OAuth 请求-签名逻辑通用、 完整的实现。</li><li><a href="https://github.com/joestump/python-oauth2">python-oauth2</a>：一个完全测试的抽象接口。用来创建 OAuth 客户端和服务端。</li><li><a href="https://github.com/omab/python-social-auth">python-social-auth</a>：一个设置简单的社会化验证方式。</li><li><a href="https://github.com/litl/rauth">rauth</a>：OAuth 1.0&#x2F;a, 2.0, 和 Ofly 的 Python 库。</li><li><a href="https://github.com/demianbrecht/sanction">sanction</a>：一个超级简单的 OAuth2 客户端实现。</li></ul></li><li>其他<ul><li><a href="https://github.com/jpadilla/pyjwt">PyJWT</a>：JSON Web 令牌草案 01。</li><li><a href="https://github.com/brianloveswords/python-jws">python-jws</a>：JSON Web 签名草案 02 的实现。</li><li><a href="https://github.com/davedoesdev/python-jwt">python-jwt</a>：一个用来生成和验证 JSON Web 令牌的模块。</li><li><a href="https://github.com/mpdavis/python-jose/">python-jose</a>：python 版 JOSE 实现。</li></ul></li></ul><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>模板生成和词法解析的库和工具。</p><ul><li><a href="https://github.com/pallets/jinja">Jinja2</a>：一个现代的，对设计师友好的模板引擎。</li><li><a href="https://chameleon.readthedocs.org/en/latest/">Chameleon</a>：一个 HTML&#x2F;XML 模板引擎。 模仿了 ZPT（Zope Page Templates）, 进行了速度上的优化。</li><li><a href="https://genshi.edgewall.org/">Genshi</a>：Python 模板工具，用以生成 web 感知的结果。</li><li><a href="http://www.makotemplates.org/">Mako</a>：Python 平台的超高速轻量级模板。</li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>处理事件以及任务队列的库。</p><ul><li><a href="http://www.celeryproject.org/">celery</a>：一个异步任务队列&#x2F;作业队列，基于分布式消息传递</li><li><a href="https://github.com/Bogdanp/dramatiq">daramatiq</a>：适用于Python 3的快速可靠的后台任务处理库。</li><li><a href="https://github.com/coleifer/huey">huey</a>：小型多线程任务队列。</li><li><a href="https://github.com/pricingassistant/mrq">mrq</a>：一个 Python 的分布式 worker 任务队列， 使用 Redis 和 gevent。</li><li><a href="http://python-rq.org/">rq</a>：简单的 Python 作业队列。</li><li><a href="https://github.com/rdegges/simpleq">simpleq</a>：一个简单的，可无限扩张的，基于亚马逊 SQS 的队列。</li></ul><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>对数据进行索引和执行搜索查询的库和软件。</p><ul><li><a href="https://github.com/django-haystack/django-haystack">django-haystack</a>：Django 模块化搜索。</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html">elasticsearch-py</a>：Elasticsearch 的官方底层 Python 客户端。</li><li><a href="https://github.com/elastic/elasticsearch-dsl-py">elasticsearch-dsl-py</a>：Elasticsearch 的官方高级 Python 客户端。</li><li><a href="https://github.com/edsu/solrpy">solrpy</a>：<a href="http://lucene.apache.org/solr/">solr</a> 的 Python 客户端。</li><li><a href="https://github.com/django-haystack/pysolr">pysolr</a>：支持 <a href="https://lucene.apache.org/solr/">Apache Solr</a> 的轻量级 Python 装饰器。</li><li><a href="http://whoosh.readthedocs.org/en/latest/">Whoosh</a>：一个快速的纯 Python 搜索引擎库。</li></ul><h3 id="动态消息"><a href="#动态消息" class="headerlink" title="动态消息"></a>动态消息</h3><p>用来创建用户活动的库。</p><ul><li><a href="https://github.com/justquick/django-activity-stream">django-activity-stream</a>：从你的站点行为中生成通用活动信息流。</li><li><a href="https://github.com/tschellenbach/Stream-Framework">Stream-Framework</a>：使用 Cassandra 和 Redis 创建动态消息和通知系统。</li></ul><h3 id="Web-资源管理"><a href="#Web-资源管理" class="headerlink" title="Web 资源管理"></a>Web 资源管理</h3><p>管理、压缩、缩小网站资源的工具。</p><ul><li><a href="https://github.com/django-compressor/django-compressor">django-compressor</a>：将链接和内联的 JavaScript 或 CSS 压缩到一个单独的缓存文件中。</li><li><a href="https://github.com/jazzband/django-pipeline">django-pipeline</a>：Django 的资源包装库。</li><li><a href="http://django-storages.readthedocs.org/en/latest/">django-storages</a>：一个针对 Django 的自定义存储后端的工具集合。</li><li><a href="http://www.fanstatic.org/en/latest/">fanstatic</a>：打包、优化，并且把静态文件依赖作为 Python 的包来提供。</li><li><a href="https://wimleers.com/fileconveyor/">File Conveyor</a>：一个后台驻留的程序，用来发现和同步文件到 CDNs, S3 和 FTP。</li><li><a href="http://flask-assets.readthedocs.org/en/latest/">Flask-Assets</a>：帮你将 web 资源整合到你的 Flask app 中。</li><li><a href="https://github.com/jaysonsantos/jinja-assets-compressor">jinja-assets-compressor</a>：一个 Jinja 扩展，用来编译和压缩你的资源。</li><li><a href="http://webassets.readthedocs.org/en/latest/">webassets</a>：为你的静态资源打包、优化和管理生成独一无二的缓存 URL。</li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存数据的库。</p><ul><li><a href="http://beaker.readthedocs.org/en/latest/">Beaker</a>：一个缓存和会话库，可以用在 web 应用和独立 Python 脚本和应用上。</li><li><a href="https://github.com/django-cache-machine/django-cache-machine">django-cache-machine</a>：Django 模型的自动缓存和失效。</li><li><a href="https://github.com/Suor/django-cacheops">django-cacheops</a>：具有自动颗粒化事件驱动失效功能的 ORM。</li><li><a href="https://github.com/5monkeys/django-viewlet">django-viewlet</a>：渲染模板，同时具有额外的缓存控制功能。</li><li><a href="http://dogpilecache.readthedocs.org/en/latest/">dogpile.cache</a>：dogpile.cache 是 Beaker 的下一代替代品，由同一作者开发。</li><li><a href="https://pypi.python.org/pypi/HermesCache">HermesCache</a>：Python 缓存库，具有基于标签的失效和 dogpile effect 保护功能。</li><li><a href="https://github.com/jmoiron/johnny-cache">johnny-cache</a>：django 应用缓存框架。</li><li><a href="https://github.com/lericson/pylibmc">pylibmc</a>：<a href="http://libmemcached.org/libMemcached.html">libmemcached</a> 接口的 Python 封装。</li><li><a href="http://www.grantjenks.com/docs/diskcache/">python-diskcache</a>：SQLite 和文件支持的缓存后端，具有比 memcached 和 redis 更快的查找速度。</li></ul><h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><p>用来发送和解析电子邮件的库。</p><ul><li><a href="https://github.com/StreetVoice/django-celery-ses">django-celery-ses</a>：带有 AWS SES 和 Celery 的 Django email 后端。</li><li><a href="http://tomekwojcik.github.io/envelopes/">envelopes</a>：供人类使用的电子邮件库。</li><li><a href="https://github.com/mailgun/flanker">flanker</a>：一个 email 地址和 Mime 解析库。</li><li><a href="https://github.com/martinrusev/imbox">imbox</a>：Python IMAP 库。</li><li><a href="https://github.com/kennethreitz/inbox.py">inbox.py</a>：Python SMTP 服务器。</li><li><a href="https://github.com/nylas/sync-engine">inbox</a>：一个开源电子邮件工具箱。</li><li><a href="https://github.com/zedshaw/lamson">lamson</a>：Python 风格的 SMTP 应用服务器。</li><li><a href="https://github.com/WoLpH/mailjet">mailjet</a>：Mailjet API 实现，用来提供批量发送邮件，统计等功能。</li><li><a href="https://github.com/marrow/mailer">marrow.mailer</a>：高性能可扩展邮件分发框架。</li><li><a href="https://github.com/tonioo/modoboa">modoboa</a>：一个邮件托管和管理平台，具有现代的、简约的 Web UI。</li><li><a href="http://www.magiksys.net/pyzmail/">pyzmail</a>：创建，发送和解析电子邮件。</li><li><a href="https://github.com/mailgun/talon">Talon</a>：Mailgun 库，用来抽取信息和签名。</li><li><a href="https://pypi.org/project/yagmail/">yagmail</a>：yagmail是一个GMAIL &#x2F; SMTP客户端，旨在使其尽可能简单地发送电子邮件。</li><li><a href="https://github.com/moggers87/salmon">salmon</a>：一个 Python 邮件服务器。</li><li><a href="https://github.com/marrow/mailer">mailer</a>：一款高性能可扩展的邮件投递框架。</li></ul><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>用来进行国际化的库。</p><ul><li><a href="http://babel.pocoo.org/en/latest/">Babel</a>：一个 Python 的国际化库。</li><li><a href="https://korean.readthedocs.org/en/latest/">Korean</a>：一个韩语词态库。</li><li><a href="https://github.com/ovalhub/pyicu">PyICU</a>：一个封装了 <a href="http://site.icu-project.org/">ICU</a> C++ 库的 Python 扩展。</li></ul><h3 id="URL-处理"><a href="#URL-处理" class="headerlink" title="URL 处理"></a>URL 处理</h3><p>解析 URLs 的库</p><ul><li><a href="https://github.com/gruns/furl">furl</a>：一个让处理 URL 更简单小型 Python 库。</li><li><a href="https://github.com/codeinthehole/purl">purl</a>：一个简单的，不可变的 URL 类，具有简洁的 API 来进行询问和处理。</li><li><a href="https://github.com/ellisonleao/pyshorteners">pyshorteners</a>：一个纯 Python URL 缩短库。</li><li><a href="https://github.com/Alir3z4/python-shorturl">shorturl</a>：生成短小 URL 和类似 bit.ly 短链的 Python 实现。</li><li><a href="https://github.com/sloria/webargs">webargs</a>：一个解析 HTTP 请求参数的库，内置对流行 web 框架的支持，包括 Flask, Django, Bottle, Tornado 和 Pyramid。</li></ul><h3 id="HTML-处理"><a href="#HTML-处理" class="headerlink" title="HTML 处理"></a>HTML 处理</h3><p>处理 HTML 和 XML 的库。</p><ul><li><a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup</a>：以 Python 风格的方式来对 HTML 或 XML 进行迭代，搜索和修改。</li><li><a href="http://bleach.readthedocs.org/en/latest/">bleach</a>：一个基于白名单的 HTML 清理和文本链接库。</li><li><a href="https://pypi.python.org/pypi/cssutils/">cssutils</a>：一个 Python 的 CSS 库。</li><li><a href="https://github.com/html5lib/html5lib-python">html5lib</a>：一个兼容标准的 HTML 文档和片段解析及序列化库。</li><li><a href="http://lxml.de/">lxml</a>：一个非常快速，简单易用，功能齐全的库，用来处理 HTML 和 XML。</li><li><a href="https://github.com/pallets/markupsafe">MarkupSafe</a>：为 Python 实现 XML&#x2F;HTML&#x2F;XHTML 标记安全字符串。</li><li><a href="https://github.com/gawel/pyquery">pyquery</a>：一个解析 HTML 的库，类似 jQuery。</li><li><a href="https://github.com/kennethreitz/requests-html">requests-html</a>：人性化的，Pythonic 的 HTML 解析库。</li><li><a href="https://github.com/stchris/untangle">untangle</a>：将 XML 文档转换为 Python 对象，使其可以方便的访问。</li><li><a href="https://github.com/xhtml2pdf/xhtml2pdf">xhtml2pdf</a>：HTML&#x2F;CSS 转 PDF 工具。</li><li><a href="https://github.com/martinblech/xmltodict">xmltodict</a>：像处理 JSON 一样处理 XML。</li><li><a href="http://weasyprint.org/">WeasyPrint</a>：用于HTML和CSS的可视化呈现引擎，并可以导出为 PDF。</li><li><a href="https://xmldataset.readthedocs.io/en/latest/">xmldataset</a>：简单 XML 解析。</li></ul><p>爬取网络站点的库</p><ul><li><a href="http://scrapy.org/">Scrapy</a>：一个快速高级的屏幕爬取及网页采集框架。</li><li><a href="https://github.com/my8100/scrapydweb">ScrapydWeb</a>：一个用于 Scrapyd 集群管理的全功能 web UI，支持 Scrapy 日志分析和可视化，自动打包，定时器任务和邮件通知等特色功能。</li><li><a href="https://github.com/chineking/cola">cola</a>：一个分布式爬虫框架。</li><li><a href="https://github.com/matiasb/demiurge">Demiurge</a>：基于 PyQuery 的爬虫微型框架。</li><li><a href="http://pythonhosted.org/feedparser/">feedparser</a>：通用 feed 解析器。</li><li><a href="http://grablib.org/">Grab</a>：站点爬取框架。</li><li><a href="https://github.com/hickford/MechanicalSoup">MechanicalSoup</a>：用于自动和网络站点交互的 Python 库。</li><li><a href="https://github.com/scrapinghub/portia">portia</a>：Scrapy 可视化爬取。</li><li><a href="https://github.com/binux/pyspider">pyspider</a>：一个强大的爬虫系统。</li><li><a href="https://github.com/jmcarp/robobrowser">RoboBrowser</a>：一个简单的，Python 风格的库，用来浏览网站，而不需要一个独立安装的浏览器。</li></ul><h3 id="网页内容提取"><a href="#网页内容提取" class="headerlink" title="网页内容提取"></a>网页内容提取</h3><p>用于进行网页内容提取的库。</p><ul><li><a href="https://github.com/vinta/Haul">Haul</a>：一个可以扩展的图像爬取工具。</li><li><a href="https://github.com/Alir3z4/html2text">html2text</a>：将 HTML 转换为 Markdown 格式文本。</li><li><a href="https://github.com/michaelhelmick/lassie">lassie</a>：人性化的网页内容检索库。</li><li><a href="https://github.com/coleifer/micawber">micawber</a>：一个小型网页内容提取库，用来从 URLs 提取富内容。</li><li><a href="https://github.com/codelucas/newspaper">newspaper</a>：使用 Python 进行新闻提取，文章提取以及内容策展。</li><li><a href="https://github.com/erikriver/opengraph">opengraph</a>：一个用来解析开放内容协议(Open Graph Protocol)的 Python 模块。</li><li><a href="https://github.com/grangier/python-goose">python-goose</a>：HTML 内容&#x2F;文章提取器(python2)。</li><li><a href="https://github.com/goose3/goose3">goose3</a>：HTML 内容&#x2F;文章提取器(python3)。</li><li><a href="https://github.com/buriy/python-readability">python-readability</a>：arc90 公司 readability 工具的 Python 高速端口。</li><li><a href="https://github.com/Alir3z4/python-sanitize">sanitize</a>：为杂乱的数据世界带来调理性。</li><li><a href="https://github.com/miso-belica/sumy">sumy</a>：一个为文本文件和 HTML 页面进行自动摘要的模块。</li><li><a href="https://github.com/deanmalmgren/textract">textract</a>：从任何格式的文档中提取文本，Word，PowerPoint，PDFs 等等。</li></ul><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>进行表单操作的库。</p><ul><li><a href="http://deform.readthedocs.org/en/latest/">Deform</a>：Python HTML 表单生成库，受到了 formish 表单生成库的启发。</li><li><a href="https://github.com/dyve/django-bootstrap3">django-bootstrap3</a>：集成了 Bootstrap 3 的 Django。</li><li><a href="https://github.com/zostera/django-bootstrap4">django-bootstrap4</a>：集成了 Bootstrap 4 的 Django。</li><li><a href="http://django-crispy-forms.readthedocs.org/en/latest/">django-crispy-forms</a>：一个 Django 应用，他可以让你以一种非常优雅且 DRY (Don’t repeat yourself) 的方式来创建美观的表单。</li><li><a href="https://github.com/WiserTogether/django-remote-forms">django-remote-forms</a>：一个平台独立的 Django 表单序列化工具。</li><li><a href="http://wtforms.readthedocs.org/en/latest/">WTForms</a>：一个灵活的表单验证和呈现库。</li><li><a href="http://wtforms-json.readthedocs.org/en/latest/">WTForms-JSON</a>：一个 WTForms 扩展，用来处理 JSON 数据。</li></ul><h3 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h3><p>数据验证库。多用于表单验证。</p><ul><li><a href="http://docs.python-cerberus.org/en/stable/">Cerberus</a>：一个映射验证器（mappings-validator）。支持多种规则，提供归一化功能，可以方便地定制为 Python 风格的 schema 定义。</li><li><a href="http://docs.pylonsproject.org/projects/colander/en/latest/">colander</a>：一个用于对从 XML, JSON，HTML 表单获取的数据或其他同样简单的序列化数据进行验证和反序列化的系统。</li><li><a href="https://github.com/ambitioninc/kmatch">kmatch</a>：一种用于匹配&#x2F;验证&#x2F;筛选 Python 字典的语言。</li><li><a href="https://github.com/keleshev/schema">schema</a>：一个用于对 Python 数据结构进行验证的库。</li><li><a href="https://github.com/schematics/schematics">Schematics</a>：数据结构验证。</li><li><a href="https://github.com/podio/valideer">valideer</a>：轻量级可扩展的数据验证和适配库。</li><li><a href="https://github.com/alecthomas/voluptuous">voluptuous</a>：一个 Python 数据验证库。主要是为了验证传入 Python 的 JSON，YAML 等数据。</li><li><a href="https://github.com/Julian/jsonschema">jsonschema</a>：<a href="http://json-schema.org/">JSON Schema</a> 的 python 实现，用于 JSON 数据的验证。</li></ul><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>复杂数据类型序列化相关库。</p><ul><li><a href="https://github.com/marshmallow-code/marshmallow">marshmallow</a>：一个轻量级的库，用于将复杂对象与简单 Python 数据类型相互转换。</li><li><a href="https://github.com/TkTech/pysimdjson">pysimdjson</a>：与 Python 绑定的 <a href="https://github.com/lemire/simdjson">simdjson</a> 。</li><li><a href="https://github.com/python-rapidjson/python-rapidjson">python-rapidjson</a>： <a href="https://github.com/Tencent/rapidjson">RapidJSON</a> 的 Python 封装。</li><li><a href="https://github.com/esnme/ultrajson">ultrajson</a>：使用 Python 绑定的，用 C 编写的快速 JSON 解码器和编码器。</li></ul><h3 id="反垃圾技术"><a href="#反垃圾技术" class="headerlink" title="反垃圾技术"></a>反垃圾技术</h3><p>帮助你和电子垃圾进行战斗的库。</p><ul><li><a href="https://github.com/mbi/django-simple-captcha">django-simple-captcha</a>：一个简单、高度可定制的 Django 应用，可以为任何 Django 表单添加验证码。</li><li><a href="https://github.com/moqada/django-simple-spam-blocker">django-simple-spam-blocker</a>：一个用于 Django 的简单的电子垃圾屏蔽工具。</li></ul><h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><p>用来进行标记的库。</p><ul><li><a href="https://github.com/alex/django-taggit">django-taggit</a>：简单的 Django 标记工具。</li></ul><h3 id="管理面板"><a href="#管理面板" class="headerlink" title="管理面板"></a>管理面板</h3><p>管理界面库。</p><ul><li><a href="https://github.com/ajenti/ajenti">Ajenti</a>：一个你的服务器值得拥有的管理面板。</li><li><a href="http://djangosuit.com/">django-suit</a>：Django 管理界面的一个替代品（仅对于非商业用途是免费的）。</li><li><a href="https://github.com/sshwsfc/django-xadmin">django-xadmin</a>：Django admin 的一个替代品，具有很多不错的功能。</li><li><a href="https://github.com/flask-admin/flask-admin">flask-admin</a>：一个用于 Flask 的简单可扩展的管理界面框架。</li><li><a href="https://github.com/mher/flower">flower</a>：一个对 Celery 集群进行实时监控和提供 web 管理界面的工具。</li><li><a href="http://grappelliproject.com/">Grappelli</a>：Django 管理界面的一个漂亮的皮肤。</li><li><a href="https://github.com/wooey/wooey">Wooey</a>：一个 Django 应用，可以为 Python 脚本创建 web 用户界面。</li><li><a href="https://grappelliproject.com/">django-grappelli</a>：拥有绚丽外观的 Django Admin 界面。</li><li><a href="https://github.com/geex-arts/django-jet">django-jet</a>：具有改进功能的现代响应式 Django 管理界面模板。</li><li><a href="https://github.com/jet-admin/jet-bridge">jet-bridge</a>：管理面板框架，适用于任何具有良好 UI 的应用（例如 Django）。</li></ul><h3 id="Serverless-框架"><a href="#Serverless-框架" class="headerlink" title="Serverless 框架"></a>Serverless 框架</h3><p>使用 Python 开发 Serverless 模型相关的库。</p><ul><li><a href="https://github.com/nficano/python-lambda">python-lambda</a> ：在 AWS Lambda 开发和部署 Python 代码的工具包。</li><li><a href="https://github.com/Miserlou/Zappa">Zappa</a>：在 AWS Lambda 和 API Gateway 部署 WSGI 应用的工具。</li></ul><h3 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h3><p>静态站点生成器是一个软件，它把文本和模板作为输入，然后输出 HTML 文件。</p><ul><li><a href="http://blog.getpelican.com/">Pelican</a>：使用 Markdown 或 ReST 来处理内容， Jinja 2 来制作主题。支持 DVCS, Disqus.。AGPL 许可。</li><li><a href="https://github.com/koenbok/Cactus/">Cactus</a>：为设计师设计的静态站点生成器。</li><li><a href="http://hyde.github.io/">Hyde</a>：基于 Jinja2 的静态站点生成器。</li><li><a href="https://www.getnikola.com/">Nikola</a>：一个静态网站和博客生成器。</li><li><a href="http://tinkerer.me/">Tinkerer</a>：Tinkerer 是一个博客引擎&#x2F;静态站点生成器，由 Sphinx 驱动。</li><li><a href="https://www.getlektor.com/">Lektor</a>：一个简单易用的静态 CMS 和博客引擎。</li><li><a href="https://github.com/sunainapai/makesite">makesite</a>：简单轻量的站点&#x2F;博客生成器（小于 130 行代码）。</li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>操作系统进程启动及通信库。</p><ul><li><a href="https://github.com/kennethreitz/envoy">envoy</a>：比 Python <a href="https://docs.python.org/2/library/subprocess.html">subprocess</a> 模块更人性化。</li><li><a href="http://sarge.readthedocs.org/en/latest/">sarge</a>：另一 种 subprocess 模块的封装。</li><li><a href="https://github.com/amoffat/sh">sh</a>：一个完备的 subprocess 替代库。</li><li><a href="https://github.com/amitt001/delegator.py">delegator.py</a>：人性化的 <a href="https://docs.python.org/3/library/subprocess.html">Subprocesses</a> 2.0 版本。</li></ul><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>用以进行并发和并行操作的库。</p><ul><li><a href="https://docs.python.org/2/library/multiprocessing.html">multiprocessing</a>：(Python 标准库) 基于进程的“线程”接口。</li><li><a href="https://docs.python.org/2/library/threading.html">threading</a>：(Python 标准库)更高层的线程接口。</li><li><a href="http://eventlet.net/">eventlet</a>：支持 WSGI 的异步框架。</li><li><a href="http://www.gevent.org/">gevent</a>：一个基于协程的 Python 网络库，使用 <a href="https://github.com/python-greenlet/greenlet">greenlet</a>。</li><li><a href="https://github.com/madisonmay/Tomorrow">Tomorrow</a>：用于产生异步代码的神奇的装饰器语法实现。</li><li><a href="https://github.com/MagicStack/uvloop">uvloop</a>：在 libuv 之上超快速实现 asyncio 事件循环。</li><li><a href="https://docs.python.org/3/library/concurrent.futures.html">concurrent.futures</a>：(Python 标准库) 异步执行可调用对象的高级接口。</li><li><a href="http://www.gevent.org/">gevent</a>：使用 <a href="https://github.com/python-greenlet/greenlet">greenlet</a> 且基于协程的 Python 网络库。</li><li><a href="https://github.com/soravux/scoop">scoop</a>：支持在 Python 中进行可伸缩并行操作。</li></ul><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>用于网络编程的库。</p><ul><li><a href="https://docs.python.org/3/library/asyncio.html">asyncio</a>：(Python 标准库) 异步 I&#x2F;O，事件循环，协程以及任务。</li><li><a href="https://github.com/python-trio/trio">trio</a>：异步并发和 I&#x2F;O 友好的库。</li><li><a href="https://twistedmatrix.com/trac/">Twisted</a>：一个事件驱动的网络引擎。</li><li><a href="https://github.com/quantmind/pulsar">pulsar</a>：事件驱动的并发框架。</li><li><a href="https://github.com/dieseldev/diesel">diesel</a>：基于 Greenlet 的事件 I&#x2F;O 框架。</li><li><a href="http://zeromq.github.io/pyzmq/">pyzmq</a>：一个 ZeroMQ 消息库的 Python 封装。</li><li><a href="https://github.com/gaojiuli/toapi">Toapi</a>：一个轻巧，简单，快速的 Flask 库，致力于为所有网站提供 API 服务。</li><li><a href="https://github.com/smira/txZMQ">txZMQ</a>：基于 Twisted 的 ZeroMQ 消息库的 Python 封装。</li></ul><h3 id="WebSocket-1"><a href="#WebSocket-1" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>帮助使用 WebSocket 的库。</p><ul><li><a href="https://github.com/crossbario/autobahn-python">AutobahnPython</a>：给 Python、使用的 WebSocket &amp; WAMP 基于 Twisted 和 <a href="https://docs.python.org/3/library/asyncio.html">asyncio</a>。</li><li><a href="https://github.com/crossbario/crossbar/">Crossbar</a>：开源统一应用路由(Websocket &amp; WAMP for Python on Autobahn)。</li><li><a href="https://github.com/stephenmcd/django-socketio">django-socketio</a>：给 Django 用的 WebSockets。</li><li><a href="https://github.com/Lawouach/WebSocket-for-Python">WebSocket-for-Python</a>：为 Python2&#x2F;3 以及 PyPy 编写的 WebSocket 客户端和服务器库。</li></ul><h3 id="WSGI-服务器"><a href="#WSGI-服务器" class="headerlink" title="WSGI 服务器"></a>WSGI 服务器</h3><p>兼容 WSGI 的 web 服务器</p><ul><li><a href="https://pypi.python.org/pypi/gunicorn">gunicorn</a>：Pre-forked, 部分是由 C 语言编写的。</li><li><a href="https://uwsgi-docs.readthedocs.org/en/latest/">uwsgi</a>：uwsgi 项目的目的是开发一组全栈工具，用来建立托管服务，由 C 语言编写。</li><li><a href="https://pypi.python.org/pypi/bjoern">bjoern</a>：异步，非常快速，由 C 语言编写。</li><li><a href="http://www.fapws.org/">fapws3</a>：异步 (仅对于网络端)，由 C 语言编写。</li><li><a href="https://pypi.python.org/pypi/meinheld">meinheld</a>：异步，部分是由 C 语言编写的。</li><li><a href="https://github.com/hivesolutions/netius">netius</a>：异步，非常快速。</li><li><a href="http://pythonpaste.org/">paste</a>：多线程，稳定，久经考验。</li><li><a href="https://pypi.python.org/pypi/rocket">rocket</a>：多线程。</li><li><a href="https://waitress.readthedocs.org/en/latest/">waitress</a>：多线程，是它驱动着 Pyramid 框架。</li><li><a href="http://werkzeug.pocoo.org/">Werkzeug</a>：一个 WSGI 工具库，驱动着 Flask，而且可以很方便大嵌入到你的项目中去。</li></ul><h3 id="ASGI-服务器"><a href="#ASGI-服务器" class="headerlink" title="ASGI 服务器"></a>ASGI 服务器</h3><p>兼容 ASGI 的 web 服务器。</p><ul><li><a href="https://github.com/django/daphne">daphne</a>：用于 ASGI 和 ASGI-HTTP 的，支持 HTTP，HTTP2 和 WebSocket 协议的服务器。</li><li><a href="https://github.com/encode/uvicorn">uvicorn</a>：使用 uvloop 和 httptools 实现的闪电般快速的 ASGI 服务器。</li></ul><h3 id="RPC-服务器"><a href="#RPC-服务器" class="headerlink" title="RPC 服务器"></a>RPC 服务器</h3><p>兼容 RPC 的服务器。</p><ul><li><a href="https://github.com/joshmarshall/jsonrpclib/">SimpleJSONRPCServer</a>：这个库是 JSON-RPC 规范的一个实现。</li><li><a href="https://docs.python.org/2/library/simplexmlrpcserver.html">SimpleXMLRPCServer</a>：(Python 标准库) 简单的 XML-RPC 服务器实现，单线程。</li><li><a href="https://github.com/0rpc/zerorpc-python">zeroRPC</a>：zerorpc 是一个灵活的 RPC 实现，基于 <a href="http://zeromq.org/">ZeroMQ</a> 和 <a href="http://msgpack.org/">MessagePack</a>。</li><li><a href="https://github.com/tomerfiliba/rpyc">RPyC</a> (Remote Python Call)：适用于 Python 的透明且对称的RPC库。</li></ul><h3 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h3><ul><li><a href="https://cryptography.io/en/latest/">cryptography</a>：这个软件包意在提供密码学基本内容和方法提供给 Python 开发者。</li><li><a href="https://github.com/davidaurelio/hashids-python">hashids</a>：在 Python 中实现 <a href="http://hashids.org/">hashids</a> 。</li><li><a href="http://www.paramiko.org/">Paramiko</a>：SSHv2 协议的 Python (2.6+, 3.3+) ，提供客户端和服务端的功能。</li><li><a href="https://pythonhosted.org/passlib/">Passlib</a>：安全密码存储／哈希库。</li><li><a href="https://www.dlitz.net/software/pycrypto/">PyCrypto</a>：Python 密码学工具箱。</li><li><a href="https://github.com/pyca/pynacl">PyNacl</a>：网络和密码学(NaCl) 库的 Python 绑定。</li></ul><h3 id="图形用户界面"><a href="#图形用户界面" class="headerlink" title="图形用户界面"></a>图形用户界面</h3><p>用来创建图形用户界面程序的库。</p><ul><li><a href="https://docs.python.org/2/library/curses.html#module-curses">curses</a>：内建的 <a href="http://www.gnu.org/software/ncurses/">ncurses</a> 封装，用来创建终端图形用户界面。</li><li><a href="https://github.com/nucleic/enaml">enaml</a>：使用类似 QML 的 Declaratic 语法来创建美观的用户界面。</li><li><a href="https://kivy.org/">kivy</a>：一个用来创建自然用户交互（NUI）应用程序的库，可以运行在 Windows, Linux, Mac OS X, Android 以及 iOS 平台上。</li><li><a href="https://bitbucket.org/pyglet/pyglet/wiki/Home">pyglet</a>：一个 Python 的跨平台窗口及多媒体库。</li><li><a href="https://riverbankcomputing.com/software/pyqt/intro">PyQt</a>：跨平台用户界面框架 <a href="http://www.qt.io/">Qt</a> 的 Python 绑定 ，支持 Qt v4 和 Qt v5。</li><li><a href="https://wiki.qt.io/PySide">PySide</a>：跨平台用户界面框架 <a href="http://www.qt.io/">Qt</a> 的 Python 绑定 ，支持 Qt v4。</li><li><a href="https://wiki.python.org/moin/TkInter">Tkinter</a>：Tkinter 是 Python GUI 的一个事实标准库。</li><li><a href="https://github.com/pybee/toga">Toga</a>：一个 Python 原生的，操作系统原生的 GUI 工具包。</li><li><a href="http://urwid.org/">urwid</a>：一个用来创建终端 GUI 应用的库，支持组件，事件和丰富的色彩等。</li><li><a href="http://wxpython.org/">wxPython</a>：wxPython 是 wxWidgets C++ 类库和 Python 语言混合的产物。</li><li><a href="https://wiki.gnome.org/Projects/PyGObject">PyGObject</a>：GLib&#x2F;GObject&#x2F;GIO&#x2F;GTK+ (GTK+3) 的 Python 绑定。</li><li><a href="https://github.com/zoofIO/flexx">Flexx</a>：Flexx 是一个纯 Python 语言编写的用来创建 GUI 程序的工具集，它使用 web 技术进行界面的展示。</li><li><a href="https://github.com/ChrisKnott/Eel">Eel</a>：用于制作简单离线 HTML&#x2F;JS GUI 应用的库。</li><li><a href="https://github.com/PySimpleGUI/PySimpleGUI">PySimpleGUI</a>：tkinter，Qt，WxPython 和 Remi 的封装。</li><li><a href="https://github.com/r0x0r/pywebview/">pywebview</a>：围绕网页视图组件的轻量级跨平台的原生包装。</li><li><a href="https://github.com/RaylockLLC/DearPyGui/">DearPyGui</a>：一个简单的可使用 GPU 加速的 Python GUI 框架。</li></ul><h3 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h3><p>超赞的游戏开发库。</p><ul><li><a href="http://cocos2d.org/">Cocos2d</a>：cocos2d 是一个用来开发 2D 游戏， 示例和其他图形&#x2F;交互应用的框架。基于 pyglet。</li><li><a href="https://www.panda3d.org/">Panda3D</a>：由迪士尼开发的 3D 游戏引擎，并由卡内基梅陇娱乐技术中心负责维护。使用 C++ 编写, 针对 Python 进行了完全的封装。</li><li><a href="http://www.pygame.org/news.html">Pygame</a>：Pygame 是一组 Python 模块，用来编写游戏。</li><li><a href="http://www.ogre3d.org/tikiwiki/PyOgre">PyOgre</a>：Ogre 3D 渲染引擎的 Python 绑定，可以用来开发游戏和仿真程序等任何 3D 应用。</li><li><a href="http://pyopengl.sourceforge.net/">PyOpenGL</a>：OpenGL 的 Python 绑定及其相关 APIs。</li><li><a href="http://pysdl2.readthedocs.org/en/latest/">PySDL2</a>：SDL2 库的封装，基于 ctypes。</li><li><a href="https://www.renpy.org/">RenPy</a>：一个视觉小说（visual novel）引擎。</li><li><a href="https://arcade.academy/index.html">Arcade</a>：一个现代 Python 框架，用于制作具有引人入胜的图形与声音的游戏。</li><li><a href="http://www.harfang3d.com/">Harfang3D</a>：支持3D，VR 与游戏开发的 Python 框架。</li></ul><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>用来生成和操作日志的库。</p><ul><li><a href="https://docs.python.org/2/library/logging.html">logging</a>：(Python 标准库) 为 Python 提供日志功能。</li><li><a href="http://pythonhosted.org/Logbook/">logbook</a>：Logging 库的替代品。</li><li><a href="https://eliot.readthedocs.org/en/latest/">Eliot</a>：为复杂的和分布式系统创建日志。</li><li><a href="http://raven.readthedocs.org/en/latest/">Raven</a>：Sentry 的 Python 客户端。</li><li><a href="https://pypi.python.org/pypi/sentry">Sentry</a>：实时记录和收集日志的服务器。</li><li><a href="https://github.com/getsentry/sentry-python">sentry-python</a>：Python 版 Sentry SDK。</li><li><a href="https://github.com/Delgan/loguru">loguru</a>：旨在带来愉悦体验的 Python 日志库。</li><li><a href="https://www.structlog.org/en/stable/">structlog</a>：结构化日志，让日志变得简单。</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>进行代码库测试和生成测试数据的库。</p><ul><li>测试框架<ul><li><a href="https://docs.python.org/2/library/unittest.html">unittest</a>：(Python 标准库) 单元测试框架。</li><li><a href="https://nose.readthedocs.org/en/latest/">nose</a>：nose 扩展了 unittest 的功能。</li><li><a href="https://github.com/nose-devs/nose2">nose2</a> <code>nose</code>的继任者，基于 <code>unittest2</code>。</li><li><a href="https://github.com/benjamin-hodgson/Contexts">contexts</a>：一个 Python 3.3+ 的 BDD 框架。受到 C#  Machine.Specifications 的启发。</li><li><a href="https://github.com/DRMacIver/hypothesis">hypothesis</a>：Hypothesis 是一个基于先进的 Quickcheck 风格特性的测试库。</li><li><a href="http://nestorsalceda.github.io/mamba/">mamba</a>：Python 的终极测试工具， 拥护 BDD。</li><li><a href="https://github.com/drslump/pyshould">pyshould</a>：Should 风格的断言，基于 <a href="https://github.com/hamcrest/PyHamcrest">PyHamcrest</a>。</li><li><a href="http://pytest.org/latest/">pytest</a>：一个成熟的全功能 Python 测试工具。</li><li><a href="https://github.com/CleanCut/green">green</a>：干净，多彩的测试工具。</li><li><a href="http://heynemann.github.io/pyvows/">pyvows</a>：BDD 风格的测试工具，受 Vows.js 的启发。</li><li><a href="https://github.com/robotframework/robotframework">Robot Framework</a>：一个通用的自动化测试框架。</li><li><a href="https://tox.readthedocs.io/en/latest/">tox</a>：自动化测试与发布的工具，支持多个 Python 版本。</li></ul></li><li>GUI &#x2F; Web 测试<ul><li><a href="https://pypi.python.org/pypi/selenium">Selenium</a>：<a href="http://www.seleniumhq.org/">Selenium</a> WebDriver 的 Python 绑定。</li><li><a href="https://github.com/asweigart/pyautogui">PyAutoGUI</a>：PyAutoGUI 是一个人性化的跨平台 GUI 自动测试模块。</li><li><a href="https://github.com/locustio/locust">locust</a>：使用 Python 编写的，可扩展的用户加载测试工具。</li><li><a href="https://github.com/seatgeek/sixpack">sixpack</a>：一个和语言无关的 A&#x2F;B 测试框架。</li><li><a href="https://splinter.readthedocs.org/en/latest/">splinter</a>：开源的 web 应用测试工具。</li><li><a href="https://github.com/kiwicom/schemathesis">Schemathesis</a>：基于属性的自动测试工具，用于测试使用 Open API &#x2F; Swagger 规范构建的 Web 应用程序。</li></ul></li><li>Mock 测试<ul><li><a href="https://docs.python.org/3/library/unittest.mock.html">mock</a>：(Python 标准库) 一个用于伪造测试的库。</li><li><a href="https://pypi.python.org/pypi/doublex">doublex</a>：Python 的一个功能强大的 doubles 测试框架。</li><li><a href="https://github.com/spulec/freezegun">freezegun</a>：通过伪造日期模块来生成不同的时间。</li><li><a href="https://github.com/patrys/httmock">httmock</a>：针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。</li><li><a href="http://falcao.it/HTTPretty/">httpretty</a>：Python 的 HTTP 请求 mock 工具。</li><li><a href="https://github.com/getsentry/responses">responses</a>：伪造 Python 中的 requests 库的一个通用库。</li><li><a href="https://github.com/kevin1024/vcrpy">VCR.py</a>：在你的测试中记录和重放 HTTP 交互。</li><li><a href="https://github.com/mindflayer/python-mocket">mocket</a>：gevent&#x2F;asyncio&#x2F;SSL 支持的 socket mock 框架。</li></ul></li><li>对象工厂<ul><li><a href="https://github.com/rbarrois/factoryboy">factoryboy</a>：一个 Python 用的测试固件 (test fixtures) 替代库。</li><li><a href="https://github.com/klen/mixer">mixer</a>：另外一个测试固件 (test fixtures) 替代库，支持 Django, Flask, SQLAlchemy, Peewee 等。</li><li><a href="https://github.com/vandersonmota/modelmommy">modelmommy</a>：为 Django 测试创建随机固件。</li></ul></li><li>代码覆盖率<ul><li><a href="https://pypi.python.org/pypi/coverage">coverage</a>：代码覆盖率测量。</li><li><a href="https://codecov.io/">Codecov</a>：一个代码覆盖率测试工具，为开源项目提供免费代码覆盖率测试服务。</li></ul></li><li>伪数据<ul><li><a href="http://www.joke2k.net/faker/">faker</a>：一个 Python 库，用来生成伪数据。</li><li><a href="https://github.com/emirozer/fake2db">fake2db</a>：伪数据库生成器。</li><li><a href="https://github.com/lk-geimfari/mimesis">mimesis</a>：一个帮助你生成伪数据的 Python 库。</li><li><a href="https://pypi.python.org/pypi/radar">radar</a>：生成随机的日期&#x2F;时间。</li></ul></li><li>错误处理<ul><li><a href="https://github.com/ajalt/fuckitpy">FuckIt.py</a>：使用最先进的技术来保证你的 Python 代码无论对错都能继续运行。</li></ul></li></ul><h3 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h3><p>渗透测试相关框架和工具。</p><ul><li><a href="https://github.com/Manisso/fsociety">fsociety</a>：一款渗透测试框架。</li><li><a href="https://github.com/trustedsec/social-engineer-toolkit">setoolkit</a>：社会工程工具包。</li><li><a href="https://github.com/sqlmapproject/sqlmap">sqlmap</a>：自动 SQL 注入和数据库接管工具。</li></ul><h3 id="代码分析和-Lint-工具"><a href="#代码分析和-Lint-工具" class="headerlink" title="代码分析和 Lint 工具"></a>代码分析和 Lint 工具</h3><p>进行代码分析、解析和操作代码库的库和工具。</p><ul><li><p>代码分析</p><ul><li><a href="http://coala-analyzer.org/">coala</a>：语言独立和易于扩展的代码分析应用程序。</li><li><a href="https://github.com/scottrogowski/code2flow">code2flow</a>：把你的 Python 和 JavaScript 代码转换为流程图。</li><li><a href="https://github.com/gak/pycallgraph">pycallgraph</a>：这个库可以把你的 Python 应用的流程(调用图)进行可视化。</li><li><a href="https://github.com/yinwang0/pysonar2">pysonar2</a>：Python 类型推断和检索工具。</li><li><a href="https://github.com/PyCQA/prospector">prospector</a>：分析 Python 代码的工具。</li><li><a href="https://github.com/jendrikseipp/vulture">vulture</a>：用于发现和分析无效 Python 代码的工具。</li></ul></li><li><p>Lint 工具</p><ul><li><p><a href="https://pypi.python.org/pypi/flake8">Flake8</a>：模块化源码检查工具，提供与 <code>pycodestyle</code>、<code>pyflakes</code> 、McCabe 相关的装饰器。</p></li><li><p><a href="https://github.com/DmytroLitvinov/awesome-flake8-extensions">awesome-flake8-extensions</a></p></li><li><p><a href="https://www.pylint.org/">Pylint</a>：一个完全可定制的源码分析器。</p></li><li><p><a href="https://github.com/google/yapf">YAPF</a>：Google 的 Python 代码格式化工具。</p></li><li><p><a href="https://pylama.readthedocs.org/en/latest/">pylama</a>：Python 和 JavaScript 的代码审查工具。</p></li><li><p><a href="https://github.com/wemake-services/wemake-python-styleguide">wemake-python-styleguide</a>：有史以来最严格的 Python 代码审查工具。</p></li></ul></li><li><p>代码格式化</p><ul><li><a href="https://github.com/hhatto/autopep8">autopep8</a>：自动格式化 Python 代码，以使其符合 PEP8 规范。</li><li><a href="https://github.com/ambv/black">black</a>：一个坚定的 Python 代码格式化工具。</li><li><a href="https://github.com/timothycrosley/isort">isort</a>：用于纠正包导入顺序的 Python 库。</li></ul></li><li><p>静态类型检查，也可以参考 <a href="https://github.com/typeddjango/awesome-python-typing">awesome-python-typing</a></p></li><li><p><a href="http://mypy-lang.org/">mypy</a>：在编译期间检查变量类型。</p></li><li><p><a href="https://github.com/facebook/pyre-check">pyre-check</a>：性能类型检查。</p></li><li><p><a href="https://github.com/python/typeshed">typeshed</a>：带有静态类型的Python库存根的集合。</p></li><li><p>静态类型注释生成器</p></li><li><p><a href="https://github.com/Instagram/MonkeyType">MonkeyType</a>：通过收集运行时的类型来为 Python 生成静态类型注释的系统。</p></li><li><p><a href="https://github.com/dropbox/pyannotate">pyannotate</a>：自动生成符合 PEP-484 的注解。</p></li><li><p><a href="https://github.com/google/pytype">pytype</a>：检查和推断 Python 代码中的类型，无需添加注解。</p></li></ul><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><p>用来进行代码调试的库。</p><ul><li><p>调试器</p><ul><li><a href="https://pypi.python.org/pypi/ipdb">ipdb</a>：IPython 启用的 <a href="https://docs.python.org/2/library/pdb.html">pdb</a>。</li><li><a href="https://pypi.python.org/pypi/pudb">pudb</a>：全屏，基于控制台的 Python 调试器。</li><li><a href="https://github.com/antocuni/pdb">pdb++</a>：另一种 pdb 的替代。</li><li><a href="https://github.com/google/pyringe">pyringe</a>：可以在 Python 进程中附加和注入代码的调试器。</li><li><a href="https://github.com/Kozea/wdb">wdb</a>：一个奇异的 web 调试器，通过 WebSockets 工作。</li><li><a href="http://winpdb.org/">winpdb</a>：一个具有图形用户界面的 Python 调试器，可以进行远程调试，基于 rpdb2。</li></ul></li><li><p>追踪器</p></li><li><p><a href="https://github.com/khamidou/lptrace">lptrace</a>：为 Python 程序打造的 <a href="http://man7.org/linux/man-pages/man1/strace.1.html">strace</a>。</p></li><li><p><a href="https://github.com/ionelmc/python-manhole">manhole</a>：调试UNIX套接字连接，并显示所有线程的堆栈跟踪和交互式提示。</p></li><li><p><a href="https://github.com/google/pyringe">pyringe</a>：能够附加到 Python 进程并将代码注入Python进程的调试器。</p></li><li><p><a href="https://github.com/ionelmc/python-hunter">python-hunter</a>：一个灵活的代码追踪工具包。</p></li><li><p>性能分析器</p><ul><li><a href="https://github.com/rkern/lineprofiler">lineprofiler</a>：逐行性能分析。</li><li><a href="http://pypi.python.org/pypi/memory_profiler">Memory Profiler</a>、<a href="https://github.com/fabianp/memoryprofiler">内存</a>：监控 Python 代码的内存使用。</li><li><a href="https://github.com/what-studio/profiling">profiling</a>：一个交互式 Python 性能分析工具。</li><li><a href="https://github.com/benfred/py-spy">py-spy</a>：Python 程序采样分析器，使用 Rust 实现。</li><li><a href="https://github.com/uber/pyflame">pyflame</a>：用于 Python 的跟踪分析器。</li><li><a href="https://github.com/nvdv/vprof">vprof</a>：视觉 Python 分析器。</li></ul></li><li><p>其他</p><ul><li><a href="https://github.com/eliben/pyelftools">pyelftools</a>：解析和分析 ELF 文件以及 DWARF 调试信息。</li><li><a href="https://github.com/WoLpH/python-statsd">python-statsd</a>：<a href="https://github.com/etsy/statsd/">statsd</a> 服务器的 Python 客户端。</li><li><a href="https://github.com/django-debug-toolbar/django-debug-toolbar">django-debug-toolbar</a>：为 Django 显示各种调试信息。</li><li><a href="https://github.com/dcramer/django-devserver">django-devserver</a>：一个 Django 运行服务器的替代品。</li><li><a href="https://github.com/mgood/flask-debugtoolbar">flask-debugtoolbar</a>：django-debug-toolbar 的 flask 版。</li><li><a href="https://github.com/gruns/icecream">icecream</a>：通过一个简单的函数调用检查变量、表达式和程序执行情况。</li></ul></li></ul><h3 id="科学计算和数据分析"><a href="#科学计算和数据分析" class="headerlink" title="科学计算和数据分析"></a>科学计算和数据分析</h3><p>用来进行科学计算和数据分析的库。</p><ul><li><a href="http://www.astropy.org/">astropy</a>：一个天文学 Python 库。</li><li><a href="https://github.com/chapmanb/bcbio-nextgen">bcbio-nextgen</a>：这个工具箱为全自动高通量测序分析提供符合最佳实践的处理流程。</li><li><a href="https://github.com/chapmanb/bcbb">bccb</a>：生物分析相关代码集合。</li><li><a href="http://biopython.org/wiki/MainPage">Biopython</a>：Biopython 是一组可以免费使用的用来进行生物计算的工具。</li><li><a href="http://blaze.readthedocs.org/en/latest/index.html">blaze</a>：NumPy 和 Pandas 的大数据接口。</li><li><a href="http://cclib.github.io/">cclib</a>：一个用来解析和解释计算化学软件包输出结果的库。</li><li><a href="https://networkx.github.io/">NetworkX</a>：一个为复杂网络设计的高性能软件。</li><li><a href="http://neupy.com/pages/home.html">Neupy</a>：执行和测试各种不同的人工神经网络算法。</li><li><a href="http://www.numpy.org/">NumPy</a>：使用 Python 进行科学计算的基础包。</li><li><a href="http://openbabel.org/wiki/MainPage">Open Babel</a>：一个化学工具箱，用来描述多种化学数据。</li><li><a href="https://github.com/mining/mining">Open Mining</a>：使用 Python 挖掘商业情报 (BI) (Pandas web 接口)。</li><li><a href="http://orange.biolab.si/">orange</a>：通过可视化编程或 Python 脚本进行数据挖掘，数据可视化，分析和机器学习。</li><li><a href="http://pandas.pydata.org/">Pandas</a>：提供高性能，易用的数据结构和数据分析工具。</li><li><a href="http://www.pydy.org/">PyDy</a>：PyDy 是 Python Dynamics 的缩写，用来为动力学运动建模工作流程提供帮助， 基于 NumPy, SciPy, IPython 和 matplotlib。</li><li><a href="https://github.com/pymc-devs/pymc3">PyMC</a>：马尔科夫链蒙特卡洛采样工具。</li><li><a href="http://www.rdkit.org/">RDKit</a>：化学信息学和机器学习软件。</li><li><a href="http://www.scipy.org/">SciPy</a>：由一些基于 Python ，用于数学，科学和工程的开源软件构成的生态系统。</li><li><a href="https://github.com/statsmodels/statsmodels">statsmodels</a>：统计建模和计量经济学。</li><li><a href="https://github.com/sympy/sympy">SymPy</a>：一个用于符号数学的 Python 库。</li><li><a href="https://github.com/quantopian/zipline">zipline</a>：一个 Python 算法交易库。</li><li><a href="https://github.com/eBay/bayesian-belief-networks">Bayesian-belief-networks</a>：优雅的贝叶斯理念网络框架。</li><li><a href="https://github.com/awslabs/aws-data-wrangler">AWS Data Wrangler</a>：AWS 平台上使用的 Pandas。</li><li><a href="https://github.com/ironmussa/Optimus">Optimus</a>：在使用 PySpark 时，让敏捷数据科学工作流程变得简单。</li><li><a href="http://colour-science.org/">Colour</a>：大量色彩理论转换和算法的实现。</li><li><a href="https://github.com/benedekrozemberczki/karateclub">Karate Club</a>：用于图形结构化数据的无监督机器学习工具箱。</li><li><a href="http://nipy.org/">NIPY</a>：神经影响学工具箱集合。</li><li><a href="https://github.com/obspy/obspy/wiki/">ObsPy</a>：地震学 Python 工具箱。</li><li><a href="http://qutip.org/">QuTiP</a>：Python 版 Quantum 工具箱。</li><li><a href="https://gitlab.com/team-simpy/simpy">SimPy</a>：一个基于过程的离散事件模拟框架。</li></ul><h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><p>进行数据可视化的库。 参见：<a href="https://github.com/sorrycc/awesome-javascript#data-visualization">awesome-javascript</a>。</p><ul><li><a href="http://matplotlib.org/">matplotlib</a>：一个 Python 2D 绘图库。</li><li><a href="https://github.com/bokeh/bokeh">bokeh</a>：用 Python 进行交互式 web 绘图。</li><li><a href="https://github.com/yhat/ggplot">ggplot</a>：ggplot2 给 R 提供的 API 的 Python 版本。</li><li><a href="https://plot.ly/python/">plotly</a>：协同 Python 和 matplotlib 工作的 web 绘图库。</li><li><a href="https://github.com/chenjiandongx/pyecharts">pyecharts</a>：基于百度 Echarts 的数据可视化库。</li><li><a href="http://www.pygal.org/en/latest/">pygal</a>：一个 Python SVG 图表创建工具。</li><li><a href="https://pypi.python.org/pypi/pygraphviz">pygraphviz</a>：Graphviz 的 Python 接口。</li><li><a href="http://www.pyqtgraph.org/">PyQtGraph</a>：交互式实时 2D&#x2F;3D&#x2F; 图像绘制及科学&#x2F;工程学组件。</li><li><a href="http://jiffyclub.github.io/snakeviz/">SnakeViz</a>：一个基于浏览器的 Python’s cProfile 模块输出结果查看工具。</li><li><a href="https://github.com/wrobstory/vincent">vincent</a>：把 Python 转换为 Vega 语法的转换工具。</li><li><a href="http://vispy.org/">VisPy</a>：基于 OpenGL 的高性能科学可视化工具。</li><li><a href="https://github.com/altair-viz/altair">Altair</a>：用于 Python 的声明式统计可视化库。</li><li><a href="https://github.com/bloomberg/bqplot">bqplot</a>：Jupyter Notebook 的交互式绘图库。</li><li><a href="https://github.com/SciTools/cartopy">Cartopy</a>：具有 matplotlib 支持的 Python 制图库。</li><li><a href="https://plot.ly/products/dash/">Dash</a>：构建在 Flask、React 和 Plotly 之上，旨在用于分析 Web 应用程序。</li><li><a href="https://github.com/Acrotrend/awesome-dash">awesome-dash</a></li><li><a href="https://github.com/mingrammer/diagrams">diagrams</a>：用图表作为代码。</li><li><a href="https://github.com/has2k1/plotnine">plotnine</a>：基于ggplot2的Python图形语法。</li><li><a href="https://pypi.org/project/pygraphviz/">PyGraphviz</a>： <a href="http://www.graphviz.org/">Graphviz</a> 的 Python 接口。</li><li><a href="https://github.com/mwaskom/seaborn">Seaborn</a>：使用 Matplotlib 进行统计数据可视化。</li></ul><h3 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h3><p>计算机视觉相关库。</p><ul><li><a href="http://opencv.org/">OpenCV</a>：开源计算机视觉库。</li><li><a href="https://github.com/jflesch/pyocr">pyocr</a>：Tesseract 和 Cuneiform 的包装库。</li><li><a href="https://github.com/madmaze/pytesseract">pytesseract</a>：<a href="https://github.com/tesseract-ocr">Google Tesseract OCR</a> 的另一包装库。</li><li><a href="http://simplecv.org/">SimpleCV</a>：一个用来创建计算机视觉应用的开源框架。</li><li><a href="https://github.com/JaidedAI/EasyOCR">EasyOCR</a>：支持40多种语言的即用型 OCR。</li><li><a href="https://github.com/ageitgey/face_recognition">Face Recognition</a>：简单的面部识别库。</li><li><a href="https://github.com/kornia/kornia/">Kornia</a>：PyTorch 的开源差异化计算机视觉库。</li><li><a href="https://github.com/sirfz/tesserocr">tesserocr</a>：另一个简单的，兼容 Pillow 的 <code>tesseract-ocr</code> API 装饰器，可用于 OCR。</li></ul><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3><p>神经网络和深度学习相关框架。 也可以参考 <a href="https://github.com/ChristosChristofidis/awesome-deep-learning">awesome-deep-learning</a>。</p><ul><li><a href="http://caffe.berkeleyvision.org/">Caffe</a>：一个 <a href="https://github.com/BVLC/caffe">Caffe</a> 的 python 接口。</li><li><a href="https://caffe2.ai/">Caffe2</a>：一个轻量级的，模块化的，可扩展的深度学习框架。</li><li><a href="https://keras.io/">keras</a>：以 tensorflow&#x2F;theano&#x2F;CNTK 为后端的深度学习封装库，快速上手神经网络。</li><li><a href="http://mxnet.incubator.apache.org/">MXNet</a>：一个高效和灵活的深度学习框架。</li><li><a href="http://pytorch.org/">Pytorch</a>：一个具有张量和动态神经网络，并有强大 GPU 加速能力的深度学习框架。</li><li><a href="https://github.com/SerpentAI/SerpentAI">SerpentAI</a>：游戏代理框架，可使用任意视频游戏作为深度学习沙箱。</li><li><a href="https://github.com/Theano/Theano">Theano</a>：一个快速数值计算库。</li><li><a href="http://tensorflow.org/">TensorFlow</a>：谷歌开源的最受欢迎的深度学习框架。</li><li><a href="https://github.com/tensorflow/skflow">skflow</a>：一个 <a href="https://github.com/tensorflow/tensorflow">TensorFlow</a> 的简化接口(模仿 scikit-learn)。</li><li><a href="https://github.com/hannes-brt/hebel">hebel</a>：GPU 加速的深度学习库。</li><li><a href="https://github.com/andersbll/deeppy">pydeep</a>：Python 深度学习库。</li></ul><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>机器学习相关库，也可以参考 <a href="https://github.com/josephmisiti/awesome-machine-learning#python">awesome-machine-learning</a>。</p><ul><li><a href="https://github.com/muricoca/crab">Crab</a>：灵活、快速的推荐引擎。</li><li><a href="https://github.com/numenta/nupic">NuPIC</a>：智能计算 Numenta 平台。</li><li><a href="https://github.com/clips/pattern">pattern</a>：Python 网络挖掘模块。</li><li><a href="https://github.com/pybrain/pybrain">PyBrain</a>：另一个 Python 机器学习库。</li><li><a href="https://github.com/lisa-lab/pylearn2">Pylearn2</a>：一个基于 <a href="https://github.com/Theano/Theano">Theano</a> 的机器学习库。</li><li><a href="https://github.com/ocelma/python-recsys">python-recsys</a>：一个用来实现推荐系统的 Python 库。</li><li><a href="http://scikit-learn.org/">scikit-learn</a>：基于 SciPy 构建的机器学习 Python 模块。</li><li><a href="https://github.com/josephreisinger/vowpalporpoise">vowpalporpoise</a>：轻量级 <a href="https://github.com/JohnLangford/vowpalwabbit/">Vowpal Wabbit</a> 的 Python 封装。</li><li><a href="https://github.com/openai/gym">gym</a>：开发和比较强化学习算法的工具包。</li><li><a href="https://github.com/h2oai/h2o-3">H2O</a>：开源快速可扩展的机器学习平台。</li><li><a href="https://github.com/benhamner/Metrics">Metrics</a>：机器学习的评估指标。</li><li><a href="https://github.com/josephreisinger/vowpal_porpoise">vowpal_porpoise</a>：Python 版 <a href="https://github.com/JohnLangford/vowpal_wabbit/">Vowpal Wabbit</a> 装饰器。</li><li><a href="https://github.com/dmlc/xgboost">xgboost</a>：可扩展，便携式和分布式梯度提升库。</li><li><a href="https://github.com/mindsdb/mindsdb">MindsDB</a>：MindsDB 是现有数据库的开源 AI 层，可让使用标准查询轻松地进行开发，训练和部署最新的机器学习模型。</li></ul><h3 id="推荐系统"><a href="#推荐系统" class="headerlink" title="推荐系统"></a>推荐系统</h3><p>用于构建推荐系统的相关库。</p><ul><li><a href="https://github.com/spotify/annoy">annoy</a>：对 C++&#x2F;Python 实现的近似近邻算法进行了内存优化。</li><li><a href="https://github.com/ibayer/fastFM">fastFM</a>：Factorization Machine 相关库。</li><li><a href="https://github.com/benfred/implicit">implicit</a>：对隐式数据集进行协作过滤的快速 Python 实现。</li><li><a href="https://github.com/guestwalk/libffm">libffm</a>：Field-aware Factorization Machine (FFM) 相关库。</li><li><a href="https://github.com/lyst/lightfm">lightfm</a>：很多流行的推荐算法的 Python 实现。</li><li><a href="https://github.com/maciejkula/spotlight">spotlight</a>：使用 PyTorch 实现的深度推荐模型。</li><li><a href="https://github.com/NicolasHug/Surprise">Surprise</a>：用于构建和分析推荐系统的科学工具。</li><li><a href="https://github.com/jfkirk/tensorrec">tensorrec</a>：TensorFlow 的推荐引擎框架。</li></ul><h3 id="分布式计算"><a href="#分布式计算" class="headerlink" title="分布式计算"></a>分布式计算</h3><p>分布式计算相关的框架和库。</p><ul><li><a href="https://github.com/douban/dpark">dpark</a>：Spark 的 Python 克隆版，一个类似 MapReduce 的框架。</li><li><a href="https://github.com/klbostee/dumbo">dumbo</a>：这个 Python 模块可以让人轻松的编写和运行 Hadoop 程序。</li><li><a href="https://github.com/spotify/luigi">luigi</a>：这个模块帮你构建批处理作业的复杂流水线。</li><li><a href="https://github.com/Yelp/mrjob">mrjob</a>：在 Hadoop 或 Amazon Web Services 上运行 MapReduce 任务。</li><li><a href="https://github.com/dask/dask">dask</a>：用于分析计算的灵活的并行计算库。</li><li><a href="http://spark.apache.org/docs/latest/programming-guide.html">PySpark</a>：Spark 的 Python API 。</li><li><a href="https://github.com/ray-project/ray/">Ray</a>：一个用于并行和分布式 Python 的系统，它统一了机器学习生态系统。</li><li><a href="https://github.com/robinhood/faust">faust</a>：一个 Python 流处理库，核心思想来源 <a href="https://kafka.apache.org/documentation/streams/">Kafka Streams</a>。</li><li><a href="https://github.com/Parsely/streamparse">streamparse</a>：运行针对事实数据流的 Python 代码。集成了 <a href="http://storm.apache.org/">Apache Storm</a>。</li><li><a href="https://github.com/mars-project/mars">mars</a>：是基于张量的，用于进行大规模数据计算的统一计算框架。</li></ul><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>使用 Python 进行函数式编程。</p><ul><li><a href="https://github.com/pytoolz/cytoolz/">CyToolz</a>：Toolz 的 Cython 实现：高性能函数式工具。</li><li><a href="https://github.com/kachayev/fn.py">fn.py</a>：在 Python 中进行函数式编程：实现了一些享受函数式编程缺失的功能。</li><li><a href="https://github.com/Suor/funcy">funcy</a>：炫酷又实用的函数式工具。</li><li><a href="https://github.com/pytoolz/toolz">Toolz</a>：一组用于迭代器，函数和字典的函数式编程工具。</li><li><a href="https://github.com/evhub/coconut">Coconut</a>：为了简单、优雅、更 Pythonic 的函数式编程而构建的 Python 变体。</li><li><a href="https://github.com/erikrose/more-itertools">more-itertools</a>：比 <code>itertools</code> 拥有更多的可迭代对象的操作方式。</li><li><a href="https://github.com/dry-python/returns">returns</a>：一个类型安全的单元、转换器与合成工具集合。</li></ul><h3 id="第三方-API"><a href="#第三方-API" class="headerlink" title="第三方 API"></a>第三方 API</h3><p>用来访问第三方 API 的库。 参见： <a href="https://github.com/realpython/list-of-python-api-wrappers">List of Python API Wrappers and Libraries</a>。</p><ul><li><a href="https://libcloud.apache.org/">apache-libcloud</a>：一个为各种云设计的 Python 库。</li><li><a href="https://github.com/boto/boto3">boto3</a>：Amazon Web Services 的 Python 接口。</li><li><a href="https://github.com/sunlightlabs/django-wordpress/">django-wordpress</a>：Django 的 WordPress 模型与视图。</li><li><a href="https://github.com/mobolic/facebook-sdk">facebook-sdk</a>：Facebook 平台的 Python SDK。</li><li><a href="https://github.com/jgorset/facepy">facepy</a>：Facepy 让和 Facebook’s Graph API 的交互变得更容易。</li><li><a href="https://github.com/charlierguo/gmail">gmail</a>：Gmail 的 Python 接口。</li><li><a href="https://github.com/google/google-api-python-client">google-api-python-client</a>：Python 用的 Google APIs 客户端库。</li><li><a href="https://github.com/burnash/gspread">gspread</a>：Google 电子表格的 Python API。</li><li><a href="https://github.com/ryanmcgrath/twython">twython</a>：Twitter API 的封装。</li></ul><h3 id="DevOps-工具"><a href="#DevOps-工具" class="headerlink" title="DevOps 工具"></a>DevOps 工具</h3><p>用于 DevOps 的软件和库。</p><ul><li><a href="https://github.com/ansible/ansible">Ansible</a>：一个非常简单的 IT 自动化平台。</li><li><a href="https://github.com/saltstack/salt">SaltStack</a>：基础设施自动化和管理系统。</li><li><a href="http://www.openstack.org/">OpenStack</a>：用于构建私有和公有云的开源软件。</li><li><a href="https://docs.docker.com/compose/">Docker Compose</a>：快速，分离的开发环境，使用 Docker。</li><li><a href="http://www.fabfile.org/">Fabric</a>：一个简单的，Python 风格的工具，用来进行远程执行和部署。</li><li><a href="https://github.com/sebastien/cuisine">cuisine</a>：为 Fabric 提供一系列高级函数。</li><li><a href="https://github.com/ronnix/fabtools">Fabtools</a>：一个用来编写超赞的 Fabric 文件的工具。</li><li><a href="https://bitbucket.org/haard/gitapi">gitapi</a>：Git 的纯 Python API。</li><li><a href="https://bitbucket.org/haard/hgapi">hgapi</a>：Mercurial 的纯 Python API。</li><li><a href="https://github.com/nickstenning/honcho">honcho</a>：<a href="https://github.com/ddollar/foreman">Foreman</a> 的 Python 克隆版，用来管理基于 <a href="https://devcenter.heroku.com/articles/procfile">Procfile</a> 的应用。</li><li><a href="https://github.com/pexpect/pexpect">pexpect</a>：在一个伪终端中控制交互程序，就像 GNU expect 一样。</li><li><a href="https://github.com/giampaolo/psutil">psutil</a>：一个跨平台进程和系统工具模块。</li><li><a href="https://github.com/Supervisor/supervisor">supervisor</a>：UNIX 的进程控制系统。</li><li><a href="https://cloudinit.readthedocs.io/en/latest/">cloudinit</a>：一个多分发包，用于处理云实例的早期初始化。</li><li><a href="https://github.com/Fizzadar/pyinfra">pyinfra</a>：一个通用的 CLI 工具包和 python 库，用于自动化的基础设施。</li><li><a href="https://github.com/nickstenning/honcho">honcho</a>：<a href="https://github.com/ddollar/foreman">Foreman</a> 的 Python 克隆版，用于管理基于 Procfile 的应用。</li><li><a href="https://www.borgbackup.org/">BorgBackup</a>：具有压缩和加密功能的重复数据删除存档器。</li><li><a href="https://docs.docker.com/compose/">docker-compose</a>： 使用 <a href="https://www.docker.com/">Docker</a> 的快速独立的开发环境。</li></ul><h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><p>任务调度库。</p><ul><li><a href="http://apscheduler.readthedocs.org/en/latest/">APScheduler</a>：轻巧但强大的进程内任务调度，使你可以调度函数。</li><li><a href="https://github.com/thauber/django-schedule">django-schedule</a>：一个 Django 排程应用。</li><li><a href="http://pydoit.org/">doit</a>：一个任务执行和构建工具。</li><li><a href="https://github.com/gunnery/gunnery">gunnery</a>：分布式系统使用的多用途任务执行工具 ，具有 web 交互界面。</li><li><a href="http://pythonhosted.org/joblib/index.html">Joblib</a>：一组为 Python 提供轻量级作业流水线的工具。</li><li><a href="https://github.com/fengsp/plan">Plan</a>：如有神助地编写 crontab 文件。</li><li><a href="https://github.com/dbader/schedule">schedule</a>：人性化的 Python 任务调度库。</li><li><a href="https://github.com/knipknap/SpiffWorkflow">Spiff</a>：使用纯 Python 实现的强大的工作流引擎。</li><li><a href="http://docs.openstack.org/developer/taskflow/">TaskFlow</a>：一个可以让你方便执行任务的 Python 库，一致并且可靠。</li><li><a href="https://airflow.apache.org/">Airflow</a> ：是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度。</li><li><a href="https://github.com/PrefectHQ/prefect">Prefect</a>：一个现代的工作流程编排框架，使构建、计划和监视健壮的数据管道变得容易。</li></ul><h3 id="外来函数接口"><a href="#外来函数接口" class="headerlink" title="外来函数接口"></a>外来函数接口</h3><p>使用外来函数接口的库。</p><ul><li><a href="https://pypi.python.org/pypi/cffi">cffi</a>：用来调用 C 代码的外来函数接口。</li><li><a href="https://docs.python.org/2/library/ctypes.html">ctypes</a>：(Python 标准库) 用来调用 C 代码的外来函数接口。</li><li><a href="https://mathema.tician.de/software/pycuda/">PyCUDA</a>：Nvidia CUDA API 的封装。</li><li><a href="http://www.swig.org/Doc1.3/Python.html">SWIG</a>：简化的封装和接口生成器。</li></ul><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>Python 重构相关库和工具。</p><ul><li><a href="http://bicyclerepair.sourceforge.net/">Bicycle Repair Man</a>：Python 的重构工具。</li><li><a href="https://pybowler.io/">Bowler</a>：适用于现代Python的安全代码重构。</li><li><a href="https://github.com/python-rope/rope">Rope</a>：一个 Python 的重构库。</li></ul><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>让 Python 更快的库。</p><ul><li><a href="http://cython.org/">Cython</a>：优化的 Python 静态编译器。使用类型混合使 Python 编译成 C 或 C++ 模块来获得性能的极大提升。</li><li><a href="https://github.com/metawilm/cl-python">CLPython</a>：用 Common Lisp 编写的 Python 编程语言的实现。</li><li><a href="https://github.com/google/grumpy">Grumpy</a>：编译器比解释器更强大的 cpython2.7 替代品（alpha）。 </li><li><a href="https://github.com/IronLanguages/ironpython3">IronPython</a>：用 C＃ 编写的 Python 编程语言的实现。</li><li><a href="https://hg.python.org/jython">Jython</a>：为 JVM 用 Java 编写的 Python 编程语言的实现。</li><li><a href="https://github.com/micropython/micropython">MicroPython</a>：精简高效的 Python 编程语言实现。</li><li><a href="https://github.com/Microsoft/Pyjion">Pyjion</a>：基于 CoreCLR 的 Python JIT。</li><li><a href="http://numba.pydata.org/">Numba</a>：Python JIT (just in time) 编译器，针对科学用的 Python ，由 Cython 和 NumPy 的开发者开发。</li><li><a href="https://github.com/Maratyszcza/PeachPy">PeachPy</a>：嵌入 Python 的 x86-64 汇编器。可以被用作 Python 内联的汇编器或者是独立的汇编器，用于 Windows，Linux，OS X，Native Client 或者 Go 。</li><li><a href="http://pypy.org/">PyPy</a>：使用 Python 实现的 Python。解释器使用黑魔法加快 Python 运行速度且不需要加入额外的类型信息。</li><li><a href="https://github.com/dropbox/pyston">Pyston</a>：使用 LLVM 和现代 JIT 技术构建的 Python 实现，目标是为了获得很好的性能。</li><li><a href="https://bitbucket.org/stackless-dev/stackless/overview">Stackless Python</a>：一个强化版的 Python。</li></ul><h3 id="微软的-Windows-平台"><a href="#微软的-Windows-平台" class="headerlink" title="微软的 Windows 平台"></a>微软的 Windows 平台</h3><p>在 Windows 平台上进行 Python 编程。</p><ul><li><a href="http://python-xy.github.io/">Python(x,y)</a>：面向科学应用的 Python 发行版，基于 Qt 和 Spyder。</li><li><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">pythonlibs</a>：非官方的 Windows 平台 Python 扩展二进制包。</li><li><a href="https://github.com/pythonnet/pythonnet">PythonNet</a>：Python 与 .NET 公共语言运行库 (CLR)的集成。</li><li><a href="https://sourceforge.net/projects/pywin32/">PyWin32</a>：针对 Windows 的 Python 扩展。</li><li><a href="https://winpython.github.io/">WinPython</a>：Windows 7&#x2F;8 系统下便携式开发环境。</li></ul><h3 id="网络可视化和-SDN"><a href="#网络可视化和-SDN" class="headerlink" title="网络可视化和 SDN"></a>网络可视化和 SDN</h3><p>用来进行网络可视化和 SDN(软件定义网络)的工具和库。</p><ul><li><a href="http://mininet.org/">Mininet</a>：一款流行的网络模拟器以及用 Python 编写的 API。</li><li><a href="https://github.com/noxrepo/pox">POX</a>：一个针对基于 Python 的软件定义网络应用（例如 OpenFlow SDN 控制器）的开源开发平台。</li><li><a href="http://frenetic-lang.org/pyretic/">Pyretic</a>：火热的 SDN 编程语言中的一员，为网络交换机和模拟器提供强大的抽象能力。</li><li><a href="https://github.com/sdn-ixp/internet2award">SDX Platform</a>：基于 SDN 的 IXP 实现，影响了 Mininet, POX 和 Pyretic。</li><li><a href="http://ryu.readthedocs.io/en/latest/">NRU</a>：一个基于组件的软件定义网络框架。</li><li><a href="https://github.com/napalm-automation/napalm">napalm</a>：可跨供应商 API 来操纵网络设备。</li></ul><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>用来对硬件进行编程的库。</p><ul><li><a href="http://inotool.org/">ino</a>：操作 <a href="https://www.arduino.cc/">Arduino</a> 的命令行工具。</li><li><a href="http://pyrorobotics.com/">Pyro</a>：Python 机器人编程库。</li><li><a href="https://github.com/SavinaRoja/PyUserInput">PyUserInput</a>：跨平台的，控制鼠标和键盘的模块。</li><li><a href="https://github.com/secdev/scapy">scapy</a>：一个非常棒的操作数据包的库。</li><li><a href="https://wifi.readthedocs.org/en/latest/">wifi</a>：一个 Python 库和命令行工具用来在 Linux 平台上操作 WiFi。</li><li><a href="http://www.pingo.io/">Pingo</a>：Pingo 为类似 Raspberry Pi，pcDuino， Intel Galileo 等设备提供统一的 API 用以编程。</li><li><a href="https://github.com/boppreh/keyboard">keyboard</a>：在 Windows 和 Linux 上挂钩并模拟全局键盘事件。</li><li><a href="https://github.com/boppreh/mouse">mouse</a>：在 Windows 和 Linux 上挂钩并模拟全局鼠标事件。</li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>帮助从 Python 2 向 Python 3 迁移的库。</p><ul><li><a href="http://python-future.org/index.html">Python-Future</a>：这就是 Python 2 和 Python 3 之间丢失的那个兼容性层。</li><li><a href="https://pypi.python.org/pypi/six">Six</a>：Python 2 和 3 的兼容性工具。</li><li><a href="https://github.com/PyCQA/modernize">modernize</a>：使 Python 代码更加现代化以便最终迁移到 Python 3。</li></ul><h3 id="算法和设计模式"><a href="#算法和设计模式" class="headerlink" title="算法和设计模式"></a>算法和设计模式</h3><p>数据结构、算法和设计模式的 Python 实现。也可以参考 <a href="https://github.com/tayllan/awesome-algorithms">awesome-algorithms</a> 。</p><ul><li>算法<ul><li><a href="https://github.com/keon/algorithms">algorithms</a>：数据结构和算法的简单示例。</li><li><a href="https://github.com/prabhupant/python-ds">python-ds</a>：用于面试的数据结构和算法的集合。</li><li><a href="https://github.com/grantjenks/python-sortedcontainers">sortedcontainers</a>：排序集合的快速的纯 Python 实现。</li><li><a href="https://github.com/TheAlgorithms/Python">TheAlgorithms</a>：所有算法的 Python 实现。</li></ul></li><li>设计模式<ul><li><a href="https://github.com/tylerlaberge/PyPattyrn">PyPattyrn</a>：一个简单而有效的库，用于实现常见的设计模式。</li><li><a href="https://github.com/faif/python-patterns">python-patterns</a>：一个 Python 设计模式集合。</li><li><a href="https://github.com/pytransitions/transitions">transitions</a>：轻量级的，面向对象的有限状态机实现。</li></ul></li></ul><h3 id="内置类的增强版实现"><a href="#内置类的增强版实现" class="headerlink" title="内置类的增强版实现"></a>内置类的增强版实现</h3><p>一些 Python 内置类的增强版实现库。</p><ul><li><a href="https://github.com/python-attrs/attrs">attrs</a>：一个在类定义时可替换 <code>__init__</code>, <code>__eq__</code>, <code>__repr__</code>等方法的样板。</li><li><a href="https://github.com/jab/bidict">bidict</a>：高效的 Pythonic 的双向映射数据结构和相关功能。</li><li><a href="https://github.com/cdgriffith/Box">Box</a>：具有高级点符号访问权限的 Python 字典。</li><li><a href="https://docs.python.org/3/library/dataclasses.html">dataclasses</a>：(Python 标准库) 数据类。</li><li><a href="https://github.com/carlosescri/DottedDict">DottedDict</a>：提供一种使用点路径符号访问列表和字典的方法的库。</li></ul><h3 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h3><p>机器人相关库。</p><ul><li><a href="https://github.com/AtsushiSakai/PythonRobotics">PythonRobotics</a>：各种具有可视化效果的机器人算法的汇总。</li><li><a href="http://wiki.ros.org/rospy">rospy</a>：ROS (Robot Operating System) 库。</li></ul><h3 id="聊天工具"><a href="#聊天工具" class="headerlink" title="聊天工具"></a>聊天工具</h3><p>聊天机器人开发相关的库。</p><ul><li><a href="https://github.com/errbotio/errbot/">errbot</a>：实现 ChatOps 的最简单最受欢迎的聊天机器人。</li></ul><h3 id="编辑器插件和-IDE"><a href="#编辑器插件和-IDE" class="headerlink" title="编辑器插件和 IDE"></a>编辑器插件和 IDE</h3><ul><li>Emacs<ul><li><a href="https://github.com/jorgenschaefer/elpy">elpy</a>：Emacs Python 开发环境。</li></ul></li><li>Sublime Text<ul><li><a href="https://github.com/DamnWidget/anaconda">anaconda</a>：Anaconda 可将功能齐全的 Python 开发 IDE 转换为 Sublime Text 3。</li><li><a href="https://github.com/srusskih/SublimeJEDI">SublimeJEDI</a>：一个很棒的自动补全库 Jedi 的Sublime Text 插件。</li></ul></li><li>Vim<ul><li><a href="https://github.com/davidhalter/jedi-vim">jedi-vim</a>：用于 Python 的 Jedi 自动补全库的 Vim 绑定。</li><li><a href="https://github.com/python-mode/python-mode">python-mode</a>：一个将 Vim 转换为 Python IDE 的多合一插件。</li><li><a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a>：包含 Jedi 补全的 Python 引擎。</li></ul></li><li>Visual Studio<ul><li><a href="https://github.com/Microsoft/PTVS">PTVS</a>：Visual Studio Python 工具。</li></ul></li><li>Visual Studio Code<ul><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python</a>：对 Python 有丰富支持的官方 VSCode 扩展。</li></ul></li><li>IDE<ul><li><a href="https://www.jetbrains.com/pycharm/">PyCharm</a>：JetBrains 提供的商业 Python IDE，也有免费的社区版。</li><li><a href="https://github.com/spyder-ide/spyder">spyder</a>： 开源 Python IDE。</li></ul></li></ul><h3 id="企业级应用集成"><a href="#企业级应用集成" class="headerlink" title="企业级应用集成"></a>企业级应用集成</h3><p>企业级环境中用于集成的平台与工具。</p><ul><li><a href="https://zato.io/">Zato</a>：ESB, SOA, REST, APIs 以及云的 Python 整合。</li></ul><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><p>GraphQL 相关库。</p><ul><li><a href="https://github.com/graphql-python/graphene/">graphene</a>：Python GraphQL 框架。</li><li><a href="https://github.com/tartiflette/tartiflette-aiohttp/">tartiflette-aiohttp</a>：Tartiflette 的基于 aiohttp 的装饰器，用于通过 HTTP 公开 GraphQL API。</li><li><a href="https://github.com/tartiflette/tartiflette-asgi/">tartiflette-asgi</a>：Tartiflette GraphQL 引擎的 ASGI 支持。</li><li><a href="https://tartiflette.io/">tartiflette</a>：支持 Python 3.6+ 和 asyncio 的 SDL 优先的 GraphQL 引擎实现。</li></ul><h3 id="股票金融"><a href="#股票金融" class="headerlink" title="股票金融"></a>股票金融</h3><ul><li><a href="https://github.com/QUANTAXIS/QUANTAXIS">QUANTAXIS</a>：支持任务调度，分布式部署的股票&#x2F;期货&#x2F;期权&#x2F;港股&#x2F;虚拟货币的数据&#x2F;回测&#x2F;模拟&#x2F;交易&#x2F;可视化&#x2F;多账户纯本地量化解决方案</li><li><a href="https://github.com/bbfamily/abu">abu</a>: 基于python的开源量化交易，量化投资架构</li><li><a href="https://github.com/fasiondog/hikyuu">Hikyuu Quant</a>：基于C++&#x2F;Python的开源量化交易研究框架，用于策略分析及回测（仅受限于数据，如有数据也可用于期货等）</li><li><a href="https://github.com/vnpy/vnpy">vnpy</a>：基于Python的开源量化交易系统开发框架，整合了多种交易接口，并针对具体策略算法和功能开发提供了简洁易用的API，用于快速构建交易员所需的量化交易应用</li></ul><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>不属于上面任何一个类别，但是非常有用的库。</p><ul><li><a href="https://github.com/jek/blinker">blinker</a>：快速的 Python 运行时信号&#x2F;事件分配系统。</li><li><a href="https://github.com/mahmoud/boltons">boltons</a>：一组纯 Python 实用工具。</li><li><a href="https://github.com/pallets/itsdangerous">itsdangerous</a>：将受信任的数据传递到不受信任的环境的帮助工具。</li><li><a href="https://github.com/magenta/magenta">magenta</a>：使用人工智能生成音乐与艺术的工具。</li><li><a href="https://github.com/mitsuhiko/pluginbase">pluginbase</a>：一个简单但灵活的 Python 插件系统。</li><li><a href="http://www.tryton.org/">tryton</a>：一个通用业务框架。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda env linux</title>
      <link href="/2023/01/01/%E7%8E%AF%E5%A2%83/conda%20env%20linux/"/>
      <url>/2023/01/01/%E7%8E%AF%E5%A2%83/conda%20env%20linux/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="切换到一个目录中"><a href="#切换到一个目录中" class="headerlink" title="切换到一个目录中"></a>切换到一个目录中</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p><img src="http://doc.lideshan.top/media/202404/2024-04-29_170627_8114650.2884246875764932.png" alt="image.png"></p><h1 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/conda-forge/miniforge/releases/download/24.3.0-0/Mambaforge-24.3.0-0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p><img src="http://doc.lideshan.top/media/202404/2024-04-29_170651_4183870.8054708237514722.png" alt="image.png"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh Mambaforge-24.3.0-0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p><img src="http://doc.lideshan.top/media/202404/2024-04-29_170709_7772810.031719849571111514.png" alt="image.png"><br><img src="http://doc.lideshan.top/media/202404/2024-04-29_170733_1094230.21475437194528457.png" alt="image.png"></p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><p><img src="http://doc.lideshan.top/media/202404/2024-04-29_170810_1025560.34743365341192756.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> env </category>
          
      </categories>
      
      
        <tags>
            
            <tag> env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda-env</title>
      <link href="/2023/01/01/%E7%8E%AF%E5%A2%83/conda-env/"/>
      <url>/2023/01/01/%E7%8E%AF%E5%A2%83/conda-env/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="下载合适的版本"><a href="#下载合适的版本" class="headerlink" title="下载合适的版本"></a>下载合适的版本</h1><p>windows下载的这个: <a href="https://github.com/conda-forge/miniforge/releases/download/24.3.0-0/Mambaforge-Windows-x86_64.exe">Fetching Title#7xfh</a></p><p>安装基本上都是下一步下一步<br><img src="http://doc.lideshan.top/media/202404/2024-04-19_105943_0449180.6529552683452639.png" alt="image.png"><br>如果需要修改路径的话可以才怪 但是不建议修改<br><img src="http://doc.lideshan.top/media/202404/2024-04-19_110019_9517160.8501674807769156.png" alt="image.png"><br>全部勾选</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate  <span class="comment"># 进入到基础环境</span></span><br><span class="line">conda deactivate <span class="comment"># 退出当前环境</span></span><br><span class="line">conda create -n py310 python=3.10 <span class="comment"># 创建一个python版本是3.10的环境</span></span><br><span class="line">conda <span class="built_in">env</span> list <span class="comment"># 查看已经装的环境有哪些</span></span><br><span class="line">conda activate py310 <span class="comment"># 切换到创建的名字为py310的环境中</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple  <span class="comment"># 配置清华加速镜像源</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://doc.lideshan.top/media/202404/2024-04-19_110445_6630140.3085799491710386.png" alt="image.png"><br><img src="http://doc.lideshan.top/media/202404/2024-04-19_110459_5390400.529924304301725.png" alt="image.png"><br><img src="http://doc.lideshan.top/media/202404/2024-04-19_110706_4599130.346389156115829.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> env </category>
          
      </categories>
      
      
        <tags>
            
            <tag> env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>激活工具</title>
      <link href="/2023/01/01/%E7%8E%AF%E5%A2%83/env/"/>
      <url>/2023/01/01/%E7%8E%AF%E5%A2%83/env/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>激活工具<br>    <a href="https://3.jetbra.in/">JETBRA.IN CHECKER | IPFS</a><br>Anaconda<br>    <a href="https://repo.anaconda.com/archive/">Index of &#x2F;</a><br>Miniforge<br>    <a href="https://github.com/conda-forge/miniforge/releases">Releases · conda-forge&#x2F;miniforge</a>    </p>]]></content>
      
      
      <categories>
          
          <category> env </category>
          
      </categories>
      
      
        <tags>
            
            <tag> env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装nodejs版本过低问题</title>
      <link href="/2023/01/01/%E7%8E%AF%E5%A2%83/ubuntu%E5%AE%89%E8%A3%85nodejs%E7%89%88%E6%9C%AC%E8%BF%87%E4%BD%8E/"/>
      <url>/2023/01/01/%E7%8E%AF%E5%A2%83/ubuntu%E5%AE%89%E8%A3%85nodejs%E7%89%88%E6%9C%AC%E8%BF%87%E4%BD%8E/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><h2 id="卸载低版本的"><a href="#卸载低版本的" class="headerlink" title="卸载低版本的"></a>卸载低版本的</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt remove nodejs</span><br><span class="line"><span class="built_in">sudo</span> apt remove npm</span><br><span class="line"><span class="comment"># 删除残留文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/lib  -&gt; 删除所有node和node_modules文件</span><br><span class="line"><span class="built_in">cd</span> /usr/local/include -&gt; 删除所有node和node_modules文件</span><br><span class="line"><span class="built_in">cd</span> /usr/local/bin -&gt; 删除所有node和node_modules文件</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装git和curl，如果已经安装过，可以跳过</span></span><br><span class="line"><span class="built_in">sudo</span> apt install git curl</span><br><span class="line"><span class="comment">#  安装nodejs</span></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_18.x | <span class="built_in">sudo</span> -E bash -</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y nodejs</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><h3 id="nvm安装管理版本"><a href="#nvm安装管理版本" class="headerlink" title="nvm安装管理版本"></a>nvm安装管理版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash</span><br><span class="line"><span class="comment"># 添加环境变量</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="subst">$([ -z <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="comment"># This loads nvm</span></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">nvm install --lts  <span class="comment"># 最新稳定版本</span></span><br><span class="line">nvm install 16.13.1  <span class="comment"># 指定版本</span></span><br><span class="line">nvm use 16.13.1  <span class="comment"># 切换版本</span></span><br><span class="line">nvm <span class="built_in">ls</span>  <span class="comment"># 查看已安装的版本</span></span><br><span class="line">nvm current  <span class="comment"># 查看当前使用的版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> default 16.13.1  <span class="comment"># 设置默认版本</span></span><br><span class="line">nvm uninstall 16.13.1  <span class="comment"># 卸载指定版本</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 镜像 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
            <tag> opensource </tag>
            
            <tag> nodejs </tag>
            
            <tag> 版本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>multipass</title>
      <link href="/2023/01/01/%E7%8E%AF%E5%A2%83/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84ubuntu%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/01/01/%E7%8E%AF%E5%A2%83/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84ubuntu%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="安装multipass"><a href="#安装multipass" class="headerlink" title="安装multipass"></a>安装multipass</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multipass launch jammy --name acc --cpus 2 --disk 40G --memory 4G</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地windwos挂载server服务器硬盘更方便的进行开发</title>
      <link href="/2022/10/16/windows/%E6%9C%AC%E5%9C%B0windwos%E6%8C%82%E8%BD%BDserver%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E7%9B%98%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/"/>
      <url>/2022/10/16/windows/%E6%9C%AC%E5%9C%B0windwos%E6%8C%82%E8%BD%BDserver%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E7%9B%98%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="本地windwos挂载server服务器硬盘更方便的进行开发"><a href="#本地windwos挂载server服务器硬盘更方便的进行开发" class="headerlink" title="本地windwos挂载server服务器硬盘更方便的进行开发"></a>本地windwos挂载server服务器硬盘更方便的进行开发</h1><h2 id="方案为winfsp-sshfs-win"><a href="#方案为winfsp-sshfs-win" class="headerlink" title="方案为winfsp+sshfs-win"></a>方案为winfsp+sshfs-win</h2><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><ul><li>winfsp</li><li><a href="https://github.com/winfsp/sshfs-win/releases/download/v3.7.21011/sshfs-win-3.7.21011-x64.msi">https://github.com/winfsp/sshfs-win/releases/download/v3.7.21011/sshfs-win-3.7.21011-x64.msi</a></li><li>sshs-win</li><li><a href="https://github.com/winfsp/winfsp/releases/download/v1.11B3/winfsp-1.11.22151.msi">https://github.com/winfsp/winfsp/releases/download/v1.11B3/winfsp-1.11.22151.msi</a></li><li>sshfs-win manager</li><li><a href="https://github.com/evsar3/sshfs-win-manager/releases/download/v1.3.1/sshfs-win-manager-setup-v1.3.1.exe">https://github.com/evsar3/sshfs-win-manager/releases/download/v1.3.1/sshfs-win-manager-setup-v1.3.1.exe</a></li></ul><p><font color='red'>github无法下载可以通过下面连接下载</font><br>共享地址:<a href="http://pan.lideshan.cn/index.php?share/folder&user=1&sid=uxVey9ja">http://pan.lideshan.cn/index.php?share/folder&amp;user=1&amp;sid=uxVey9ja</a>  提取密码:Apzpy</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认一路安装即可</span><br></pre></td></tr></table></figure><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>1.打开软件sshfs-win Manager<br><img src="https://lideshan.cn/zb_users/upload/2022/06/202206061742317225922.png"><br>2.点击add Connection<br><img src="https://lideshan.cn/zb_users/upload/2022/06/202206061743128399420.png"><br>3.填写信息并点击save<br><img src="https://lideshan.cn/zb_users/upload/2022/06/202206061745299845453.png"><br>4.长期使用可以点击设置开启并点击保存<br><img src="https://lideshan.cn/zb_users/upload/2022/06/202206061746464121661.png"><br><img src="https://lideshan.cn/zb_users/upload/2022/06/202206061747151781792.png"><br>5.点击连接<br><img src="https://lideshan.cn/zb_users/upload/2022/06/202206061748463023086.png"><br>6.稍等一下即可连接成功<br><img src="https://lideshan.cn/zb_users/upload/2022/06/202206061749155265333.png"><br><img src="https://lideshan.cn/zb_users/upload/2022/06/202206061749533592832.png"></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用LangChain和大型语言模型系列模型, 提供基于本地知识的自动问答应用</title>
      <link href="/2022/02/02/AI/LangChain-ChatLLM-webui/"/>
      <url>/2022/02/02/AI/LangChain-ChatLLM-webui/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><h2 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n showpaddle python=3.9.17</span><br></pre></td></tr></table></figure><p><img src="http://img.lideshan.top/i/2023/09/11/64fe800b9b3f4.png"></p><h2 id="选择paddle版本"><a href="#选择paddle版本" class="headerlink" title="选择paddle版本"></a>选择paddle版本</h2><p><a href="https://www.paddlepaddle.org.cn/install/quick?docurl=/documentation/docs/zh/develop/install/pip/windows-pip.html">paddle</a></p><p><img src="http://img.lideshan.top/i/2023/09/11/64fe82268d266.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># gpu</span><br><span class="line">python -m pip install paddlepaddle-gpu==0.0.0.post117 -f https://www.paddlepaddle.org.cn/whl/windows/gpu/develop.html</span><br><span class="line"># cpu</span><br><span class="line">python -m pip install paddlepaddle==0.0.0 -f https://www.paddlepaddle.org.cn/whl/windows/cpu-mkl-avx/develop.html</span><br></pre></td></tr></table></figure><p><img src="http://img.lideshan.top/i/2023/09/11/64fe81ca47d0f.png"></p><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开终端</span><br><span class="line">python</span><br><span class="line">import paddle</span><br><span class="line">paddle.utils.run_check()</span><br><span class="line"># 成功</span><br><span class="line">PaddlePaddle is installed successfully!</span><br></pre></td></tr></table></figure><p><img src="http://img.lideshan.top/i/2023/09/11/64fe82f48ac90.png" alt="img"></p><h1 id="安装paddlenlp"><a href="#安装paddlenlp" class="headerlink" title="安装paddlenlp"></a>安装paddlenlp</h1><p><a href="https://github.com/PaddlePaddle/PaddleNLP#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">paddlenlp</a></p><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"># 正常版本</span><br><span class="line">pip install paddlenlp</span><br><span class="line"># 最新dev</span><br><span class="line">pip install --pre --upgrade paddlenlp -f https://www.paddlepaddle.org.cn/whl/paddlenlp.html</span><br></pre></td></tr></table></figure><h2 id="测试paddlenlp模型"><a href="#测试paddlenlp模型" class="headerlink" title="测试paddlenlp模型"></a>测试paddlenlp模型</h2><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">from paddlenlp import Taskflow</span><br><span class="line">chatbot = Taskflow(&quot;text2text_generation&quot;,batch_size=2)</span><br><span class="line">results = chatbot([&#x27;您好！&#x27;,&#x27;很高兴认识你&#x27;])</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure><h2 id="拉取仓库"><a href="#拉取仓库" class="headerlink" title="拉取仓库"></a>拉取仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://openi.pcl.ac.cn/Learning-Develop-Union/LangChain-ChatGLM-Webui.git</span><br></pre></td></tr></table></figure><h3 id="切换到paddlepaddle目录"><a href="#切换到paddlepaddle目录" class="headerlink" title="切换到paddlepaddle目录"></a>切换到paddlepaddle目录</h3><p><img src="http://img.lideshan.top/i/2023/09/11/64feae83bbc0b.png"></p><h2 id="安装一些库"><a href="#安装一些库" class="headerlink" title="安装一些库"></a>安装一些库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure><p><img src="http://img.lideshan.top/i/2023/09/11/64feaec916c42.png"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>打开浏览器的地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:7860/</span><br></pre></td></tr></table></figure><p><img src="http://img.lideshan.top/i/2023/09/11/64feb000b9109.png"></p><h2 id="cuda及cudnn"><a href="#cuda及cudnn" class="headerlink" title="cuda及cudnn"></a>cuda及cudnn</h2><p>v11.7</p><p><a href="https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_516.01_windows.exe">cuda</a></p><p><a href="https://developer.nvidia.com/downloads/compute/cudnn/secure/8.9.2/local_installers/11.x/cudnn-windows-x86_64-8.9.2.26_cuda11-archive.zip">cudnn</a></p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p><a href="https://blog.csdn.net/weixin_40320590/article/details/113449230">https://blog.csdn.net/weixin_40320590/article/details/113449230</a></p><p><a href="https://blog.csdn.net/weixin_59997235/article/details/131337650">https://blog.csdn.net/weixin_59997235/article/details/131337650</a></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paddlepaddle </tag>
            
            <tag> LangChain </tag>
            
            <tag> python </tag>
            
            <tag> gpu </tag>
            
            <tag> 自动问答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用paddle的声学模型合成tts声音</title>
      <link href="/2022/02/02/AI/%E5%88%A9%E7%94%A8paddle%E7%9A%84%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B%E5%90%88%E6%88%90tts%E5%A3%B0%E9%9F%B3/"/>
      <url>/2022/02/02/AI/%E5%88%A9%E7%94%A8paddle%E7%9A%84%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B%E5%90%88%E6%88%90tts%E5%A3%B0%E9%9F%B3/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">conda create -n audio python=3.7</span></span><br><span class="line"><span class="string">conda activate audio</span></span><br><span class="line"><span class="string">conda install -y -c conda-forge sox libsndfile bzip2</span></span><br><span class="line"><span class="string">pip install pytest-runner -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="string">pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span></span><br><span class="line"><span class="string">pip install paddlespeech -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line"><span class="keyword">from</span> paddlespeech.cli <span class="keyword">import</span> TTSExecutor</span><br><span class="line"></span><br><span class="line">tts_executor = TTSExecutor()</span><br><span class="line">wav_file = tts_executor(</span><br><span class="line">    text=<span class="string">&#x27;今天天气挺好的&#x27;</span>,</span><br><span class="line">    output=<span class="string">&#x27;output.wav&#x27;</span>,</span><br><span class="line">    am=<span class="string">&#x27;fastspeech2_csmsc&#x27;</span>,</span><br><span class="line">    am_config=<span class="literal">None</span>,</span><br><span class="line">    am_ckpt=<span class="literal">None</span>,</span><br><span class="line">    am_stat=<span class="literal">None</span>,</span><br><span class="line">    spk_id=<span class="number">0</span>,</span><br><span class="line">    phones_dict=<span class="literal">None</span>,</span><br><span class="line">    tones_dict=<span class="literal">None</span>,</span><br><span class="line">    speaker_dict=<span class="literal">None</span>,</span><br><span class="line">    voc=<span class="string">&#x27;pwgan_csmsc&#x27;</span>,</span><br><span class="line">    voc_config=<span class="literal">None</span>,</span><br><span class="line">    voc_ckpt=<span class="literal">None</span>,</span><br><span class="line">    voc_stat=<span class="literal">None</span>,</span><br><span class="line">    lang=<span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">    device=paddle.get_device())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Wave file has been generated: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(wav_file))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paddlepaddle </tag>
            
            <tag> python </tag>
            
            <tag> tts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用paddle的识别模型识别图片内容(chinese_text_detection_db_server)</title>
      <link href="/2022/02/02/AI/%E5%88%A9%E7%94%A8paddle%E7%9A%84%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E5%86%85%E5%AE%B9_chinese_text_detection_db_server/"/>
      <url>/2022/02/02/AI/%E5%88%A9%E7%94%A8paddle%E7%9A%84%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E5%86%85%E5%AE%B9_chinese_text_detection_db_server/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n ocr python=3.8</span><br><span class="line">pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span><br><span class="line">pip install paddlehub -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><h2 id="两种使用方法"><a href="#两种使用方法" class="headerlink" title="两种使用方法"></a>两种使用方法</h2><h3 id="直接使用-1"><a href="#直接使用-1" class="headerlink" title="直接使用(1)"></a>直接使用(1)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;可选参数</span><br><span class="line">    paths (list[str]): 图片的路径；</span><br><span class="line">    images (list[numpy.ndarray]): 图片数据，ndarray.shape 为 [H, W, C]，BGR格式；</span><br><span class="line">    use_gpu (bool): 是否使用 GPU；若使用GPU，请先设置CUDA_VISIBLE_DEVICES环境变量</span><br><span class="line">    box_thresh (float): 检测文本框置信度的阈值；</span><br><span class="line">    visualization (bool): 是否将识别结果保存为图片文件；</span><br><span class="line">    output_dir (str): 图片的保存路径，默认设为 detection_result；</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&quot;&quot;&quot; return</span><br><span class="line">    res (list[dict]): 识别结果的列表，列表中每一个元素为 dict，各字段为：</span><br><span class="line">    data (list): 检测文本框结果，文本框在原图中的像素坐标，4*2的矩阵，依次表示文本框左上，右上，右下，左下顶点的坐标</span><br><span class="line">    save_path (str): 识别结果的保存路径, 如不保存图片则save_path为&#x27;&#x27;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import paddlehub as hub</span><br><span class="line">import cv2</span><br><span class="line">image_path =&quot;&quot;</span><br><span class="line">text_detector = hub.Module(name=&quot;chinese_text_detection_db_server&quot;)</span><br><span class="line">result = text_detector.detect_text(images=[cv2.imread(image_path)])</span><br><span class="line"># or</span><br><span class="line"># result =text_detector.detect_text(paths=[image_path])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="部署服务器-2"><a href="#部署服务器-2" class="headerlink" title="部署服务器(2)"></a>部署服务器(2)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 终端输入</span><br><span class="line">hub serving start -m chinese_text_detection_db_server</span><br></pre></td></tr></table></figure><h5 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import cv2</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">def cv2_to_base64(image):</span><br><span class="line">    data = cv2.imencode(&#x27;.jpg&#x27;, image)[1]</span><br><span class="line">    return base64.b64encode(data.tostring()).decode(&#x27;utf8&#x27;)</span><br><span class="line"></span><br><span class="line"># 发送HTTP请求</span><br><span class="line">data = &#123;&#x27;images&#x27;:[cv2_to_base64(cv2.imread(&quot;/PATH/TO/IMAGE&quot;))]&#125;</span><br><span class="line">headers = &#123;&quot;Content-type&quot;: &quot;application/json&quot;&#125;</span><br><span class="line">url = &quot;http://127.0.0.1:8866/predict/chinese_text_detection_db_server&quot;</span><br><span class="line">r = requests.post(url=url, headers=headers, data=json.dumps(data))</span><br><span class="line"></span><br><span class="line"># 打印预测结果</span><br><span class="line">print(r.json()[&quot;results&quot;])</span><br></pre></td></tr></table></figure><h2 id="更多模型"><a href="#更多模型" class="headerlink" title="更多模型"></a>更多模型</h2><p><font color="block"><a href="https://www.paddlepaddle.org.cn/modelbase">更多模型可在官网查看</a></font></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paddlepaddle </tag>
            
            <tag> python </tag>
            
            <tag> gpu </tag>
            
            <tag> asr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用百度飞浆的预训练模型生成情话、对联等信息</title>
      <link href="/2022/02/02/AI/%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%B5%86%E7%9A%84%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E7%94%9F%E6%88%90%E6%83%85%E8%AF%9D%E3%80%81%E5%AF%B9%E8%81%94%E7%AD%89%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/02/02/AI/%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%B5%86%E7%9A%84%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E7%94%9F%E6%88%90%E6%83%85%E8%AF%9D%E3%80%81%E5%AF%B9%E8%81%94%E7%AD%89%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># anconda</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;step1: 安装paddlepaddle</span></span><br><span class="line"><span class="string">conda create -n paddle python=3.6</span></span><br><span class="line"><span class="string">conda activate paddle</span></span><br><span class="line"><span class="string">pip install paddlepaddle -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="string">pip install paddlehub -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="string">pip install pillow</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> paddlehub <span class="keyword">as</span> hub</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HubUtils</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.hub = hub</span><br><span class="line">        <span class="comment">#初始化时需要加载模型</span></span><br><span class="line">        <span class="variable language_">self</span>.module_love_words = <span class="variable language_">self</span>.hub.Module(name=<span class="string">&quot;ernie_gen_lover_words&quot;</span>)          <span class="comment"># 情话</span></span><br><span class="line">        <span class="variable language_">self</span>.module_poetry = <span class="variable language_">self</span>.hub.Module(name=<span class="string">&quot;ernie_gen_poetry&quot;</span>)                   <span class="comment"># 诗歌</span></span><br><span class="line">        <span class="variable language_">self</span>.module_acrostic_poetry = <span class="variable language_">self</span>.hub.Module(name=<span class="string">&quot;ernie_gen_acrostic_poetry&quot;</span>) <span class="comment"># 藏头诗</span></span><br><span class="line">        <span class="variable language_">self</span>.module_couplets = <span class="variable language_">self</span>.hub.Module(name=<span class="string">&quot;ernie_gen_couplet&quot;</span>)                <span class="comment"># 对联</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetLoveWords</span>(<span class="params">self,text,size=<span class="number">5</span></span>):</span><br><span class="line">        results = <span class="variable language_">self</span>.module_love_words.generate(texts=[text], use_gpu=<span class="literal">False</span>, beam_width=size)</span><br><span class="line">        <span class="keyword">return</span> results[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetAcrostic</span>(<span class="params">self,text,line=<span class="number">4</span>,word=<span class="number">7</span>,size=<span class="number">1</span></span>):</span><br><span class="line">        <span class="comment">#默认返回一首</span></span><br><span class="line">        <span class="variable language_">self</span>.module_acrostic = <span class="variable language_">self</span>.hub.module = hub.Module(name=<span class="string">&quot;ernie_gen_acrostic_poetry&quot;</span>, line=line, word=word)</span><br><span class="line">        results = <span class="variable language_">self</span>.module_acrostic.generate(texts=[text], use_gpu=<span class="literal">False</span>, beam_width=size)</span><br><span class="line">        <span class="keyword">return</span> results[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetAcrostic_poetry</span>(<span class="params">self,text,line=<span class="number">4</span>, word=<span class="number">7</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.module_acrostic_poetry = <span class="variable language_">self</span>.hub.module = hub.Module(name=<span class="string">&quot;ernie_gen_acrostic_poetry&quot;</span>, line=line, word=word)</span><br><span class="line">        results = <span class="variable language_">self</span>.module_acrostic_poetry.generate(texts=[text], use_gpu=<span class="literal">False</span>, beam_width=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> results[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetPoetry</span>(<span class="params">self,curx,size=<span class="number">1</span></span>):</span><br><span class="line">        <span class="comment">#输入关键句，词即可生成诗歌，默认一首</span></span><br><span class="line">        results = <span class="variable language_">self</span>.module_poetry.generate(texts=[curx], use_gpu=<span class="literal">False</span>, beam_width=size)</span><br><span class="line">        <span class="keyword">return</span> results[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetCouplet</span>(<span class="params">self,up_couplet,size=<span class="number">1</span></span>):</span><br><span class="line">        <span class="comment">#输入上联给出下联,默认给一个</span></span><br><span class="line">        results = <span class="variable language_">self</span>.module_couplets.generate(texts=[up_couplet], use_gpu=<span class="literal">False</span>, beam_width=size)</span><br><span class="line">        <span class="keyword">return</span> results[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Hub = HubUtils()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        input_ = <span class="built_in">input</span>(<span class="string">&quot;请选择功能: 1.情话 2.诗歌 3.藏头诗 4.对联 5.退出\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> input_ == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            input_ = <span class="built_in">input</span>(<span class="string">&quot;请输入情话关键词:\n&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(Hub.GetLoveWords(input_))</span><br><span class="line">        <span class="keyword">elif</span> input_ == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            input_ = <span class="built_in">input</span>(<span class="string">&quot;请输入诗歌关键词:\n&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(Hub.GetPoetry(input_))</span><br><span class="line">        <span class="keyword">elif</span> input_ == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">            input_ = <span class="built_in">input</span>(<span class="string">&quot;请输入藏头诗关键词:\n&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(Hub.GetAcrostic_poetry(input_))</span><br><span class="line">        <span class="keyword">elif</span> input_ == <span class="string">&quot;4&quot;</span>:</span><br><span class="line">            input_ = <span class="built_in">input</span>(<span class="string">&quot;请输入上联:\n&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(Hub.GetCouplet(input_))</span><br><span class="line">        <span class="keyword">elif</span> input_ == <span class="string">&quot;5&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> paddlehub </tag>
            
            <tag> 模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的js代码片段</title>
      <link href="/2022/02/02/Javascript/%E5%B8%B8%E7%94%A8%E7%9A%84js%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
      <url>/2022/02/02/Javascript/%E5%B8%B8%E7%94%A8%E7%9A%84js%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="获取选择到的字"><a href="#获取选择到的字" class="headerlink" title="获取选择到的字"></a>获取选择到的字</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSelectedText</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">getSelection</span>) &#123; <span class="comment">// This technique is the most likely to be standardized.         </span></span><br><span class="line"><span class="comment">// getSelection() returns a Selection object, which we do not document.        </span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">getSelection</span>()</span><br><span class="line">.<span class="title function_">toString</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">getSelection</span>) &#123;</span><br><span class="line"><span class="comment">// This is an older, simpler technique that returns a string        </span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getSelection</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">selection</span>) &#123;</span><br><span class="line"><span class="comment">// This is the IE-specific technique.         </span></span><br><span class="line"><span class="comment">// We do not document the IE selection property or TextRange objects.         </span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">selection</span>.<span class="title function_">createRange</span>()</span><br><span class="line">.<span class="property">text</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阻止右键"><a href="#阻止右键" class="headerlink" title="阻止右键"></a>阻止右键</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">onselectstart</span> = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">oncontextmenu</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//NO.1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadScript</span>(<span class="params">url, callback</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="property">createElement</span> (<span class="string">&quot;script&quot;</span>)</span><br><span class="line">    script.<span class="property">type</span> = <span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (script.<span class="property">readyState</span>)&#123; <span class="comment">//IE</span></span><br><span class="line">        script.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="string">&quot;loaded&quot;</span> || <span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="string">&quot;complete&quot;</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onreadystatechange</span> = <span class="literal">null</span>;</span><br><span class="line">                <span class="title function_">callback</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//Others</span></span><br><span class="line">        script.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    script.<span class="property">src</span> = url;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NO.2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadScript</span>(<span class="params">url, callback</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span> || xhr.<span class="property">status</span> == <span class="number">304</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="property">createElement</span> (<span class="string">&quot;script&quot;</span>);</span><br><span class="line">                script.<span class="property">type</span> = <span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line">                script.<span class="property">text</span> = xhr.<span class="property">responseText</span>;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">                <span class="title function_">callback</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="dom加载完执行"><a href="#dom加载完执行" class="headerlink" title="dom加载完执行"></a>dom加载完执行</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">domLoad</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">addEventListener</span>)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">ActiveXObject</span>)&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;script id=&#x27;ie_onload&#x27; defer src=&#x27;javascript:void(0)&#x27;&gt;&lt;\/script&gt;&quot;</span>);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;ie_onload&quot;</span>).<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="string">&quot;complete&quot;</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">onreadystatechange</span> = <span class="literal">null</span>;</span><br><span class="line">                    <span class="title function_">fn</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/WebKit/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>))&#123;</span><br><span class="line">            <span class="keyword">var</span> _timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="regexp">/loaded|complete/</span>.<span class="title function_">test</span>(<span class="variable language_">document</span>.<span class="property">readyState</span>))&#123;</span><br><span class="line">                    <span class="built_in">clearInterval</span>(_timer);</span><br><span class="line">                    <span class="title function_">fn</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="加载样式表"><a href="#加载样式表" class="headerlink" title="加载样式表"></a>加载样式表</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addSheet</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> oLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;link&#x27;</span>),oHead = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    oLink.<span class="property">rel</span> = <span class="string">&#x27;stylesheet&#x27;</span>;</span><br><span class="line">    oLink.<span class="property">type</span> = <span class="string">&#x27;text/css&#x27;</span>;</span><br><span class="line">    oLink.<span class="property">href</span> = url;</span><br><span class="line">    oHead.<span class="title function_">appendChild</span>(oLink);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取css"><a href="#获取css" class="headerlink" title="获取css"></a>获取css</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getStyle</span>(<span class="params">o, attr</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(o.<span class="property">currentStyle</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> o.<span class="property">currentStyle</span>[attr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getComputedStyle</span>(o,<span class="literal">false</span>)[attr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取服务器时间"><a href="#获取服务器时间" class="headerlink" title="获取服务器时间"></a>获取服务器时间</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNowDate</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;null.txt&#x27;</span>, <span class="literal">true</span>); <span class="comment">//null.txt不存在，我们不需要</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">3</span>)&#123; <span class="comment">//状态3响应</span></span><br><span class="line">            <span class="title function_">callback</span>(xhr.<span class="title function_">getResponseHeader</span>(<span class="string">&#x27;Date&#x27;</span>)); <span class="comment">//返回时间，那么可以利用获得的时间做倒计时程序了。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="cookie处理"><a href="#cookie处理" class="headerlink" title="cookie处理"></a>cookie处理</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cookie</span>(<span class="params">name, value, options</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> value != <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">        options = options || &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span>(value === <span class="literal">null</span>)&#123;</span><br><span class="line">            options.<span class="property">expires</span> = -<span class="number">1</span>; <span class="comment">//过期</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> expires = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="comment">//存在时间选项</span></span><br><span class="line">        <span class="keyword">if</span>(options.<span class="property">expires</span> &amp;&amp; (<span class="keyword">typeof</span> options.<span class="property">expires</span> == <span class="string">&#x27;number&#x27;</span> || options.<span class="property">expires</span>.<span class="property">toUTCString</span>))&#123;</span><br><span class="line">            <span class="keyword">var</span> date;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> options.<span class="property">expires</span> == <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">                date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">                date.<span class="title function_">setTime</span>(date.<span class="title function_">getTime</span>() + (options.<span class="property">expires</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                date = options.<span class="property">expires</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            expires = <span class="string">&#x27;; expires=&#x27;</span>+date.<span class="title function_">toUTCString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> path = options.<span class="property">path</span> ? <span class="string">&#x27;; path=&#x27;</span>+options.<span class="property">path</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> domain = options.<span class="property">domain</span> ? <span class="string">&#x27;; domain=&#x27;</span>+options.<span class="property">domain</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> secure = options.<span class="property">secure</span> ? <span class="string">&#x27;; secure&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="comment">//写入cookie</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">cookie</span> = [name, <span class="string">&#x27;=&#x27;</span>, <span class="built_in">encodeURIComponent</span>(value), expires, path, domain, secure].<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//读取cookie</span></span><br><span class="line">        <span class="keyword">var</span> cookValue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">cookie</span> &amp;&amp; <span class="variable language_">document</span>.<span class="property">cookie</span> != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> cookie = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = cookie.<span class="property">length</span>; i &lt; len; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> c = cookie[i].<span class="title function_">replace</span>(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span>(c.<span class="title function_">substring</span>(<span class="number">0</span>, name.<span class="property">length</span> + <span class="number">1</span>) == (name + <span class="string">&#x27;=&#x27;</span>))&#123;</span><br><span class="line">                    cookValue = <span class="built_in">decodeURIComponent</span>(c.<span class="title function_">substring</span>(name.<span class="property">length</span> + <span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line"><span class="title class_">Cookie</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;Jununx&quot;</span>);</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="title class_">Cookie</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="title class_">Cookie</span>(<span class="string">&quot;user&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hertzbeat</title>
      <link href="/2022/02/02/docker/docker/"/>
      <url>/2022/02/02/docker/docker/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="hertzbeat"><a href="#hertzbeat" class="headerlink" title="hertzbeat"></a>hertzbeat</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#监控</span></span><br><span class="line">docker run -d -p 1157:1157 -p 1158:1158 -e LANG=zh_CN.UTF-8 -e TZ=Asia/Shanghai -v /root/hertzbeat//data:/opt/hertzbeat/data -v /root/hertzbeat/logs:/opt/hertzbeat/logs -v /r</span><br><span class="line"></span><br><span class="line">oot/hertzbeat/application.yml:/opt/hertzbeat/config/application.yml -v /root/hertzbeat/sureness.yml:/opt/hertzbeat/config/sureness.yml --restart=always --name hertzbeat tancloud/hertzbeat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 采集器</span></span><br><span class="line">docker run -d -e IDENTITY=custom-collector-name -e MODE=public -e MANAGER_HOST=127.0.0.1 -e MANAGER_PORT=1158 --name hertzbeat-collector tancloud/hertzbeat-collector</span><br></pre></td></tr></table></figure><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run -itd --restart=always -p 3306:3306 --name mysql -v /home/ubuntu/docker_config/mysql/log:/var/log/mysql -v /home/ubuntu/docker_config/mysql/data:/var/lib/mysql -v /home/ubuntu/docker_config/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=lideshan mysql:5.7</span><br></pre></td></tr></table></figure><h1 id="mongo"><a href="#mongo" class="headerlink" title="mongo"></a>mongo</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run -itd --restart=always -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=lideshan -e MONGO_INITDB_ROOT_PASSWORD=lideshan -v /home/ubuntu/docker_config/mongo/db:/data/db mongo</span><br></pre></td></tr></table></figure><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /home/ubuntu/docker_config/redis/redis.conf</span><br><span class="line">sudo docker run -itd --restart=always -p 6379:6379 --name redis -v /home/ubuntu/docker_config/redis/data:/data -v /home/ubuntu/docker_config/redis/conf:/etc/redis redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h1 id="域名扫描"><a href="#域名扫描" class="headerlink" title="域名扫描"></a>域名扫描</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3000:3000 lissy93/web-check</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://github.com/Lissy93/web-check">GitHub - Lissy93&#x2F;web-check: 🕵️‍♂️ All-in-one OSINT tool for analysing any website</a></p><h1 id="自动解密"><a href="#自动解密" class="headerlink" title="自动解密"></a>自动解密</h1><p><a href="https://github.com/Ciphey/Ciphey">GitHub - Ciphey&#x2F;Ciphey: ⚡ Automatically decrypt encryptions without knowing the key or cipher, decode encodings, and crack hashes ⚡</a></p><h1 id="bt聚合"><a href="#bt聚合" class="headerlink" title="bt聚合"></a>bt聚合</h1><p><a href="https://github.com/Jackett/Jackett">GitHub - Jackett&#x2F;Jackett: API Support for your favorite torrent trackers</a></p><h1 id="生成别具一格的头像"><a href="#生成别具一格的头像" class="headerlink" title="生成别具一格的头像"></a>生成别具一格的头像</h1><p><a href="https://github.com/TencentARC/PhotoMaker">GitHub - TencentARC&#x2F;PhotoMaker: PhotoMaker</a></p><h1 id="i茅台预约"><a href="#i茅台预约" class="headerlink" title="i茅台预约"></a>i茅台预约</h1><p><a href="https://www.52pojie.cn/thread-1890089-1-1.html">提示信息 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>Mrdoc<br>    <a href="https://doc.mrdoc.pro/doc/3958/">官方 Docker 镜像部署 - MrDoc安装手册 - MrDoc觅思文档 - 文档站</a><a href=""></a><br>Onenav</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run -itd --name=<span class="string">&quot;nav&quot;</span> -p 3000:80 -v /home/dmai/nav:/data/wwwroot/default/data helloz/onenav</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装es及kibana</title>
      <link href="/2022/02/02/docker/docker_es_kib/"/>
      <url>/2022/02/02/docker/docker_es_kib/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="机器"><a href="#机器" class="headerlink" title="机器"></a>机器</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os:ubuntu22.04-lts</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install docker.io</span><br><span class="line"><span class="comment"># 配置docker加速</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://dockerproxy.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://mirror.baidubce.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.nju.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://mirror.ccs.tencentyun.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建一个elastic的网络"><a href="#创建一个elastic的网络" class="headerlink" title="创建一个elastic的网络"></a>创建一个elastic的网络</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create elastic</span><br></pre></td></tr></table></figure><h1 id="拉取elastic镜像"><a href="#拉取elastic镜像" class="headerlink" title="拉取elastic镜像"></a>拉取elastic镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:7.17.6</span><br></pre></td></tr></table></figure><h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --restart=always --name es01-test --net elastic -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -d docker.elastic.co/elasticsearch/elasticsearch:7.17.6</span><br></pre></td></tr></table></figure><h1 id="拉取kibana镜像"><a href="#拉取kibana镜像" class="headerlink" title="拉取kibana镜像"></a>拉取kibana镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull docker.elastic.co/kibana/kibana:7.17.6</span><br></pre></td></tr></table></figure><h1 id="创建kibana容器"><a href="#创建kibana容器" class="headerlink" title="创建kibana容器"></a>创建kibana容器</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --restart=always --name kib01-test --net elastic -p 5601:5601 -e &quot;ELASTICSEARCH_HOSTS=http://es01-test:9200&quot; -d docker.elastic.co/kibana/kibana:7.17.6</span><br></pre></td></tr></table></figure><h1 id="可选配置-添加密码"><a href="#可选配置-添加密码" class="headerlink" title="可选配置(添加密码)"></a>可选配置(添加密码)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入容器</span><br><span class="line">docker exec -it es01-test /bin/bash</span><br><span class="line"># 切换到config文件夹</span><br><span class="line">-&gt; cd config </span><br><span class="line"># 进行配置</span><br><span class="line">-&gt; echo xpack.security.enabled: true &gt;&gt; elasticsearch.yml</span><br><span class="line">-&gt; echo xpack.license.self_generated.type: basic &gt;&gt; elasticsearch.yml</span><br><span class="line">-&gt; echo xpack.security.transport.ssl.enabled: true &gt;&gt; elasticsearch.yml</span><br><span class="line">-&gt; echo xpack.security.authc.api_key.enabled: true &gt;&gt; elasticsearch.yml</span><br><span class="line">-&gt; exit</span><br><span class="line"># 重启容器</span><br><span class="line">docker restart es01-test</span><br><span class="line"># 再次进入容器配置密码</span><br><span class="line">docker exec -it es01-test /bin/bash</span><br><span class="line"># 切换到bin目录</span><br><span class="line">-&gt; cd bin</span><br><span class="line"># 开始设置密码</span><br><span class="line">-&gt; elasticsearch-setup-passwords interactive</span><br><span class="line">-&gt; 输入各个的密码,有4个密码elastic, kibana, logstash_system,beats_system</span><br><span class="line"># 可选是否安装中文分词插件</span><br><span class="line">-&gt; cd ../plugin</span><br><span class="line">-&gt; elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.17.6/elasticsearch-analysis-ik-7.17.6.zip</span><br><span class="line">-&gt; exit</span><br><span class="line"># 进入kibana容器</span><br><span class="line">docker exec -it kib01-test /bin/bash</span><br><span class="line"># 切换到config文件夹</span><br><span class="line">-&gt; cd config</span><br><span class="line"># 开始配置</span><br><span class="line">-&gt; echo &gt;&gt; kibana.yml</span><br><span class="line">-&gt; echo elasticsearch.username: &quot;elastic&quot; &gt;&gt; kibana.yml</span><br><span class="line">-&gt; echo elasticsearch.password: &quot;xxxx&quot; &gt;&gt; kibana.yml   # xxxx是设置的密码</span><br><span class="line">-&gt; echo i18n.locale: &quot;zh-CN&quot; &gt;&gt; kibana.yml   # 设置中文,可以不选</span><br><span class="line">exit</span><br><span class="line"># 重启容器</span><br><span class="line">docker restart kib01-test</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-hadoop</title>
      <link href="/2022/02/02/docker/docker_hadoop/"/>
      <url>/2022/02/02/docker/docker_hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h1><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  namenode:</span><br><span class="line">    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8</span><br><span class="line">    container_name: namenode</span><br><span class="line">    ports:</span><br><span class="line">      - 9870:9870</span><br><span class="line">      - 9000:9000</span><br><span class="line">    volumes:</span><br><span class="line">      - ./hadoop/dfs/name:/hadoop/dfs/name</span><br><span class="line">      - ./input:/input</span><br><span class="line">    environment:</span><br><span class="line">      - CLUSTER_NAME=test</span><br><span class="line">    env_file:</span><br><span class="line">      - ./hadoop.env</span><br><span class="line"></span><br><span class="line">  datanode:</span><br><span class="line">    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8</span><br><span class="line">    container_name: datanode</span><br><span class="line">    depends_on:</span><br><span class="line">      - namenode</span><br><span class="line">    volumes:</span><br><span class="line">      - ./hadoop/dfs/data:/hadoop/dfs/data</span><br><span class="line">    environment:</span><br><span class="line">      SERVICE_PRECONDITION: &quot;namenode:9870&quot;</span><br><span class="line">    env_file:</span><br><span class="line">      - ./hadoop.env</span><br><span class="line">  </span><br><span class="line">  resourcemanager:</span><br><span class="line">    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8</span><br><span class="line">    container_name: resourcemanager</span><br><span class="line">    environment:</span><br><span class="line">      SERVICE_PRECONDITION: &quot;namenode:9000 namenode:9870 datanode:9864&quot;</span><br><span class="line">    env_file:</span><br><span class="line">      - ./hadoop.env</span><br><span class="line"></span><br><span class="line">  nodemanager1:</span><br><span class="line">    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8</span><br><span class="line">    container_name: nodemanager</span><br><span class="line">    environment:</span><br><span class="line">      SERVICE_PRECONDITION: &quot;namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088&quot;</span><br><span class="line">    env_file:</span><br><span class="line">      - ./hadoop.env</span><br><span class="line">  </span><br><span class="line">  historyserver:</span><br><span class="line">    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8</span><br><span class="line">    container_name: historyserver</span><br><span class="line">    environment:</span><br><span class="line">      SERVICE_PRECONDITION: &quot;namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./hadoop/yarn/timeline:/hadoop/yarn/timeline</span><br><span class="line">    env_file:</span><br><span class="line">      - ./hadoop.env</span><br></pre></td></tr></table></figure><h2 id="hadoop-env"><a href="#hadoop-env" class="headerlink" title="hadoop.env"></a>hadoop.env</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CORE_CONF_fs_defaultFS=hdfs://namenode:9000</span><br><span class="line">CORE_CONF_hadoop_http_staticuser_user=root</span><br><span class="line">CORE_CONF_hadoop_proxyuser_hue_hosts=*</span><br><span class="line">CORE_CONF_hadoop_proxyuser_hue_groups=*</span><br><span class="line">CORE_CONF_io_compression_codecs=org.apache.hadoop.io.compress.SnappyCodec</span><br><span class="line"></span><br><span class="line">HDFS_CONF_dfs_webhdfs_enabled=true</span><br><span class="line">HDFS_CONF_dfs_permissions_enabled=false</span><br><span class="line">HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check=false</span><br><span class="line"></span><br><span class="line">YARN_CONF_yarn_log___aggregation___enable=true</span><br><span class="line">YARN_CONF_yarn_log_server_url=http://historyserver:8188/applicationhistory/logs/</span><br><span class="line">YARN_CONF_yarn_resourcemanager_recovery_enabled=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_store_class=org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore</span><br><span class="line">YARN_CONF_yarn_resourcemanager_scheduler_class=org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler</span><br><span class="line">YARN_CONF_yarn_scheduler_capacity_root_default_maximum___allocation___mb=8192</span><br><span class="line">YARN_CONF_yarn_scheduler_capacity_root_default_maximum___allocation___vcores=4</span><br><span class="line">YARN_CONF_yarn_resourcemanager_fs_state___store_uri=/rmstate</span><br><span class="line">YARN_CONF_yarn_resourcemanager_system___metrics___publisher_enabled=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_hostname=resourcemanager</span><br><span class="line">YARN_CONF_yarn_resourcemanager_address=resourcemanager:8032</span><br><span class="line">YARN_CONF_yarn_resourcemanager_scheduler_address=resourcemanager:8030</span><br><span class="line">YARN_CONF_yarn_resourcemanager_resource__tracker_address=resourcemanager:8031</span><br><span class="line">YARN_CONF_yarn_timeline___service_enabled=true</span><br><span class="line">YARN_CONF_yarn_timeline___service_generic___application___history_enabled=true</span><br><span class="line">YARN_CONF_yarn_timeline___service_hostname=historyserver</span><br><span class="line">YARN_CONF_mapreduce_map_output_compress=true</span><br><span class="line">YARN_CONF_mapred_map_output_compress_codec=org.apache.hadoop.io.compress.SnappyCodec</span><br><span class="line">YARN_CONF_yarn_nodemanager_resource_memory___mb=16384</span><br><span class="line">YARN_CONF_yarn_nodemanager_resource_cpu___vcores=8</span><br><span class="line">YARN_CONF_yarn_nodemanager_disk___health___checker_max___disk___utilization___per___disk___percentage=98.5</span><br><span class="line">YARN_CONF_yarn_nodemanager_remote___app___log___dir=/app-logs</span><br><span class="line">YARN_CONF_yarn_nodemanager_aux___services=mapreduce_shuffle</span><br><span class="line"></span><br><span class="line">MAPRED_CONF_mapreduce_framework_name=yarn</span><br><span class="line">MAPRED_CONF_mapred_child_java_opts=-Xmx4096m</span><br><span class="line">MAPRED_CONF_mapreduce_map_memory_mb=4096</span><br><span class="line">MAPRED_CONF_mapreduce_reduce_memory_mb=8192</span><br><span class="line">MAPRED_CONF_mapreduce_map_java_opts=-Xmx3072m</span><br><span class="line">MAPRED_CONF_mapreduce_reduce_java_opts=-Xmx6144m</span><br><span class="line">MAPRED_CONF_yarn_app_mapreduce_am_env=HADOOP_MAPRED_HOME=/data/docker-compose/hadoop-3.2.1/</span><br><span class="line">MAPRED_CONF_mapreduce_map_env=HADOOP_MAPRED_HOME=/data/docker-compose/hadoop-3.2.1/</span><br><span class="line">MAPRED_CONF_mapreduce_reduce_env=HADOOP_MAPRED_HOME=/data/docker-compose/hadoop-3.2.1/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> hadoop </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单搭建mongodb环境</title>
      <link href="/2022/02/02/docker/docker_mongodb_simaple_use/"/>
      <url>/2022/02/02/docker/docker_mongodb_simaple_use/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h1><h2 id="拉镜像"><a href="#拉镜像" class="headerlink" title="拉镜像"></a>拉镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mongo:4.4-rc</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">windows指定数据存放路径</span><br><span class="line">docker run --rm --name mongo -d -p 27017:27017 -v D:\Mongodb\master\data:/data/db mongo:4.4-rc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单搭建neo4j环境</title>
      <link href="/2022/02/02/docker/docker_neo4j/"/>
      <url>/2022/02/02/docker/docker_neo4j/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="neo4j"><a href="#neo4j" class="headerlink" title="neo4j"></a>neo4j</h1><h2 id="dockerfile-yaml"><a href="#dockerfile-yaml" class="headerlink" title="dockerfile.yaml"></a>dockerfile.yaml</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker-compose.yaml</span><br><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  neo4j:</span><br><span class="line">    image: neo4j</span><br><span class="line">    volumes:</span><br><span class="line"></span><br><span class="line">      - ./db/neo4j/conf:/var/lib/neo4j/conf:rw</span><br><span class="line">      - ./db/neo4j/mnt:/var/lib/neo4j/import:rw</span><br><span class="line">      - ./db/neo4j/plugins:/plugins:rw</span><br><span class="line">      - ./db/neo4j/data:/data:rw</span><br><span class="line">      - ./db/neo4j/logs:/var/lib/neo4j/logs:rw</span><br><span class="line"></span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line"></span><br><span class="line">      - 7474:7474</span><br><span class="line">      - 7687:7687</span><br><span class="line"></span><br><span class="line">    environment:</span><br><span class="line"></span><br><span class="line">      - NEO4J_dbms_memory_heap_maxSize=4G</span><br><span class="line">      - NEO4J_AUTH=neo4j/123456 #修改默认用户密码</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --publish=7474:7474 --publish=7687:7687 --name neo4j -d neo4j</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> neo4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单搭建redis环境</title>
      <link href="/2022/02/02/docker/docker_redis/"/>
      <url>/2022/02/02/docker/docker_redis/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name some-redis -p 6379:6379 -d redis</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker配置加速</title>
      <link href="/2022/02/02/docker/docker%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F/"/>
      <url>/2022/02/02/docker/docker%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;builder&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;gc&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;defaultKeepStorage&quot;</span>: <span class="string">&quot;20GB&quot;</span>,</span><br><span class="line">      <span class="string">&quot;enabled&quot;</span>: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;experimental&quot;</span>: false,</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://docker.hlds.fun&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://registry.hub.docker.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://mirror.baidubce.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.nju.edu.cn&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> windows </tag>
            
            <tag> mongo </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows使用docker部署mongo数据持久化的坑</title>
      <link href="/2022/02/02/docker/mongodb_docker/"/>
      <url>/2022/02/02/docker/mongodb_docker/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.docker.com/get-started</span><br><span class="line">下载安装即可</span><br></pre></td></tr></table></figure><h1 id="拉取mongo镜像"><a href="#拉取mongo镜像" class="headerlink" title="拉取mongo镜像"></a>拉取mongo镜像</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mongo:latest</span><br><span class="line"># 视网络情况,快的话几秒就可以拉取慢的话几分钟</span><br></pre></td></tr></table></figure><h1 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume create --name mongodata</span><br><span class="line"># 删除的命令是</span><br><span class="line">docker volume rm XXX</span><br></pre></td></tr></table></figure><h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 27017:27017 --name=mongodb -v mongodata:/data/db -d mongo</span><br></pre></td></tr></table></figure><h1 id="others"><a href="#others" class="headerlink" title="others"></a>others</h1><p>之后容器被误删,数据卷都还在的，使用上面的命令创建容器,数据还在</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> windows </tag>
            
            <tag> mongo </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-容器自动重启</title>
      <link href="/2022/02/02/docker/%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/"/>
      <url>/2022/02/02/docker/%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="容器崩掉之后自动重启"><a href="#容器崩掉之后自动重启" class="headerlink" title="容器崩掉之后自动重启"></a>容器崩掉之后自动重启</h1><h2 id="容器未创建时"><a href="#容器未创建时" class="headerlink" title="容器未创建时"></a>容器未创建时</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always --name 设置容器名 使用的镜像</span><br><span class="line">--restart具体参数值详细信息：</span><br><span class="line">    no　　　　　　　 // 默认策略,容器退出时不重启容器；</span><br><span class="line">    on-failure　　  // 在容器非正常退出时（退出状态非0）才重新启动容器；</span><br><span class="line">    on-failure:3    // 在容器非正常退出时重启容器，最多重启3次；</span><br><span class="line">    always　　　　  // 无论退出状态是如何，都重启容器；</span><br><span class="line">    unless-stopped  // 在容器退出时总是重启容器，但是不考虑在 Docker 守护进程启动时就已经停止了的容器。</span><br></pre></td></tr></table></figure><h2 id="容器已经创建"><a href="#容器已经创建" class="headerlink" title="容器已经创建"></a>容器已经创建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker update --restart=always 容器ID(或者容器名)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> dev </tag>
            
            <tag> restart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2022/02/02/git/git%20dev/"/>
      <url>/2022/02/02/git/git%20dev/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="收藏"><a href="#收藏" class="headerlink" title="收藏"></a>收藏</h1><p><a href="https://github.com/hehehai/x-hiring?tab=readme-ov-file">GitHub - hehehai&#x2F;x-hiring: 🤗 每日最新招聘信息，使用 Google AI 提取摘要</a><br><a href="https://github.com/Ciphey/Ciphey">GitHub - Ciphey&#x2F;Ciphey: ⚡ Automatically decrypt encryptions without knowing the key or cipher, decode encodings, and crack hashes ⚡</a><br><a href="https://github.com/6174/comflowyspace">GitHub - 6174&#x2F;comflowyspace: Comflowyspace is an intuitive, user-friendly, open-source AI tool for generating images and videos, democratizing access to AI technology.</a><br><a href="https://www.comflowy.com/zh-CN/space">ComflowySpace 介绍 – Comflowy</a><br>无损放大 <a href="https://www.upscayl.org/#desktop">Upscayl - Free AI Image Upscaler</a>  <a href="https://github.com/upscayl/upscayl">GitHub - upscayl&#x2F;upscayl: 🆙 Upscayl - #1 Free and Open Source AI Image Upscaler for Linux, MacOS and Windows.</a><br><a href="https://github.com/xiaohucode/yidaRule/tree/main">GitHub - xiaohucode&#x2F;yidaRule: 益达规则仓库</a><br><a href="https://novamss.com/">NovaMSS | 新一代音乐源分离工具</a><br><a href="https://github.com/Tichau/FileConverter">GitHub - Tichau&#x2F;FileConverter: File Converter is a very simple tool which allows you to convert and compress files using the context menu in windows explorer.</a>  <a href="https://file-converter.org/">File Converter - Convert your files in just 2 clicks!</a><br><a href="https://www.jihujiasuqi.com/">极狐游戏免费加速器 - 永久免费，不玩套路 【官方网站】</a><br><a href="https://github.com/TGSAN/CMWTAT_Digital_Edition">GitHub - TGSAN&#x2F;CMWTAT_Digital_Edition: CloudMoe Windows 10&#x2F;11 Activation Toolkit get digital license, the best open source Win 10&#x2F;11 activator in GitHub. GitHub 上最棒的开源 Win10&#x2F;Win11 数字权利（数字许可证）激活工具！</a><br><a href="https://github.com/pinokiocomputer/pinokio">GitHub - pinokiocomputer&#x2F;pinokio: AI Browser</a><br><a href="https://github.com/shugougou/shugougou">GitHub - shugougou&#x2F;shugougou: 薯狗狗小红书专业数据分析竞品账号监控工具</a> <a href="https://gi8xqz1t9kf.feishu.cn/docx/SqXPdHgkDol1pEx3ZNLcjneUn2b">薯狗狗截流工具下载安装使用教程 - 飞书云文档</a><br><a href="https://github.com/jianchang512/clone-voice">GitHub - jianchang512&#x2F;clone-voice: A sound cloning tool with a web interface, using your voice or any sound to record audio &#x2F; 一个带web界面的声音克隆工具，使用你的音色或任意声音来录制音频</a><br><a href="https://github.com/YaoFANGUK/video-subtitle-remover">GitHub - YaoFANGUK&#x2F;video-subtitle-remover: 基于AI的图片&#x2F;视频硬字幕去除、文本水印去除，无损分辨率生成去字幕、去水印后的图片&#x2F;视频文件。无需申请第三方API，本地实现。AI-based tool for removing hard-coded subtitles and text-like watermarks from videos or Pictures.</a><br><a href="https://www.javplayerfree.com/cn/">JavPlayer 介绍</a><br><a href="https://speechless.fun/">MemoMe 微博备份、评论备份、图片备份、收藏备份、导出 PDF</a><br><a href="https://omii.top/">奥秘博客| 探索科技·分享乐趣</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高版本labelme格式转换为低版本格式</title>
      <link href="/2022/02/02/labelme/%E9%AB%98%E7%89%88%E6%9C%AClabelme%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BD%8E%E7%89%88%E6%9C%AC%E6%A0%BC%E5%BC%8F/"/>
      <url>/2022/02/02/labelme/%E9%AB%98%E7%89%88%E6%9C%AClabelme%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BD%8E%E7%89%88%E6%9C%AC%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">deatil_data=<span class="string">r&#x27;&#x27;</span></span><br><span class="line">save_path=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(deatil_data):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> i.endswith(<span class="string">&#x27;json&#x27;</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    temp_data=os.path.join(deatil_data,i)</span><br><span class="line">    <span class="built_in">print</span>(temp_data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(temp_data,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        data=json.loads(f.read())</span><br><span class="line">    template_data = &#123;</span><br><span class="line">        <span class="string">&quot;version&quot;</span>: <span class="string">&quot;3.16.7&quot;</span>,</span><br><span class="line">        <span class="string">&quot;flags&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;shapes&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;lineColor&quot;</span>: [</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">128</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;fillColor&quot;</span>: [</span><br><span class="line">            <span class="number">255</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">128</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;imagePath&quot;</span>: data[<span class="string">&#x27;imagePath&#x27;</span>],</span><br><span class="line">        <span class="string">&quot;imageHeight&quot;</span>: data[<span class="string">&#x27;imageHeight&#x27;</span>],</span><br><span class="line">        <span class="string">&quot;imageWidth&quot;</span>: data[<span class="string">&#x27;imageWidth&#x27;</span>],</span><br><span class="line">        <span class="string">&quot;imageData&quot;</span>: data[<span class="string">&#x27;imageData&#x27;</span>],</span><br><span class="line">    &#125; </span><br><span class="line">    shapes=[]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> data[<span class="string">&#x27;shapes&#x27;</span>]:</span><br><span class="line">        dict_point=&#123;</span><br><span class="line">                <span class="string">&quot;label&quot;</span>:j[<span class="string">&#x27;label&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;line_color&quot;</span>:<span class="literal">None</span>,</span><br><span class="line">                <span class="string">&quot;fill_color&quot;</span>:<span class="literal">None</span>,</span><br><span class="line">                <span class="string">&quot;points&quot;</span>:j[<span class="string">&#x27;points&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;shape_type&quot;</span>:j[<span class="string">&#x27;shape_type&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;flags&quot;</span>:&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        shapes.append(dict_point)</span><br><span class="line">    template_data[<span class="string">&#x27;shapes&#x27;</span>]=shapes</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(temp_data,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> ff:</span><br><span class="line">        ff.write(json.dumps(template_data,ensure_ascii=<span class="literal">False</span>,indent=<span class="number">4</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> labelme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习的一些地址</title>
      <link href="/2022/02/02/learn/%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9C%B0%E5%9D%80/"/>
      <url>/2022/02/02/learn/%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><h2 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h2><ul><li><a href="https://edu.huaweicloud.com/programs">https://edu.huaweicloud.com/programs</a></li><li><a href="https://mirrors.huaweicloud.com/home">https://mirrors.huaweicloud.com/home</a></li><li><a href="https://mirrors.huaweicloud.com/os/image">https://mirrors.huaweicloud.com/os/image</a></li></ul></li><li><h2 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h2><ul><li><a href="https://cloud.tencent.com/developer/labs">https://cloud.tencent.com/developer/labs</a></li><li><a href="https://cloud.tencent.com/developer/inventory">https://cloud.tencent.com/developer/inventory</a></li><li><a href="https://cloud.tencent.com/developer/devdocs">https://cloud.tencent.com/developer/devdocs</a></li><li><a href="https://cloud.tencent.com/developer/column">https://cloud.tencent.com/developer/column</a></li><li><a href="https://ke.qq.com/course/list?mt=1001&st=2054&tt=3394">https://ke.qq.com/course/list?mt=1001&amp;st=2054&amp;tt=3394</a></li><li><a href="https://cloud.tencent.com/edu/learning?from=gw.head">https://cloud.tencent.com/edu/learning?from=gw.head</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
            <tag> 社区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习的几个社区</title>
      <link href="/2022/02/02/learn/%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%87%A0%E4%B8%AA%E7%A4%BE%E5%8C%BA/"/>
      <url>/2022/02/02/learn/%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%87%A0%E4%B8%AA%E7%A4%BE%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><a href="https://www.chuanjiabing.com/cate/46/seq/0">穿甲兵</a></li><li><a href="https://github.com/skygongque">github爬虫大佬</a></li><li><a href="https://cloud.tencent.com/developer/article/1849382">美观的日志管理库(loguru)</a></li><li><a href="https://www.weishidong.com/">韦世东</a></li><li><a href="https://cuiqingcai.com/7776.html">崔庆才</a></li><li><a href="http://bbs.nightteam.cn/">夜幕</a><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">有补充的欢迎评论</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UserAgent-python解析</title>
      <link href="/2022/02/02/python/UserAgent-python%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/02/02/python/UserAgent-python%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><a href="https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E4%BB%A3%E7%90%86">用户代理</a></p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install ua-parser</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from ua_parser import user_agent_parser</span><br><span class="line">import pprint</span><br><span class="line">pp = pprint.PrettyPrinter(indent=4)</span><br><span class="line">ua_string = &#x27;Mozilla/5.0 (Linux; Android 6.0.1; NX531J Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 MQQBrowser/6.2 TBS/044605 Mobile Safari/537.36 MMWEBID/9629 MicroMessenger/7.0.3.1400(0x27000334) Process/tools NetType/WIFI Language/zh_CN&#x27;</span><br><span class="line">parsed_string = user_agent_parser.Parse(ua_string)</span><br><span class="line">pp.pprint(parsed_string)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;   &#x27;device&#x27;: &#123;   &#x27;brand&#x27;: &#x27;Generic_Android&#x27;,</span><br><span class="line">                  &#x27;family&#x27;: &#x27;NX531J&#x27;,</span><br><span class="line">                  &#x27;model&#x27;: &#x27;NX531J&#x27;&#125;,</span><br><span class="line">    &#x27;os&#x27;: &#123;   &#x27;family&#x27;: &#x27;Android&#x27;,</span><br><span class="line">              &#x27;major&#x27;: &#x27;6&#x27;,</span><br><span class="line">              &#x27;minor&#x27;: &#x27;0&#x27;,</span><br><span class="line">              &#x27;patch&#x27;: &#x27;1&#x27;,</span><br><span class="line">              &#x27;patch_minor&#x27;: None&#125;,</span><br><span class="line">    &#x27;string&#x27;: &#x27;Mozilla/5.0 (Linux; Android 6.0.1; NX531J Build/MMB29M; wv) &#x27;</span><br><span class="line">              &#x27;AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 &#x27;</span><br><span class="line">              &#x27;Chrome/66.0.3359.126 MQQBrowser/6.2 TBS/044605 Mobile &#x27;</span><br><span class="line">              &#x27;Safari/537.36 MMWEBID/9629 &#x27;</span><br><span class="line">              &#x27;MicroMessenger/7.0.3.1400(0x27000334) Process/tools &#x27;</span><br><span class="line">              &#x27;NetType/WIFI Language/zh_CN&#x27;,</span><br><span class="line">    &#x27;user_agent&#x27;: &#123;   &#x27;family&#x27;: &#x27;Chrome Mobile WebView&#x27;,</span><br><span class="line">                      &#x27;major&#x27;: &#x27;66&#x27;,</span><br><span class="line">                      &#x27;minor&#x27;: &#x27;0&#x27;,</span><br><span class="line">                      &#x27;patch&#x27;: &#x27;3359&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pyyaml ua-parser user-agents</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from user_agents import parse</span><br><span class="line"># iPhone&#x27;s user agent string</span><br><span class="line">ua_string = &#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B179 Safari/7534.48.3&#x27;</span><br><span class="line">user_agent = parse(ua_string)</span><br><span class="line"></span><br><span class="line"># Accessing user agent&#x27;s browser attributes</span><br><span class="line">user_agent.browser  # returns Browser(family=u&#x27;Mobile Safari&#x27;, version=(5, 1), version_string=&#x27;5.1&#x27;)</span><br><span class="line">user_agent.browser.family  # returns &#x27;Mobile Safari&#x27;</span><br><span class="line">user_agent.browser.version  # returns (5, 1)</span><br><span class="line">user_agent.browser.version_string   # returns &#x27;5.1&#x27;</span><br><span class="line"></span><br><span class="line"># Accessing user agent&#x27;s operating system properties</span><br><span class="line">user_agent.os  # returns OperatingSystem(family=u&#x27;iOS&#x27;, version=(5, 1), version_string=&#x27;5.1&#x27;)</span><br><span class="line">user_agent.os.family  # returns &#x27;iOS&#x27;user_agent.os.version  # returns (5, 1)</span><br><span class="line">user_agent.os.version_string  # returns &#x27;5.1&#x27;# Accessing </span><br><span class="line">user agent&#x27;s device properties</span><br><span class="line">user_agent.device  </span><br><span class="line"></span><br><span class="line"># returns Device(family=u&#x27;iPhone&#x27;, brand=u&#x27;Apple&#x27;, model=u&#x27;iPhone&#x27;)</span><br><span class="line">user_agent.device.family  # returns &#x27;iPhone&#x27;</span><br><span class="line">user_agent.device.brand # returns &#x27;Apple&#x27;</span><br><span class="line">user_agent.device.model # returns &#x27;iPhone&#x27;</span><br><span class="line"></span><br><span class="line">#Viewing a pretty string version</span><br><span class="line">str(user_agent) # returns &quot;iPhone / iOS 5.1 / Mobile Safari 5.1&quot;</span><br></pre></td></tr></table></figure><h2 id="高级功能："><a href="#高级功能：" class="headerlink" title="高级功能："></a>高级功能：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from user_agents import parse</span><br><span class="line"></span><br><span class="line"># Let&#x27;s start from an old, non touch Blackberry device</span><br><span class="line">ua_string = &#x27;BlackBerry9700/5.0.0.862 Profile/MIDP-2.1 Configuration/CLDC-1.1 VendorID/331 UNTRUSTED/1.0 3gpp-gba&#x27;</span><br><span class="line">user_agent = parse(ua_string)</span><br><span class="line">user_agent.is_mobile # returns True</span><br><span class="line">user_agent.is_tablet # returns False</span><br><span class="line">user_agent.is_touch_capable # returns False</span><br><span class="line">user_agent.is_pc # returns False</span><br><span class="line">user_agent.is_bot # returns False</span><br><span class="line">str(user_agent) # returns &quot;BlackBerry 9700 / BlackBerry OS 5 / BlackBerry 9700&quot;</span><br><span class="line"></span><br><span class="line"># Now a Samsung Galaxy S3</span><br><span class="line">ua_string = &#x27;Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&#x27;</span><br><span class="line">user_agent = parse(ua_string)</span><br><span class="line">user_agent.is_mobile # returns True</span><br><span class="line">user_agent.is_tablet # returns False</span><br><span class="line">user_agent.is_touch_capable # returns True</span><br><span class="line">user_agent.is_pc # returns False</span><br><span class="line">user_agent.is_bot # returns False</span><br><span class="line">str(user_agent) # returns &quot;Samsung GT-I9300 / Android 4.0.4 / Android 4.0.4&quot;</span><br><span class="line"></span><br><span class="line"># iPad&#x27;s user agent string</span><br><span class="line">ua_string = &#x27;Mozilla/5.0(iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10&#x27;</span><br><span class="line">user_agent = parse(ua_string)</span><br><span class="line">user_agent.is_mobile # returns False</span><br><span class="line">user_agent.is_tablet # returns True</span><br><span class="line">user_agent.is_touch_capable # returns True</span><br><span class="line">user_agent.is_pc # returns False</span><br><span class="line">user_agent.is_bot # returns False</span><br><span class="line">str(user_agent) # returns &quot;iPad / iOS 3.2 / Mobile Safari 4.0.4&quot;</span><br><span class="line"></span><br><span class="line"># Kindle Fire&#x27;s user agent string</span><br><span class="line">ua_string = &#x27;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-us; Silk/1.1.0-80) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16 Silk-Accelerated=true&#x27;</span><br><span class="line">user_agent = parse(ua_string)</span><br><span class="line">user_agent.is_mobile # returns False</span><br><span class="line">user_agent.is_tablet # returns True</span><br><span class="line">user_agent.is_touch_capable # returns True</span><br><span class="line">user_agent.is_pc # returns False</span><br><span class="line">user_agent.is_bot # returns False</span><br><span class="line">str(user_agent) # returns &quot;Kindle / Android / Amazon Silk 1.1.0-80&quot;</span><br><span class="line"></span><br><span class="line"># Touch capable Windows 8 device</span><br><span class="line">ua_string = &#x27;Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0; Touch)&#x27;</span><br><span class="line">user_agent = parse(ua_string)</span><br><span class="line">user_agent.is_mobile # returns False</span><br><span class="line">user_agent.is_tablet # returns False</span><br><span class="line">user_agent.is_touch_capable # returns True</span><br><span class="line">user_agent.is_pc # returns True</span><br><span class="line">user_agent.is_bot # returns False</span><br><span class="line">str(user_agent) # returns &quot;PC / Windows 8 / IE 10&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python常见的加解密</title>
      <link href="/2022/02/02/python/python%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
      <url>/2022/02/02/python/python%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="urlencode加密"><a href="#urlencode加密" class="headerlink" title="urlencode加密"></a>urlencode加密</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urlencode加密</span></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;我爱吃鸡腿&quot;</span></span><br><span class="line">s = urllib.parse.quote(text)</span><br><span class="line"><span class="built_in">print</span>(s) <span class="comment"># %E6%88%91%E7%88%B1%E5%90%83%E9%B8%A1%E8%85%BF</span></span><br><span class="line">u = urllib.parse.unquote(s)</span><br><span class="line"><span class="built_in">print</span>(u) <span class="comment">#我爱吃鸡腿</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"><span class="comment">## unicode加密</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">str1 = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">enStr1 = str1.encode(<span class="string">&#x27;unicode-escape&#x27;</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(enStr1) <span class="comment"># \u4f60\u597d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line">deStr1 = enStr1.encode().decode(<span class="string">&#x27;unicode-escape&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(deStr1) <span class="comment"># 你好</span></span><br></pre></td></tr></table></figure><h2 id="Base64加密"><a href="#Base64加密" class="headerlink" title="Base64加密"></a>Base64加密</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_encode</span>(<span class="params">text</span>):</span><br><span class="line">    encode_data = base64.b64encode(text.encode())</span><br><span class="line">    <span class="keyword">return</span> encode_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_decode</span>(<span class="params">encode_data</span>):</span><br><span class="line">    decode_data = base64.b64decode(encode_data)</span><br><span class="line">    <span class="keyword">return</span> decode_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span></span><br><span class="line">    encode_data = base64_encode(text)</span><br><span class="line">    decode_data = base64_decode(encode_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Base64 编码：&#x27;</span>, encode_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Base64 解码：&#x27;</span>, decode_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Base64 编码： b&#x27;SSBsb3ZlIFB5dGhvbiE=&#x27;</span></span><br><span class="line"><span class="comment"># Base64 解码： b&#x27;I love Python!&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_test1</span>():</span><br><span class="line">    md5 = hashlib.new(<span class="string">&#x27;md5&#x27;</span>, <span class="string">&#x27;I love python!&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_test2</span>():</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(<span class="string">&#x27;I love &#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    md5.update(<span class="string">&#x27;python!&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    md5_test1()  <span class="comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span></span><br><span class="line">    md5_test2()  <span class="comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span></span><br></pre></td></tr></table></figure><h2 id="PBKDF2"><a href="#PBKDF2" class="headerlink" title="PBKDF2"></a>PBKDF2</h2><p>简介：英文名称：Password-Based Key Derivation Function 2，<br>PBKDF2 是 RSA 实验室的公钥加密标准（PKCS）系列的一部分，<br>2017 年发布的 RFC 8018 （PKCS #5 v2.1）推荐使用 PBKDF2 进行密码散列。<br>PBKDF2 将伪随机函数（例如 HMAC），<br>把明文和一个盐值（salt）作为输入参数，然后进行重复运算，并最终产生密钥，<br>如果重复的次数足够大，破解的成本就会变得很高。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Hash <span class="keyword">import</span> SHA1</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Protocol.KDF <span class="keyword">import</span> PBKDF2</span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;I love Python!&#x27;</span></span><br><span class="line">salt = <span class="string">b&#x27;43215678&#x27;</span></span><br><span class="line">result = PBKDF2(text,  salt, count=<span class="number">10</span>, hmac_hash_module=SHA1)</span><br><span class="line">result = binascii.hexlify(result)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h2><p>简介：全称安全哈希算法（英文名称：Secure Hash Algorithm），<br>由美国国家安全局（NSA）所设计，主要适用于数字签名标准<br>（Digital Signature Standard DSS）里面定义的数字签名算法（<br>Digital Signature Algorithm DSA），SHA 通常指 SHA 家族的五个算法，<br>分别是 SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，<br>后四者有时并称为 SHA-2，SHA 是比 MD5 更安全一点的摘要算法，<br>MD5 的密文是 32 位，而 SHA-1 是 40 位，<br>版本越强，密文越长，代价是速度越慢。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha1_test1</span>():</span><br><span class="line">    sha1 = hashlib.new(<span class="string">&#x27;sha1&#x27;</span>, <span class="string">&#x27;I love python!&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha1_test2</span>():</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(<span class="string">&#x27;I love python!&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sha1_test1()  <span class="comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span></span><br><span class="line">    sha1_test2()  <span class="comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span></span><br></pre></td></tr></table></figure><h2 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h2><p>简介：全称散列消息认证码、密钥相关的哈希运算消息认证码<br>（英文名称：Hash-based Message Authentication Code 或者 Keyed-hash Message Authentication Code），<br>于 1996 年提出，1997 年作为 RFC 2104 被公布，HMAC 加密算法是一种安全的基于加密 Hash<br>函数和共享密钥的消息认证协议，它要求通信双方共享密钥 key、约定算法、<br>对报文进行 Hash 运算，形成固定长度的认证码。通信双方<br>通过认证码的校验来确定报文的合法性。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hmac_test1</span>():</span><br><span class="line">    message = <span class="string">b&#x27;I love python!&#x27;</span></span><br><span class="line">    key = <span class="string">b&#x27;secret&#x27;</span></span><br><span class="line">    md5 = hmac.new(key, message, digestmod=<span class="string">&#x27;MD5&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hmac_test2</span>():</span><br><span class="line">    key = <span class="string">&#x27;secret&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    sha1 = hmac.new(key, digestmod=<span class="string">&#x27;sha1&#x27;</span>)</span><br><span class="line">    sha1.update(<span class="string">&#x27;I love &#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    sha1.update(<span class="string">&#x27;Python!&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hmac_test1()  <span class="comment"># 9c503a1f852edcc3526ea56976c38edf</span></span><br><span class="line">    hmac_test2()  <span class="comment"># 2d8449a4292d4bbeed99ce9ea570880d6e19b61a</span></span><br></pre></td></tr></table></figure><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><p>简介：全称数据加密标准（英文名称：Data Encryption Standard），加密与解密使用同一密钥，<br>属于对称加密算法，1977 年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），<br>DES 是一个分组加密算法，使用 56 位的密钥（一般认为密钥是 64 位，<br>但是密钥的每个第 8 位设置为奇偶校验位，所以实际上有效位只有 56 位），<br>由于 56 位密钥长度相对较短，所以 DES 是不安全的，现在基本上已被更高级的加密标准 AES 取代。</p><p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</p><p>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="comment"># 加密模式 CBC，填充方式 PAD_PKCS5</span></span><br><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> des, CBC, PAD_PKCS5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_encrypt</span>(<span class="params">key, text, iv</span>):</span><br><span class="line">    k = des(key, CBC, iv, pad=<span class="literal">None</span>, padmode=PAD_PKCS5)</span><br><span class="line">    en = k.encrypt(text, padmode=PAD_PKCS5)</span><br><span class="line">    <span class="keyword">return</span> binascii.b2a_hex(en)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_decrypt</span>(<span class="params">key, text, iv</span>):</span><br><span class="line">    k = des(key, CBC, iv, pad=<span class="literal">None</span>, padmode=PAD_PKCS5)</span><br><span class="line">    de = k.decrypt(binascii.a2b_hex(text), padmode=PAD_PKCS5)</span><br><span class="line">    <span class="keyword">return</span> de</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    secret_key = <span class="string">&#x27;12345678&#x27;</span>   <span class="comment"># 密钥</span></span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span>   <span class="comment"># 加密对象</span></span><br><span class="line">    iv = secret_key           <span class="comment"># 偏移量</span></span><br><span class="line">    secret_str = des_encrypt(secret_key, text, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密字符串：&#x27;</span>, secret_str)</span><br><span class="line">    clear_str = des_decrypt(secret_key, secret_str, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密字符串：&#x27;</span>, clear_str)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密字符串： b&#x27;302d3abf2421169239f829b38a9545f1&#x27;</span></span><br><span class="line">    <span class="comment"># 解密字符串： b&#x27;I love Python!&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h2><p>简介：全称三重数据加密算法（英文名称：Triple Data Encryption Standard、<br>Triple Data Encryption Algorithm、TDES、TDEA），是对称加密算法中的一种。<br>70 年代初由 IBM 研发，后 1977 年被美国国家标准局采纳为数据加密标准，<br>它相当于是对每个数据块应用三次 DES 加密算法。由于计算机运算能力的增强，<br>原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，<br>即通过增加 DES 的密钥长度来避免破解，所以严格来说 3DES 不是设计一种全新的块密码算法。</p><p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</p><p>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Cryptodome <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_to_16</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(value) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        value += <span class="string">&#x27;\0&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>.encode(value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_encrypt</span>(<span class="params">key, text, iv</span>):</span><br><span class="line">    <span class="comment"># 加密模式 OFB</span></span><br><span class="line">    cipher_encrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)</span><br><span class="line">    encrypted_text = cipher_encrypt.encrypt(text.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> encrypted_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_decrypt</span>(<span class="params">key, text, iv</span>):</span><br><span class="line">    <span class="comment"># 加密模式 OFB</span></span><br><span class="line">    cipher_decrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)</span><br><span class="line">    decrypted_text = cipher_decrypt.decrypt(text)</span><br><span class="line">    <span class="keyword">return</span> decrypted_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = <span class="string">&#x27;12345678&#x27;</span>            <span class="comment"># 密钥，16 位</span></span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span>     <span class="comment"># 加密对象</span></span><br><span class="line">    iv = Random.new().read(DES3.block_size)  <span class="comment"># DES3.block_size == 8</span></span><br><span class="line">    secret_str = des_encrypt(key, text, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密字符串：&#x27;</span>, secret_str)</span><br><span class="line">    clear_str = des_decrypt(key, secret_str, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密字符串：&#x27;</span>, clear_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密字符串： b&#x27;\xa5\x8a\xd4R\x99\x16j\xba?vg\xf2\xb6\xa9&#x27;</span></span><br><span class="line"><span class="comment"># 解密字符串： b&#x27;I love Python!&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p>简介：全称高级加密标准（英文名称：Advanced Encryption Standard），<br>在密码学中又称 Rijndael 加密法，由美国国家标准与技术研究院 （NIST）于 2001 年发布，<br>并在 2002 年成为有效的标准，是美国联邦政府采用的一种区块加密标准。<br>这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用，<br>它本身只有一个密钥，即用来实现加密，也用于解密。</p><p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</p><p>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_to_16</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(value) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        value += <span class="string">&#x27;\0&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>.encode(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">key, t, iv</span>):</span><br><span class="line">    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))  <span class="comment"># 初始化加密器</span></span><br><span class="line">    encrypt_aes = aes.encrypt(add_to_16(t)) <span class="comment"># 先进行 aes 加密</span></span><br><span class="line">    <span class="comment"># 执行加密并转码返回 bytes</span></span><br><span class="line">    encrypted_text = <span class="built_in">str</span>(base64.encodebytes(encrypt_aes), encoding=<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line">    <span class="keyword">return</span> encrypted_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">key, t, iv</span>):</span><br><span class="line">    <span class="comment"># 初始化加密器</span></span><br><span class="line">    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))     </span><br><span class="line">    <span class="comment"># 优先逆向解密 base64 成 bytes   </span></span><br><span class="line">    base64_decrypted = base64.decodebytes(t.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)) </span><br><span class="line">    <span class="comment"># 执行解密密并转码返回str </span></span><br><span class="line">    decrypted_text = <span class="built_in">str</span>(aes.decrypt(base64_decrypted), encoding=<span class="string">&#x27;utf-8&#x27;</span>).replace(<span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  </span><br><span class="line">    <span class="keyword">return</span> decrypted_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    secret_key = <span class="string">&#x27;12345678&#x27;</span>   <span class="comment"># 密钥</span></span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span>   <span class="comment"># 加密对象</span></span><br><span class="line">    iv = secret_key           <span class="comment"># 初始向量</span></span><br><span class="line">    encrypted_str = aes_encrypt(secret_key, text, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密字符串：&#x27;</span>, encrypted_str)</span><br><span class="line">    decrypted_str = aes_decrypt(secret_key, encrypted_str, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密字符串：&#x27;</span>, decrypted_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密字符串： lAVKvkQh+GtdNpoKf4/mHA==</span></span><br><span class="line"><span class="comment"># 解密字符串： I love Python!</span></span><br></pre></td></tr></table></figure><h3 id="AES-ECB-PKC7-模式"><a href="#AES-ECB-PKC7-模式" class="headerlink" title="AES ECB PKC7 模式"></a>AES ECB PKC7 模式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_cipher</span>(<span class="params">key, aes_str</span>):</span><br><span class="line">    <span class="comment"># 使用key,选择加密方式</span></span><br><span class="line">    aes = AES.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.MODE_ECB)</span><br><span class="line">    pad_pkcs7 = pad(aes_str.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size, style=<span class="string">&#x27;pkcs7&#x27;</span>)  <span class="comment"># 选择pkcs7补全</span></span><br><span class="line">    encrypt_aes = aes.encrypt(pad_pkcs7)</span><br><span class="line">    <span class="comment"># 加密结果</span></span><br><span class="line">    encrypted_text = <span class="built_in">str</span>(base64.encodebytes(encrypt_aes), encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 解码</span></span><br><span class="line">    encrypted_text_str = encrypted_text.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># 此处我的输出结果老有换行符，所以用了临时方法将它剔除</span></span><br><span class="line">    <span class="keyword">return</span> encrypted_text_str</span><br></pre></td></tr></table></figure><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><p>简介：英文名称：Rivest Cipher 4，也称为 ARC4 或 ARCFOUR，是一种流加密算法，<br>密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。<br>RC4 是有线等效加密（WEP）中采用的加密算法，也曾经是 TLS 可采用的算法之一，<br>该算法的速度可以达到 DES 加密的 10 倍左右，且具有很高级别的非线性，<br>虽然它在软件方面的简单性和速度非常出色，但在 RC4 中发现了多个漏洞，<br>它特别容易受到攻击，RC4 作为一种老旧的验证和加密算法易于受到黑客攻击，<br>现在逐渐不推荐使用了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_encrypt</span>(<span class="params">key, t</span>):</span><br><span class="line">    enc = ARC4.new(key.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    res = enc.encrypt(t.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    res = base64.b64encode(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">key, t</span>):</span><br><span class="line">    data = base64.b64decode(t)</span><br><span class="line">    enc = ARC4.new(key.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    res = enc.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    secret_key = <span class="string">&#x27;12345678&#x27;</span>   <span class="comment"># 密钥</span></span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span>   <span class="comment"># 加密对象</span></span><br><span class="line">    encrypted_str = rc4_encrypt(secret_key, text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密字符串：&#x27;</span>, encrypted_str)</span><br><span class="line">    decrypted_str = rc4_decrypt(secret_key, encrypted_str)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密字符串：&#x27;</span>, decrypted_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密字符串： b&#x27;8tNVu3/U/veJR2KgyBw=&#x27;</span></span><br><span class="line"><span class="comment"># 解密字符串： b&#x27;I love Python!&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h2><p>简介：Rabbit 加密算法是一个高性能的流密码加密方式，<br>2003 年首次被提出，它从 128 位密钥和 64 位初始向量（iv）创建一个密钥流。</p><p>目前没有找到有第三方库可以直接实现 Rabbit 算法，<br>在 Python 中实现可以 <a href="https://asecuritysite.com/encryption/rabbit2">参考</a></p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>简介：英文名称：Rivest-Shamir-Adleman，是 1977 年由罗纳德·李维斯特（Ron Rivest）、<br>阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的，<br>RSA 就是他们三人姓氏开头字母拼在一起组成的，RSA 加密算法是一种非对称加密算法。<br>在公开密钥加密和电子商业中RSA被广泛使用。它被普遍认为是目前比较优秀的公钥方案之一。<br>RSA是第一个能同时用于加密和数字签名的算法，它能够抵抗到目前为止已知的所有密码攻击。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_encrypt</span>(<span class="params">pu_key, t</span>):</span><br><span class="line">    <span class="comment"># 公钥加密</span></span><br><span class="line">    rsa = rsa.encrypt(t.encode(<span class="string">&quot;utf-8&quot;</span>), pu_key)</span><br><span class="line">    <span class="keyword">return</span> rsa</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_decrypt</span>(<span class="params">pr_key, t</span>):</span><br><span class="line">    <span class="comment"># 私钥解密</span></span><br><span class="line">    rsa = rsa.decrypt(t, pr_key).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rsa</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    public_key, private_key = rsa.newkeys(<span class="number">512</span>)   <span class="comment"># 生成公钥、私钥</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;公钥：&#x27;</span>, public_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;私钥：&#x27;</span>, private_key)</span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span>  <span class="comment"># 加密对象</span></span><br><span class="line">    encrypted_str = rsa_encrypt(public_key, text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密字符串：&#x27;</span>, encrypted_str)</span><br><span class="line">    decrypted_str = rsa_decrypt(private_key, encrypted_str)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密字符串：&#x27;</span>, decrypted_str)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">公钥： PublicKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537)</span></span><br><span class="line"><span class="string">私钥： PrivateKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537, 3850457767980968449796700480128630632818465005441846698224554128042451115530564586537997896922067523638756079019054611200173122138274839877369624069360253, 4713180694194659323798858305046043997526301456820208338158979730140812744181638767, 1620238976946735819854194349514460863335347861649166352709029254680140139)</span></span><br><span class="line"><span class="string">加密字符串： b&quot;\x1aaeps\xa0c&#125;\xb6\xcf\xa3\xb0\xbb\xedA\x7f&#125;\x03\xdc\xd5\x1c\x9b\xdb\xda\xf9q\x80[=\xf5\x91\r\xd0&#x27;f\xce\x1f\x01\xef\xa5\xdb3\x96\t0qIxF\xbd\x11\xd6\xb25\xc5\xe1pM\xb4M\xc2\xd4\x03\xa6&quot;</span></span><br><span class="line"><span class="string">解密字符串： I love Python!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="模块-Cryptodome"><a href="#模块-Cryptodome" class="headerlink" title="模块 Cryptodome"></a>模块 Cryptodome</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Cryptodome.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;cKK8B2rWwfwWeXhz&quot;</span></span><br><span class="line">public_key = <span class="string">&quot;MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAM1xhOWaThSMpfxFsjV5YaWOFHt+6RvS+zH2Pa47VVr8PkZYnRaaKKy2MYBuEh7mZfM/R1dUXTgu0gp6VTNeNQkCAwEAAQ==&quot;</span></span><br><span class="line">rsa_key = RSA.import_key(base64.b64decode(public_key))  <span class="comment"># 导入读取到的公钥</span></span><br><span class="line">cipher = PKCS1_v1_5.new(rsa_key)                        <span class="comment"># 生成对象</span></span><br><span class="line">cipher_text = base64.b64encode(cipher.encrypt(data.encode(encoding=<span class="string">&quot;utf-8&quot;</span>)))</span><br><span class="line"><span class="built_in">print</span>(cipher_text)</span><br></pre></td></tr></table></figure><p>出处 <a href="https://www.52pojie.cn/thread-1829215-1-1.html">Python常见的各种加密解密算法_吾爱破解论坛</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> aes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用cv统计视频时长</title>
      <link href="/2022/02/02/python/%E4%BD%BF%E7%94%A8cv%E7%BB%9F%E8%AE%A1%E8%A7%86%E9%A2%91%E6%97%B6%E9%95%BF/"/>
      <url>/2022/02/02/python/%E4%BD%BF%E7%94%A8cv%E7%BB%9F%E8%AE%A1%E8%A7%86%E9%A2%91%E6%97%B6%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2,os</span><br><span class="line"><span class="comment"># 统计视频</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_video_duration</span>(<span class="params">file_path</span>):</span><br><span class="line">    cap = cv2.VideoCapture(file_path)</span><br><span class="line">    <span class="keyword">if</span> cap.isOpened():  <span class="comment"># 当成功打开视频时cap.isOpened()返回True,否则返回False</span></span><br><span class="line">        <span class="comment"># get方法参数按顺序对应下表（从0开始编号)</span></span><br><span class="line">        rate = cap.get(<span class="number">5</span>)  <span class="comment"># 帧速率</span></span><br><span class="line">        FrameNumber = cap.get(<span class="number">7</span>)  <span class="comment"># 视频文件的帧数</span></span><br><span class="line">        duration = FrameNumber / rate</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(duration)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归获取视频路径进行统计时长</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_video_duration_recursion</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">global</span> duration_video</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(file_path):</span><br><span class="line">            count_video_duration_recursion(os.path.join(file_path, file))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> file_path.endswith(<span class="string">&#x27;.mp4&#x27;</span>) <span class="keyword">or</span> file_path.endswith(<span class="string">&#x27;.avi&#x27;</span>)<span class="keyword">or</span> file_path.endswith(<span class="string">&#x27;.3gp&#x27;</span>):</span><br><span class="line">            duration = count_video_duration(file_path)</span><br><span class="line">            duration_video+=duration</span><br><span class="line">            <span class="built_in">print</span>(file_path, duration)</span><br><span class="line">duration_video = <span class="number">0</span></span><br><span class="line">path = <span class="string">&quot;路径&quot;</span></span><br><span class="line">count_video_duration_recursion(path)</span><br><span class="line"><span class="built_in">print</span>(duration_video)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> cv </tag>
            
            <tag> 文件 </tag>
            
            <tag> 视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用opencv将透明背景图片转变为白色背景图片</title>
      <link href="/2022/02/02/python/%E4%BD%BF%E7%94%A8opencv%E5%B0%86%E9%80%8F%E6%98%8E%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E8%BD%AC%E5%8F%98%E4%B8%BA%E7%99%BD%E8%89%B2%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
      <url>/2022/02/02/python/%E4%BD%BF%E7%94%A8opencv%E5%B0%86%E9%80%8F%E6%98%8E%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E8%BD%AC%E5%8F%98%E4%B8%BA%E7%99%BD%E8%89%B2%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alpha2white_opencv2</span>(<span class="params">img</span>):</span><br><span class="line">    sp=img.shape</span><br><span class="line">    width=sp[<span class="number">0</span>]</span><br><span class="line">    height=sp[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> yh <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> xw <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            color_d=img[xw,yh]</span><br><span class="line">            <span class="keyword">if</span>(color_d[<span class="number">3</span>]==<span class="number">0</span>):</span><br><span class="line">                img[xw,yh]=[<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>]</span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> cv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用opencv进行人脸检测</title>
      <link href="/2022/02/02/python/%E4%BD%BF%E7%94%A8opencv%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B/"/>
      <url>/2022/02/02/python/%E4%BD%BF%E7%94%A8opencv%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>对特定图像进行识别，最关键的是要有识别对象的特征文件。OpenCV已经内置了人脸识别特征文件，我们只要使用OpenCV的CascadeClassifier类即可进行识别。<br>语法：<br><a href="https://github.com/opencv/opencv.git">https://github.com/opencv/opencv.git</a>  在这里可以下载特征文件，在data目录下<br>识别对象变量 &#x3D; cv2.CascadeClassifier(特征文件)、、<br>识别对象<br>识别结果变量 &#x3D; 识别对象变量.detectMultiScale(图片，参数1，参数2，。。。)<br>参数有：<br>　　1、scaleFactor:  其原理是系统会以不同的区块大小对图片进行扫描，在进行特征对比。此参数用户设置区块的改变倍数，如无特别需求，一般设置为1.1<br>　　2、minNeighbors  此为控制误检率参数，默认值为3<br>　　3、minSize  设置最小的识别区块<br>　　4、maxSize  设置最大的识别区块<br>　　5、flags  此参数设置检测模式，可取值如下：<br>　　　　　　cv2.CV_HAAR_SCALE_IMAGE   按比例检测<br>　　　　　　cv2.CV_HAAR_DO_CANNY_PRUNING  利用Canny 边缘检测器排除一些边缘很少或很多的图像区域<br>　　　　　　cv2.CV_HAAR_FIND_BIGGEST_OBJECT   只检测最大物体<br>　　　　　　cv2.CV_HAAR_DO_ROUGH_SEARCH  只做初步检测<br>face &#x3D; faceCascade.detectMultiScale(image,scakeFactor&#x3D;1.1,minSize&#x3D;(10,10),minNeighbors&#x3D;5,flags &#x3D; cv2.CASCADE_SCALE_IMAGE)<br>detectMultiScale 方法可以识别多个面部，返回值是一个列表<br>for (x,y,w,h) in face:<br>x,y 表示面部区域的左上角x,y坐标；w,h表示面部区域的宽度和高度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">#基本绘图</span><br><span class="line">import numpy</span><br><span class="line">cv2.namedWindow(&quot;Image&quot;) #创建窗口</span><br><span class="line">img = cv2.imread(&#x27;20180703200225.jpg&#x27;) #读取图像</span><br><span class="line">#人脸识别</span><br><span class="line">#img.shape[0] 获取图片的高度  img.shape[1] 获取图片的宽度</span><br><span class="line">faceCascade = cv2.CascadeClassifier(r&#x27;./haarcascade_frontalface_default.xml&#x27;)</span><br><span class="line">faces = faceCascade.detectMultiScale(img,scaleFactor = 1.1,minNeighbors = 5,minSize = (10,10),flags = cv2.CASCADE_SCALE_IMAGE)</span><br><span class="line">cv2.putText(img,&quot;Find&quot;+str(len(faces))+&quot;faces&quot;,(10,img.shape[0]-5),cv2.FONT_HERSHEY_SIMPLEX,1,(255,232,133),2)</span><br><span class="line">for (x,y,w,h) in faces:</span><br><span class="line">    cv2.rectangle(img,(x,y),(x+w,y+h),(128,255,0),2)</span><br><span class="line">    print(x,y,w,h)</span><br><span class="line">#cv2.imshow(&#x27;Image&#x27;,img)</span><br><span class="line">cv2.imwrite(&#x27;test.jpg&#x27;,img)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindow()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> cv </tag>
            
            <tag> 检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于m4a文件转成wav文件</title>
      <link href="/2022/02/02/python/%E5%85%B3%E4%BA%8Em4a%E6%96%87%E4%BB%B6%E8%BD%AC%E6%88%90wav%E6%96%87%E4%BB%B6/"/>
      <url>/2022/02/02/python/%E5%85%B3%E4%BA%8Em4a%E6%96%87%E4%BB%B6%E8%BD%AC%E6%88%90wav%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="m4a文件转为16bit-单声道-采样率为48kHz"><a href="#m4a文件转为16bit-单声道-采样率为48kHz" class="headerlink" title="m4a文件转为16bit,单声道,采样率为48kHz"></a>m4a文件转为16bit,单声道,采样率为48kHz</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in *.m4a; do ffmpeg -i &quot;$i&quot; -acodec pcm_s16le -ac 1 -ar 48000 &quot;$&#123;i%&#125;.wav&quot;; done</span><br><span class="line">-acodec pcm_s16le:16bit</span><br><span class="line">-ac 1:单声道</span><br><span class="line">-ar 48000:48kHZ</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> code </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压缩图片</title>
      <link href="/2022/02/02/python/%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/"/>
      <url>/2022/02/02/python/%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="基于pillow进行图片压缩"><a href="#基于pillow进行图片压缩" class="headerlink" title="基于pillow进行图片压缩"></a>基于pillow进行图片压缩</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图片文件大小</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_size</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="comment"># 获取文件大小:KB</span></span><br><span class="line">    size = os.path.getsize(file)</span><br><span class="line">    <span class="keyword">return</span> size / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接输出文件地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_outfile</span>(<span class="params">infile, outfile</span>):</span><br><span class="line">    <span class="keyword">if</span> outfile:</span><br><span class="line">        <span class="keyword">return</span> outfile</span><br><span class="line">    <span class="built_in">dir</span>, suffix = os.path.splitext(infile)</span><br><span class="line">    outfile = <span class="string">&#x27;&#123;&#125;-out&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">dir</span>, suffix)</span><br><span class="line">    <span class="keyword">return</span> outfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩图片方法(配置即可用_1007)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compress_image</span>(<span class="params">infile, outfile=<span class="string">&#x27;&#x27;</span>, mb=<span class="number">600</span>, step=<span class="number">10</span>, quality=<span class="number">80</span></span>):</span><br><span class="line">    <span class="comment"># 判断该张图片是否压缩</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(outfile):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;不改变图片尺寸压缩到指定大小</span></span><br><span class="line"><span class="string">    :param infile: 压缩源文件</span></span><br><span class="line"><span class="string">    :param outfile: 压缩文件保存地址</span></span><br><span class="line"><span class="string">    :param mb: 压缩目标，KB</span></span><br><span class="line"><span class="string">    :param step: 每次调整的压缩比率</span></span><br><span class="line"><span class="string">    :param quality: 初始压缩比率</span></span><br><span class="line"><span class="string">    :return: 压缩文件地址，压缩文件大小</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    o_size = get_size(infile)</span><br><span class="line">    <span class="keyword">if</span> o_size &lt;= mb:</span><br><span class="line">        <span class="keyword">return</span> infile</span><br><span class="line">    outfile = get_outfile(infile, outfile)</span><br><span class="line">    <span class="keyword">while</span> o_size &gt; mb:</span><br><span class="line">        im = Image.<span class="built_in">open</span>(infile)</span><br><span class="line">        im.save(outfile, quality=quality)</span><br><span class="line">        <span class="keyword">if</span> quality - step &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        quality -= step</span><br><span class="line">        o_size = get_size(outfile)</span><br><span class="line">    <span class="keyword">return</span> outfile, get_size(outfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展压缩</span></span><br><span class="line">a = <span class="string">r&quot;C:\Users\DM\Desktop\图片过长\新建文件夹\1&quot;</span></span><br><span class="line">b = <span class="string">r&quot;C:\Users\DM\Desktop\图片过长\新建文件夹\2&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(a):</span><br><span class="line">    in_file = os.path.join(a, i)</span><br><span class="line">    out_file = os.path.join(b, i)</span><br><span class="line">    <span class="built_in">print</span>(in_file, out_file)</span><br><span class="line">    compress_image(in_file, out_file)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 压缩 </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片大小压缩</title>
      <link href="/2022/02/02/python/%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%E5%8E%8B%E7%BC%A9/"/>
      <url>/2022/02/02/python/%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图片文件大小</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_size</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="comment"># 获取文件大小:KB</span></span><br><span class="line">    size = os.path.getsize(file)</span><br><span class="line">    <span class="keyword">return</span> size / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接输出文件地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_outfile</span>(<span class="params">infile, outfile</span>):</span><br><span class="line">    <span class="keyword">if</span> outfile:</span><br><span class="line">        <span class="keyword">return</span> outfile</span><br><span class="line">    <span class="built_in">dir</span>, suffix = os.path.splitext(infile)</span><br><span class="line">    outfile = <span class="string">&#x27;&#123;&#125;-out&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">dir</span>, suffix)</span><br><span class="line">    <span class="keyword">return</span> outfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩文件到指定大小</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compress_image</span>(<span class="params">infile, outfile=<span class="string">&#x27;&#x27;</span>, mb=<span class="number">500</span>, step=<span class="number">10</span>, quality=<span class="number">80</span></span>):</span><br><span class="line">    <span class="comment"># 判断该张图片是否压缩</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(outfile):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;不改变图片尺寸压缩到指定大小</span></span><br><span class="line"><span class="string">    :param infile: 压缩源文件</span></span><br><span class="line"><span class="string">    :param outfile: 压缩文件保存地址</span></span><br><span class="line"><span class="string">    :param mb: 压缩目标，KB</span></span><br><span class="line"><span class="string">    :param step: 每次调整的压缩比率</span></span><br><span class="line"><span class="string">    :param quality: 初始压缩比率</span></span><br><span class="line"><span class="string">    :return: 压缩文件地址，压缩文件大小</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    o_size = get_size(infile)</span><br><span class="line">    <span class="keyword">if</span> o_size &lt;= mb:</span><br><span class="line">        shutil.copyfile(infile,outfile)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;cp:<span class="subst">&#123;infile&#125;</span>&gt;<span class="subst">&#123;outfile&#125;</span>&quot;</span></span><br><span class="line">    outfile = get_outfile(infile, outfile)</span><br><span class="line">    <span class="keyword">while</span> o_size &gt; mb:</span><br><span class="line">        im = Image.<span class="built_in">open</span>(infile)</span><br><span class="line">        im.save(outfile, quality=quality)</span><br><span class="line">        <span class="keyword">if</span> quality - step &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        quality -= step</span><br><span class="line">        o_size = get_size(outfile)</span><br><span class="line">    <span class="keyword">return</span> outfile, get_size(outfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认600k，但是可能不会到600K,有的压缩不到</span></span><br><span class="line">path_a = <span class="string">r&quot;文件路径&quot;</span></span><br><span class="line">path_b = <span class="string">r&quot;文件路径&quot;</span></span><br><span class="line"><span class="comment"># 使用线程池提高速度</span></span><br><span class="line">s = ThreadPool(<span class="number">12</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(path_a):</span><br><span class="line">    infile = os.path.join(path_a, i)</span><br><span class="line">    outfile = os.path.join(path_b, i)</span><br><span class="line">    <span class="comment"># if os.path.exists(outfile):</span></span><br><span class="line">    <span class="comment">#     continue</span></span><br><span class="line">    <span class="built_in">print</span>(infile)</span><br><span class="line">    s.apply_async(compress_image, args=(infile, outfile))</span><br><span class="line">    <span class="comment"># compress_image(infile,outfile)</span></span><br><span class="line">s.close()</span><br><span class="line">s.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 压缩 </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片旋转摆正根据图片的exif信息</title>
      <link href="/2022/02/02/python/%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%AC%E6%91%86%E6%AD%A3%E6%A0%B9%E6%8D%AE%E5%9B%BE%E7%89%87%E7%9A%84exif%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/02/02/python/%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%AC%E6%91%86%E6%AD%A3%E6%A0%B9%E6%8D%AE%E5%9B%BE%E7%89%87%E7%9A%84exif%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片旋转</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_route</span>(<span class="params">in_file, out_file</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(in_file)</span><br><span class="line">    dict_exif = img.getexif()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = dict_exif[<span class="number">274</span>]</span><br><span class="line">        <span class="keyword">if</span> res == <span class="number">1</span>:</span><br><span class="line">            img = img.rotate(<span class="number">0</span>, expand=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">elif</span> res == <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;向右&quot;</span>, in_file)</span><br><span class="line">            img = img.rotate(<span class="number">90</span>, expand=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">elif</span> res == <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;向左&quot;</span>, in_file)</span><br><span class="line">            img = img.rotate(-<span class="number">90</span>, expand=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">elif</span> res == <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;翻转&quot;</span>, in_file)</span><br><span class="line">            img = img.rotate(<span class="number">180</span>, expand=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(res, <span class="string">&quot;不正常&quot;</span>, in_file)</span><br><span class="line">            img = img.rotate(<span class="number">0</span>, expand=<span class="literal">True</span>)</span><br><span class="line">        img.save(out_file)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error:&quot;</span>, in_file)</span><br><span class="line">        img = img.rotate(<span class="number">0</span>, expand=<span class="literal">True</span>)</span><br><span class="line">        img.save(os.path.join(_save, i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 要调整的路径</span></span><br><span class="line">    path = <span class="string">r&quot;文件路径&quot;</span></span><br><span class="line">    <span class="comment"># 调整之后保存的路径</span></span><br><span class="line">    _save = <span class="string">r&quot;文件路径&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        in_file = os.path.join(path, i)</span><br><span class="line">        out_file = os.path.join(_save, i)</span><br><span class="line">        image_route(in_file, out_file)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 图片 </tag>
            
            <tag> 旋转 </tag>
            
            <tag> exif </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多张图片合成一张</title>
      <link href="/2022/02/02/python/%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90%E4%B8%80%E5%BC%A0/"/>
      <url>/2022/02/02/python/%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90%E4%B8%80%E5%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读入图片</span></span><br><span class="line">src = cv.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 调用cv.putText()添加文字</span></span><br><span class="line">text = <span class="string">&quot;Your are so beautiful!&quot;</span></span><br><span class="line">AddText = src.copy()</span><br><span class="line">cv.putText(AddText, text, (<span class="number">200</span>, <span class="number">100</span>), cv.FONT_HERSHEY_COMPLEX, <span class="number">2.0</span>, (<span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>), <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 将原图片和添加文字后的图片拼接起来</span></span><br><span class="line">res = np.hstack([src, AddText])</span><br><span class="line"><span class="comment"># 显示拼接后的图片</span></span><br><span class="line">cv.imshow(<span class="string">&#x27;text&#x27;</span>, res)</span><br><span class="line">cv.waitKey()</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对比两个txt获取共同的字</title>
      <link href="/2022/02/02/python/%E5%AF%B9%E6%AF%94%E4%B8%A4%E4%B8%AAtxt%E8%8E%B7%E5%8F%96%E5%85%B1%E5%90%8C%E7%9A%84%E5%AD%97/"/>
      <url>/2022/02/02/python/%E5%AF%B9%E6%AF%94%E4%B8%A4%E4%B8%AAtxt%E8%8E%B7%E5%8F%96%E5%85%B1%E5%90%8C%E7%9A%84%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件编码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_encode</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取文件编码</span></span><br><span class="line"><span class="string">    :param file_path: 文件路径</span></span><br><span class="line"><span class="string">    :return: 文件编码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> chardet.detect(f.read())[<span class="string">&#x27;encoding&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_content</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取文件内容</span></span><br><span class="line"><span class="string">    :param file_path: 文件路径</span></span><br><span class="line"><span class="string">    :return: 文件内容</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 临时存储列表</span></span><br><span class="line">    list_data = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=get_file_encode(file_path)) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> line.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">                <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> list_data:</span><br><span class="line">                    list_data.append(word)</span><br><span class="line">    <span class="keyword">return</span> list_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比两个列表找到相同的值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare_list</span>(<span class="params">list_1, list_2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对比两个列表找到相同的值</span></span><br><span class="line"><span class="string">    :param list_1: 列表1</span></span><br><span class="line"><span class="string">    :param list_2: 列表2</span></span><br><span class="line"><span class="string">    :return: 相同的值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    list_3 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_1:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> list_2:</span><br><span class="line">            list_3.append(i)</span><br><span class="line">    <span class="keyword">return</span> list_3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表数据写入到结果中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_result</span>(<span class="params">list_data, save_result</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将列表数据写入到结果中</span></span><br><span class="line"><span class="string">    :param list_data: 对比的列表文件</span></span><br><span class="line"><span class="string">    :param save_result:保存结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> list_data:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(save_result, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(word + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">txt1 = <span class="string">&quot;../question1/随机汉字_1.txt&quot;</span></span><br><span class="line">txt2 = <span class="string">&quot;../question1/随机汉字_2.txt&quot;</span></span><br><span class="line">save_txt = <span class="string">&quot;../question1/结果.txt&quot;</span></span><br><span class="line"></span><br><span class="line">list_1 = get_file_content(txt1)</span><br><span class="line">list_2 = get_file_content(txt2)</span><br><span class="line">list_3 = compare_list(list_1, list_2)</span><br><span class="line">write_result(list_3, save_txt)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2022/02/02/python/%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95%E7%BD%91%E7%AB%99/"/>
      <url>/2022/02/02/python/%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="async"><a href="#async" class="headerlink" title="async"></a>async</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标网站的URL列表</span></span><br><span class="line">urls = [<span class="string">&#x27;http://yourwebsite.com&#x27;</span> + <span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步获取函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">url, session</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="keyword">return</span> response.status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        tasks = [fetch(url, session) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">        responses = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">        <span class="keyword">for</span> url, response <span class="keyword">in</span> <span class="built_in">zip</span>(urls, responses):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;URL: <span class="subst">&#123;url&#125;</span>, Status Code: <span class="subst">&#123;response.status&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行主函数</span></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速获取到python库的文档</title>
      <link href="/2022/02/02/python/%E5%BF%AB%E9%80%9F%E8%8E%B7%E5%8F%96%E5%88%B0python%E5%BA%93%E7%9A%84%E6%96%87%E6%A1%A3/"/>
      <url>/2022/02/02/python/%E5%BF%AB%E9%80%9F%E8%8E%B7%E5%8F%96%E5%88%B0python%E5%BA%93%E7%9A%84%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="打开终端"><a href="#打开终端" class="headerlink" title="打开终端"></a>打开终端</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m pydoc -p <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筛选文件大小是0Kb的</title>
      <link href="/2022/02/02/python/%E7%AD%9B%E9%80%89%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E6%98%AF0%E7%9A%84/"/>
      <url>/2022/02/02/python/%E7%AD%9B%E9%80%89%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E6%98%AF0%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_data</span>(<span class="params">src, dst</span>):</span><br><span class="line">    shutil.move(src, dst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_size</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="comment"># 获取文件大小:KB</span></span><br><span class="line">    size = os.path.getsize(file)</span><br><span class="line">    <span class="keyword">return</span> size / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_dir_data</span>(<span class="params">in_file, out_file</span>):</span><br><span class="line">    th = ThreadPool(<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(in_file):</span><br><span class="line">        t = os.path.join(in_file, i)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断json内容是否为空</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(t,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)<span class="keyword">as</span> f:</span><br><span class="line">            data=json.loads(f.read())</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data[<span class="string">&quot;shapes&quot;</span>])==<span class="number">0</span>:</span><br><span class="line">            dst = os.path.join(out_file, i)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;move:&#123;&#125;&gt;&gt;&gt;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(t, dst))</span><br><span class="line">            th.apply_async(move_data, args=(t, dst))</span><br><span class="line"></span><br><span class="line">    th.close()</span><br><span class="line">    th.join()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 筛选文件夹</span></span><br><span class="line">    in_file=<span class="string">r&quot;C:\Users\DM\Desktop\新建文件夹 (2)\1&quot;</span></span><br><span class="line">    <span class="comment"># 筛选结果文件夹</span></span><br><span class="line">    out_file=<span class="string">r&quot;C:\Users\DM\Desktop\新建文件夹 (2)\2&quot;</span></span><br><span class="line">    read_dir_data(in_file,out_file)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文件 </tag>
            
            <tag> 筛选 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计一个文件夹中所有音频的时间(python)</title>
      <link href="/2022/02/02/python/%E7%BB%9F%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E6%89%80%E6%9C%89%E9%9F%B3%E9%A2%91%E7%9A%84%E6%97%B6%E9%97%B4/"/>
      <url>/2022/02/02/python/%E7%BB%9F%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E6%89%80%E6%9C%89%E9%9F%B3%E9%A2%91%E7%9A%84%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> pydub.utils <span class="keyword">import</span> mediainfo</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    os.system(<span class="string">&quot;pip3 install pydub&quot;</span>)</span><br><span class="line">    <span class="keyword">from</span> pydub.utils <span class="keyword">import</span> mediainfo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">file_path</span>):</span><br><span class="line">    song = mediainfo(file_path)</span><br><span class="line">    <span class="keyword">return</span> song[<span class="string">&#x27;duration&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归统计文件夹下所有文件数量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_file_time</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">global</span> all_time</span><br><span class="line">    file_list = os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">        file_path = os.path.join(path, file)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">            count_file_time(file_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> file_path.split(<span class="string">&quot;.&quot;</span>)[-<span class="number">1</span>] <span class="keyword">in</span> file_type:</span><br><span class="line">                <span class="built_in">print</span>(file_path, count_time(file_path))</span><br><span class="line">                all_time += <span class="built_in">float</span>(count_time(file_path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 放文件路径</span></span><br><span class="line">path = <span class="string">r&quot;&quot;</span></span><br><span class="line">file_type = [<span class="string">&quot;wav&quot;</span>, <span class="string">&quot;mp3&quot;</span>]</span><br><span class="line">all_time = <span class="number">0</span></span><br><span class="line">count_file_time(path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;共:&quot;</span>, all_time, <span class="string">&quot;秒&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文件 </tag>
            
            <tag> pydub </tag>
            
            <tag> 音频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取一个音频的时长</title>
      <link href="/2022/02/02/python/%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E9%9F%B3%E9%A2%91%E7%9A%84%E6%97%B6%E9%95%BF/"/>
      <url>/2022/02/02/python/%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E9%9F%B3%E9%A2%91%E7%9A%84%E6%97%B6%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pydub</span><br></pre></td></tr></table></figure><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    from pydub.utils import mediainfo</span><br><span class="line">except:</span><br><span class="line">    os.system(&quot;pip3 install pydub&quot;)</span><br><span class="line">    from pydub.utils import mediainfo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def count_time(file_path):</span><br><span class="line">    song = mediainfo(file_path)</span><br><span class="line">    return float(song[&quot;duration&quot;])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pydub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决python读取文件编码问题</title>
      <link href="/2022/02/02/python/%E8%A7%A3%E5%86%B3python%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/02/02/python/%E8%A7%A3%E5%86%B3python%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import chardet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取文件编码</span><br><span class="line">def get_file_encode(file_path):</span><br><span class="line">    with open(file_path, &#x27;rb&#x27;) as f:</span><br><span class="line">        return chardet.detect(f.read())[&#x27;encoding&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对一个文件夹里边有成千上万的文件进行分类</title>
      <link href="/2022/02/02/python/%E9%92%88%E5%AF%B9%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C%E8%BE%B9%E6%9C%89%E6%88%90%E5%8D%83%E4%B8%8A%E4%B8%87%E7%9A%84%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB/"/>
      <url>/2022/02/02/python/%E9%92%88%E5%AF%B9%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C%E8%BE%B9%E6%9C%89%E6%88%90%E5%8D%83%E4%B8%8A%E4%B8%87%E7%9A%84%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&quot;文件夹路径&quot;</span>  <span class="comment"># 文件夹路径</span></span><br><span class="line">data = os.listdir(path)</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line">p2 = os.path.join(path,<span class="string">&quot;_&#123;&#125;&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">p1 = os.path.join(path,i)</span><br><span class="line">    temp += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(p2):</span><br><span class="line">        os.mkdir(p2)</span><br><span class="line">        shutil.move(p1, p2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        shutil.move(p1, p2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;move&quot;</span>,p1,<span class="string">&quot;&gt;&gt;&gt;&quot;</span>,p2)</span><br><span class="line">    <span class="keyword">if</span> temp % <span class="number">5</span> == <span class="number">0</span>:  <span class="comment"># 将5改成需要多少个做成一个文件夹</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        p2 = os.path.join(path,<span class="string">&quot;_&#123;&#125;&quot;</span>.<span class="built_in">format</span>(count))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文件 </tag>
            
            <tag> 分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg推流B站直播</title>
      <link href="/2022/02/02/server/ffmpeg%E6%8E%A8%E6%B5%81%E7%9B%B4%E6%92%AD/"/>
      <url>/2022/02/02/server/ffmpeg%E6%8E%A8%E6%B5%81%E7%9B%B4%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ubuntu</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ffmpeg</span><br><span class="line">ffmpeg -version  # 查看版本 我的是4.x</span><br><span class="line">centos</span><br><span class="line">yum -y install wget</span><br><span class="line">wget --no-check-certificate https://www.johnvansickle.com/ffmpeg/old-releases/ffmpeg-4.0.3-64bit-static.tar.xz</span><br><span class="line">tar -xJf ffmpeg-4.0.3-64bit-static.tar.xz</span><br><span class="line">cd ffmpeg-4.0.3-64bit-static</span><br><span class="line">mv ffmpeg /usr/bin &amp;&amp; mv ffprobe /usr/bin &amp;&amp; mv qt-faststart /usr/bin &amp;&amp; mv ffmpeg-10bit /usr/bin</span><br><span class="line">windows</span><br><span class="line">下载ffmpeg构建好的文件</span><br><span class="line">https://github.com/BtbN/FFmpeg-Builds/releases</span><br><span class="line">添加环境变量路径 ffmpeg/bin</span><br></pre></td></tr></table></figure><h1 id="B站开启直播"><a href="#B站开启直播" class="headerlink" title="B站开启直播"></a>B站开启直播</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.登录</span><br><span class="line">2.个人中心</span><br><span class="line">3.我的直播</span><br><span class="line">4.我的直播间</span><br><span class="line">5.选择直播分类</span><br><span class="line">6.点击开始直播</span><br><span class="line">7.复制服务器地址 rtmp://live-push.bilivideo.com/live-bvc/</span><br><span class="line">8.复制串流密钥 ?streamname=xxx</span><br><span class="line">9.组成一个链接之后要用 rtmp://live-push.bilivideo.com/live-bvc/?streamname=xxx</span><br></pre></td></tr></table></figure><h1 id="ffmpeg推流"><a href="#ffmpeg推流" class="headerlink" title="ffmpeg推流"></a>ffmpeg推流</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">找到一个视频文件随便命名(尽量几个字母)我的是demo.mp4</span><br><span class="line">通过ffmpeg推流示例</span><br><span class="line">ffmpeg -re -stream_loop -1 -i &quot;./demo.mp4&quot; -c copy -f flv &quot;rtmp://live-push.bilivideo.com/live-bvc/?streamname=xxx&quot;</span><br></pre></td></tr></table></figure><h1 id="设置后台启动"><a href="#设置后台启动" class="headerlink" title="设置后台启动"></a>设置后台启动</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup ffmpeg -re -stream_loop -1 -i &quot;./demo.mp4&quot; -c copy -f flv &quot;rtmp://live-push.bilivideo.com/live-bvc/?streamname=xxx&quot; &gt;&gt;/dev/null 2&gt;&amp;1 &lt;/dev/null &amp;</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果没用什么问题，打开B站直播地址就能看到推流视频</span><br><span class="line">我的直播间测试地址 https://live.bilibili.com/14118989</span><br></pre></td></tr></table></figure><h1 id="我的直播间"><a href="#我的直播间" class="headerlink" title="我的直播间"></a>我的直播间</h1><p><a href="https://live.bilibili.com/14118989">点击进入</a><br><font color='red'>注意版权问题</font></p>]]></content>
      
      
      <categories>
          
          <category> 搞钱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
            <tag> B站 </tag>
            
            <tag> rtmp </tag>
            
            <tag> 直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pm2定时推送到git仓库及定时执行mongo备份</title>
      <link href="/2022/02/02/server/pm2%E5%AE%9A%E6%97%B6%E6%8E%A8%E9%80%81%E5%88%B0git%E4%BB%93%E5%BA%93%E5%8F%8A%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8Cmongo%E5%A4%87%E4%BB%BD/"/>
      <url>/2022/02/02/server/pm2%E5%AE%9A%E6%97%B6%E6%8E%A8%E9%80%81%E5%88%B0git%E4%BB%93%E5%BA%93%E5%8F%8A%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8Cmongo%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h2><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p><a href="https://nodejs.org/dist/v16.15.0/node-v16.15.0-x64.msi">https://nodejs.org/dist/v16.15.0/node-v16.15.0-x64.msi</a><br>一直next即可</p><h4 id="安装pm2-1"><a href="#安装pm2-1" class="headerlink" title="安装pm2"></a>安装pm2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><h4 id="编写git推送py脚本"><a href="#编写git推送py脚本" class="headerlink" title="编写git推送py脚本"></a>编写git推送py脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line">now_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">result</span>):</span><br><span class="line">    os.system(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># add the file</span></span><br><span class="line">add = <span class="string">&quot;git add .&quot;</span></span><br><span class="line"><span class="comment"># commit the file</span></span><br><span class="line">commit = <span class="string">&quot;git commit -m &#x27;auto commit: &#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(now_time)</span><br><span class="line"><span class="comment"># push the file</span></span><br><span class="line">push = <span class="string">&quot;git push origin master&quot;</span></span><br><span class="line">callback(add)</span><br><span class="line">callback(commit)</span><br><span class="line">callback(push)</span><br></pre></td></tr></table></figure><h4 id="pm2执行脚本并定时推送"><a href="#pm2执行脚本并定时推送" class="headerlink" title="pm2执行脚本并定时推送"></a>pm2执行脚本并定时推送</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm2 start XXX.py --restart-delay 86400000 （1天=86400000ms）</span><br></pre></td></tr></table></figure><h2 id="mogno每天自动全备份"><a href="#mogno每天自动全备份" class="headerlink" title="mogno每天自动全备份"></a>mogno每天自动全备份</h2><h3 id="安装node、pm2"><a href="#安装node、pm2" class="headerlink" title="安装node、pm2"></a>安装node、pm2</h3><p>同上</p><h3 id="安装mongoTools"><a href="#安装mongoTools" class="headerlink" title="安装mongoTools"></a>安装mongoTools</h3><p><a href="https://fastdl.mongodb.org/tools/db/mongodb-database-tools-windows-x86_64-100.5.2.zip">https://fastdl.mongodb.org/tools/db/mongodb-database-tools-windows-x86_64-100.5.2.zip</a><br>设置环境变量</p><h3 id="编写备份脚本"><a href="#编写备份脚本" class="headerlink" title="编写备份脚本"></a>编写备份脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前日期</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_date</span>():</span><br><span class="line">    date = time.strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>, time.localtime(time.time()))</span><br><span class="line">    <span class="keyword">return</span> date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&#x27;mongodump -o F:\\db_back\\back\\&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(get_date()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pm2定时执行"><a href="#pm2定时执行" class="headerlink" title="pm2定时执行"></a>pm2定时执行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm2 start XXX.py --restart-delay 86400000 （1天=86400000ms）</span><br></pre></td></tr></table></figure><h3 id="pm2保存"><a href="#pm2保存" class="headerlink" title="pm2保存"></a>pm2保存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm2 save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pm2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pm2 </tag>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>server安装node及node版本管理</title>
      <link href="/2022/02/02/server/server%E5%AE%89%E8%A3%85node/"/>
      <url>/2022/02/02/server/server%E5%AE%89%E8%A3%85node/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="下载nvm"><a href="#下载nvm" class="headerlink" title="下载nvm"></a>下载nvm</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对上边输出的结果一行执行一条</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><h1 id="安装最新lts版本"><a href="#安装最新lts版本" class="headerlink" title="安装最新lts版本"></a>安装最新lts版本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install --lts</span><br></pre></td></tr></table></figure><h1 id="查看node和npm版本"><a href="#查看node和npm版本" class="headerlink" title="查看node和npm版本"></a>查看node和npm版本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
            <tag> node </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>server服务器安装jupyterlab</title>
      <link href="/2022/02/02/server/server%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85jupyterlab/"/>
      <url>/2022/02/02/server/server%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85jupyterlab/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="安装jupyterlab"><a href="#安装jupyterlab" class="headerlink" title="安装jupyterlab"></a>安装jupyterlab</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure><h1 id="安装ipython"><a href="#安装ipython" class="headerlink" title="安装ipython"></a>安装ipython</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure><h1 id="设置JupyterLab密码"><a href="#设置JupyterLab密码" class="headerlink" title="设置JupyterLab密码"></a>设置JupyterLab密码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipython</span><br><span class="line">from notebook.auth import passwd</span><br><span class="line">passwd() # 输入密码</span><br><span class="line"># 记录输出的结果,之后要用</span><br><span class="line">&#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$SLoIJjMvYC8ICwT+rJhpxQ$AekuE8hCGRSC8qc9C6/VNuacsqlGnlLO5fSnJqk78KI&#x27;</span><br></pre></td></tr></table></figure><h1 id="创建JupyterLab-配置文件"><a href="#创建JupyterLab-配置文件" class="headerlink" title="创建JupyterLab 配置文件"></a>创建JupyterLab 配置文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jupyter lab --generate-config</span><br></pre></td></tr></table></figure><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.jupyter/jupyter_lab_config.py</span><br><span class="line"># 修改以下配置</span><br><span class="line">c.ServerApp.root_dir = &#x27;/home/jupyter&#x27;# 大概在999行</span><br><span class="line">c.ServerApp.allow_root = True# 大概在698行</span><br><span class="line">c.ServerApp.open_browser = False# 大概在957行</span><br><span class="line">c.ServerApp.password = 刚才记录的密码# 大概在961行</span><br><span class="line">c.ServerApp.allow_remote_access = True  # 大概在694行</span><br><span class="line">c.ServerApp.ip = &#x27;*&#x27;  #监听地址# 大概在853行</span><br><span class="line">c.ServerApp.port = 8848  #端口，默认8888# 大概在969行</span><br></pre></td></tr></table></figure><h1 id="安装其他包"><a href="#安装其他包" class="headerlink" title="安装其他包"></a>安装其他包</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install jupyterlab-language-pack-zh-CN # 中文</span><br><span class="line">登录JupyterLab，在菜单里选择&#x27;设置&#x27; -&gt; &#x27;语言&#x27;，选择 &#x27;中文&#x27;</span><br><span class="line">pip install jupyterlab-kite # 代码补全</span><br><span class="line">pip install jupyterlab-system-monitor # 性能监控</span><br><span class="line">pip install jupyterlab-spellchecker # 拼写检查</span><br><span class="line">pip install black isort  # 代码格式化</span><br><span class="line">pip install jupyterlab-code-formatter# 代码格式化</span><br><span class="line">pip install jupyterlab-git# git</span><br><span class="line">conda install nb_conda# 关联conda</span><br></pre></td></tr></table></figure><h1 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup jupyter-lab &amp;</span><br></pre></td></tr></table></figure><h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><h2 id="Jupyterlab使用plotly图片不显示解决方法"><a href="#Jupyterlab使用plotly图片不显示解决方法" class="headerlink" title="Jupyterlab使用plotly图片不显示解决方法"></a>Jupyterlab使用plotly图片不显示解决方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install nodejs # 需要先安装nodejs</span><br><span class="line">jupyter labextension install jupyterlab-plotly@4.14.3</span><br><span class="line"># 测试</span><br><span class="line">import plotly.graph_objects as go</span><br><span class="line">fig = go.Figure(data=go.Bar(y=[2, 3, 1]))</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> server </tag>
            
            <tag> jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逛github遇到喜欢的项目但是没时间去看的解决方法</title>
      <link href="/2022/02/02/server/%E9%80%9Bgithub%E9%81%87%E5%88%B0%E5%96%9C%E6%AC%A2%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%BD%86%E6%98%AF%E6%B2%A1%E6%97%B6%E9%97%B4%E5%8E%BB%E7%9C%8B%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2022/02/02/server/%E9%80%9Bgithub%E9%81%87%E5%88%B0%E5%96%9C%E6%AC%A2%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%BD%86%E6%98%AF%E6%B2%A1%E6%97%B6%E9%97%B4%E5%8E%BB%E7%9C%8B%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h1><p>逛GitHub遇到喜欢的项目但是暂时又不想看可以clone<br><font color="red">方法:服务器搭建一个简单的flask dmeo，遇到喜欢的把链接发送给服务器，让服务器去下载，我们去干别的事</font></p><h2 id="flask-demo"><a href="#flask-demo" class="headerlink" title="flask demo"></a>flask demo</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import *</span><br><span class="line">import os</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line">from pip import main</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># post请求提交的数据都在json中</span><br><span class="line">@app.route(&#x27;/github&#x27;, methods=[&#x27;POST&#x27;, &#x27;GET&#x27;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        github_url = request.form.get(&#x27;url&#x27;, &#x27;&#x27;)</span><br><span class="line">        github_name = request.form.get(&#x27;name&#x27;, &#x27;&#x27;)</span><br><span class="line">        with open(&quot;download.txt&quot;, &quot;a&quot;) as f:</span><br><span class="line">            f.write(github_url + &quot;\t&quot; + github_name + &quot;\n&quot;)</span><br><span class="line">        if not github_name:</span><br><span class="line">            github_name = uuid.uuid1().hex</span><br><span class="line">        call = &quot;git clone &#123;&#125; &#123;&#125;&quot;.format(</span><br><span class="line">            github_url,</span><br><span class="line">            os.path.join(&quot;/data/github&quot;, github_name.replace(&quot; &quot;, &quot;_&quot;)))</span><br><span class="line">        print(call)</span><br><span class="line">        os.system(call)</span><br><span class="line">        return jsonify(&#123;&#x27;msg&#x27;: &#x27;ok&#x27;, &quot;status&quot;: &quot;created&quot;, &quot;name&quot;: github_name&#125;)</span><br><span class="line">    else:</span><br><span class="line">        return jsonify(&#123;&#x27;msg&#x27;: &#x27;error&#x27;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, port=5000, debug=True)</span><br></pre></td></tr></table></figure><h2 id="upload-code"><a href="#upload-code" class="headerlink" title="upload code"></a>upload code</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;User-Agent&#x27;: &#x27;Apipost client Runtime/+https://www.apipost.cn/&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  &#x27;url&#x27;: &#x27;XXXXXX&#x27;,</span><br><span class="line">  &#x27;name&#x27;: &#x27;XXXXXX&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(&#x27;http://XXXXX:5000/github&#x27;, headers=headers, data=data)</span><br><span class="line">pritn(response.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> github </tag>
            
            <tag> sync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows包管理器scoop</title>
      <link href="/2022/02/02/windows/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8scoop/"/>
      <url>/2022/02/02/windows/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8scoop/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell</span><br><span class="line">set-executionpolicy remotesigned -scope currentuser</span><br><span class="line">iwr -useb get.scoop.sh | iex</span><br><span class="line"># 修改路径</span><br><span class="line">$env:SCOOP=&#x27;F:\App\scoop&#x27;</span><br><span class="line">[Environment]::SetEnvironmentVariable(&#x27;SCOOP&#x27;, $env:SCOOP, &#x27;User&#x27;)</span><br><span class="line"># 配置环境变量</span><br><span class="line">scoop bucket known  # 查看软件商店</span><br><span class="line">scoop bucket add &lt;bucketname&gt;  安装软甲商店</span><br><span class="line"></span><br><span class="line"># 查找软件</span><br><span class="line">scoop search &lt;app&gt;</span><br><span class="line"># 安装软件</span><br><span class="line">scoop install &lt;app&gt;</span><br><span class="line"># 查看软件详细信息</span><br><span class="line">scoop info &lt;app&gt;</span><br><span class="line"># 查看已安装的软件</span><br><span class="line">scoop list</span><br><span class="line"># 卸载软件 -p删除配置文件</span><br><span class="line">scoop uninstall &lt;app&gt;</span><br><span class="line"># 更新scoop本体和软件列表</span><br><span class="line">scoop update</span><br><span class="line"># 更新指定app</span><br><span class="line">scoop update &lt;app&gt;</span><br><span class="line"># 更新所有已安装的软件</span><br><span class="line">scoop update *</span><br><span class="line"># 检查scoop的问题并给出解决问题的建议</span><br><span class="line">scoop checkup</span><br><span class="line"># 查看命令列表</span><br><span class="line">scoop help</span><br><span class="line"># 显示安装包缓存</span><br><span class="line">scoop cache show</span><br><span class="line"># 删除指定的应用包的缓存</span><br><span class="line">scoop cache rm &lt;app&gt;</span><br><span class="line"># 删除所有应用包的缓存</span><br><span class="line">scoop cache rm *</span><br><span class="line"># 安装或更新不需要缓存可以添加参数 -k 或者--no-cache</span><br><span class="line">scoop install -k &lt;app&gt;</span><br><span class="line">scoop update -k *</span><br><span class="line"># 删除旧版本的软件</span><br><span class="line">scoop cleanup [-k] &lt;app&gt;</span><br><span class="line"># 删除所有软件的旧版本</span><br><span class="line">scoop cleanup [-k] *</span><br><span class="line"># 全局安装</span><br><span class="line">scoop install sudo</span><br><span class="line">sudo scoop install -g &lt;app&gt;</span><br><span class="line">scoop list</span><br><span class="line"># 开启多线程下载</span><br><span class="line">scoop instll aria2</span><br><span class="line"># 配置</span><br><span class="line">scoop config aria2-enabled false  # 开启aria2下载</span><br><span class="line">aria2-retry-wait 重试等待秒数 2</span><br><span class="line">aria2-split 单任务 最大连接数 5</span><br><span class="line">aria2-max-connection-per-server 单服务器最大链接数 5 16</span><br><span class="line">aria2-min-split-size 最小文件分片大小 5M</span><br><span class="line"></span><br><span class="line"># example:</span><br><span class="line">scoop config aria2-split 32</span><br><span class="line">scoop config aria2-max-connection-per-server 16</span><br><span class="line">scoop config aria2-min-split-size 1M</span><br><span class="line"></span><br><span class="line"># finally</span><br><span class="line"># 更新 scoop 及软件包列表 </span><br><span class="line">scoop update </span><br><span class="line"># 非全局安装（并禁止安装包缓存） </span><br><span class="line">scoop install -k &lt;app&gt; </span><br><span class="line"># 全局安装（并禁止安装包缓存） </span><br><span class="line">sudo scoop install -gk &lt;app&gt; </span><br><span class="line"># 卸载非全局软件（并删除配置文件） </span><br><span class="line">scoop uninstall -p &lt;app&gt;</span><br><span class="line">#卸载全局软件（并删除配置文件） </span><br><span class="line">sudo scoop uninstall -gp &lt;app&gt; </span><br><span class="line"># 更新所有非全局软件（并禁止安装包缓存） </span><br><span class="line">scoop update -k * </span><br><span class="line"># 更新所有软件（并禁止安装包缓存） </span><br><span class="line">sudo scoop update -gk * </span><br><span class="line"># 删除所有旧版本非全局软件（并删除软件包缓存） </span><br><span class="line">scoop cleanup -k * </span><br><span class="line"># 删除所有旧版本软件（并删除软件包缓存） </span><br><span class="line">sudo scoop cleanup -gk * </span><br><span class="line"># 清除软件包缓存 </span><br><span class="line">scoop cache rm *</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> scoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器上安装vscode-远程写代码</title>
      <link href="/2022/02/02/windows/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85vscode%E8%BF%9C%E7%A8%8B%E5%86%99%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/02/02/windows/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85vscode%E8%BF%9C%E7%A8%8B%E5%86%99%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="服务器上安装vscode-远程写代码"><a href="#服务器上安装vscode-远程写代码" class="headerlink" title="服务器上安装vscode,远程写代码"></a>服务器上安装vscode,远程写代码</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fOL https://github.com/coder/code-server/releases/download/v4.2.0/code-server_4.2.0_amd64.deb</span><br></pre></td></tr></table></figure><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.config/code-server/config.yaml</span><br><span class="line">bind-addr:后面的部分改成0.0.0.0:xxxx(xxxx表示端口号，可随意设置)</span><br><span class="line">password:后面的部分改成你想要的密码</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>code-server</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> dev </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装系统需要安装的软件</title>
      <link href="/2022/02/02/windows/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
      <url>/2022/02/02/windows/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>数据库管理器<br>mysql(社区版本) <a href="https://cdn.mysql.com//Downloads/MySQLInstaller/mysql-installer-community-8.0.29.0.msi">https://cdn.mysql.com//Downloads/MySQLInstaller/mysql-installer-community-8.0.29.0.msi</a><br>redis 没有提供windows的,采用docker部署进行使用(最新版本7.0)<br>mongodb <a href="https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-5.0.8-signed.msi">https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-5.0.8-signed.msi</a><br>mongodb扩展包 <a href="https://fastdl.mongodb.org/tools/db/mongodb-database-tools-windows-x86_64-100.5.2.zip">https://fastdl.mongodb.org/tools/db/mongodb-database-tools-windows-x86_64-100.5.2.zip</a><br>mongo可视化 <a href="https://studio3t.com/download-studio3t-free">https://studio3t.com/download-studio3t-free</a><br>apipost <a href="https://www.apipost.cn/?utm_source=10039&bd_vid=10831028952001221248">https://www.apipost.cn/?utm_source=10039&amp;bd_vid=10831028952001221248</a><br>appium<br>docker <a href="https://www.docker.com/get-started/">https://www.docker.com/get-started/</a><br>ev <a href="https://www.ieway.cn/">https://www.ieway.cn/</a><br>fiddler <a href="https://telerik-fiddler.s3.amazonaws.com/fiddler/FiddlerSetup.exe">https://telerik-fiddler.s3.amazonaws.com/fiddler/FiddlerSetup.exe</a><br>fork <a href="https://git-fork.com/update/win/ForkInstaller.exe">https://git-fork.com/update/win/ForkInstaller.exe</a><br>postman  apipost可以替代<br>vscode <a href="https://az764295.vo.msecnd.net/stable/c3511e6c69bb39013c4a4b7b9566ec1ca73fc4d5/VSCodeUserSetup-x64-1.67.2.exe">https://az764295.vo.msecnd.net/stable/c3511e6c69bb39013c4a4b7b9566ec1ca73fc4d5/VSCodeUserSetup-x64-1.67.2.exe</a><br>wolai <a href="https://cdn.wostatic.cn/dist/installers/wolai%20Setup%201.2.3.exe">https://cdn.wostatic.cn/dist/installers/wolai%20Setup%201.2.3.exe</a><br>阿里云盘 <a href="https://yunpan.aliyun.com/downloads/apps/desktop/aDrive.exe?spm=aliyundrive.index.0.0.2d836020NRbPuN&file=aDrive.exe">https://yunpan.aliyun.com/downloads/apps/desktop/aDrive.exe?spm=aliyundrive.index.0.0.2d836020NRbPuN&amp;file=aDrive.exe</a><br>百度翻译 <a href="https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/win/1.5.2/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91_Setup_1.5.2.exe">https://fanyiapp.cdn.bcebos.com/fanyi-client/pkg/win/1.5.2/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91_Setup_1.5.2.exe</a><br>百度网盘 <a href="https://issuepcdn.baidupcs.com/issue/netdisk/yunguanjia/BaiduNetdisk_7.16.1.11.exe">https://issuepcdn.baidupcs.com/issue/netdisk/yunguanjia/BaiduNetdisk_7.16.1.11.exe</a><br>IDEA(edu) <a href="https://download.jetbrains.com.cn/idea/ideaIC-2022.1.1.exe">https://download.jetbrains.com.cn/idea/ideaIC-2022.1.1.exe</a><br>pycharm(edu) <a href="https://download.jetbrains.com.cn/python/pycharm-community-2022.1.1.exe">https://download.jetbrains.com.cn/python/pycharm-community-2022.1.1.exe</a><br>qq音乐 <a href="https://d1ffb2c84807b83c2b0a8b5ece6bef45.rdt.tfogc.com:49156/dldir1.qq.com/music/clntupate/QQMusicSetup.exe">https://d1ffb2c84807b83c2b0a8b5ece6bef45.rdt.tfogc.com:49156/dldir1.qq.com/music/clntupate/QQMusicSetup.exe</a><br>网易云音乐 <a href="https://d1.music.126.net/dmusic/cloudmusicsetup2.9.9.199909.exe">https://d1.music.126.net/dmusic/cloudmusicsetup2.9.9.199909.exe</a><br>qq影音(potplayer) <a href="https://t1.daumcdn.net/potplayer/PotPlayer/Version/Latest/PotPlayerSetup64.exe">https://t1.daumcdn.net/potplayer/PotPlayer/Version/Latest/PotPlayerSetup64.exe</a><br>banzip -<br>网易邮箱大师 -<br>todesk -<br>devtoys 应用商店<br>火绒<br>驱动<br>Java<br>conda<br>git <a href="https://objects.githubusercontent.com/github-production-release-asset-2e65be/23216272/29132429-5073-44c9-955b-32f89e6f7730?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20220522/us-east-1/s3/aws4_request&X-Amz-Date=20220522T044832Z&X-Amz-Expires=300&X-Amz-Signature=79011f3ac441d966ec7fb4b94d42c9e38128b9584fd91886f43a93aa650c54cd&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=23216272&response-content-disposition=attachment;%20filename=Git-2.36.1-64-bit.exe&response-content-type=application/octet-stream">https://objects.githubusercontent.com/github-production-release-asset-2e65be/23216272/29132429-5073-44c9-955b-32f89e6f7730?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220522%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20220522T044832Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=79011f3ac441d966ec7fb4b94d42c9e38128b9584fd91886f43a93aa650c54cd&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=23216272&amp;response-content-disposition=attachment%3B%20filename%3DGit-2.36.1-64-bit.exe&amp;response-content-type=application%2Foctet-stream</a><br>nvm <a href="https://objects.githubusercontent.com/github-production-release-asset-2e65be/24268127/b4787b17-4983-49be-aa79-70bfd183321e?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20220522/us-east-1/s3/aws4_request&X-Amz-Date=20220522T045146Z&X-Amz-Expires=300&X-Amz-Signature=349001bdff893139876b7b2bd975d4386e0b5d317deeed646bef1b74207bd6a4&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=24268127&response-content-disposition=attachment;%20filename=nvm-setup.exe&response-content-type=application/octet-stream">https://objects.githubusercontent.com/github-production-release-asset-2e65be/24268127/b4787b17-4983-49be-aa79-70bfd183321e?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220522%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20220522T045146Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=349001bdff893139876b7b2bd975d4386e0b5d317deeed646bef1b74207bd6a4&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=24268127&amp;response-content-disposition=attachment%3B%20filename%3Dnvm-setup.exe&amp;response-content-type=application%2Foctet-stream</a><br>迅雷</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ppt转pdf</title>
      <link href="/2022/02/02/python/office/ppt%E8%BD%ACpdf/"/>
      <url>/2022/02/02/python/office/ppt%E8%BD%ACpdf/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> win32com.client</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ppt2pdf</span>(<span class="params">filename, output_filename</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    PPT文件导出为pdf格式</span></span><br><span class="line"><span class="string">    :param filename: PPT文件的名称</span></span><br><span class="line"><span class="string">    :param output_filename: 导出的pdf文件的名称</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ppt_app = win32com.client.Dispatch(<span class="string">&#x27;PowerPoint.Application&#x27;</span>)</span><br><span class="line">    <span class="comment"># ppt_app.Visible = True  # 程序操作应用程序的过程是否可视化</span></span><br><span class="line">    ppt = ppt_app.Presentations.Open(filename)</span><br><span class="line">    <span class="comment"># 17数字是ppt转图片，32数字是ppt转pdf</span></span><br><span class="line">    ppt.SaveAs(output_filename, <span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;导出成pdf格式成功!!!&quot;</span>)</span><br><span class="line">    <span class="comment"># 退出PPT程序</span></span><br><span class="line">    ppt_app.Quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要处理的目录名称</span></span><br><span class="line">dirname = <span class="string">r&#x27;&#x27;</span></span><br><span class="line">filenames = os.listdir(dirname)</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;ppt&#x27;</span>) <span class="keyword">or</span> filename.endswith(<span class="string">&#x27;pptx&#x27;</span>):</span><br><span class="line">        base, ext = filename.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        new_name = base + <span class="string">&#x27;.pdf&#x27;</span></span><br><span class="line">        filename =os.path.join(dirname,filename)</span><br><span class="line">        output_filename =os.path.join(dirname,new_name)</span><br><span class="line">        ppt2pdf(filename, output_filename)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> ppt </tag>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成docx文件</title>
      <link href="/2022/02/02/python/office/%E7%94%9F%E6%88%90docx%E6%96%87%E4%BB%B6/"/>
      <url>/2022/02/02/python/office/%E7%94%9F%E6%88%90docx%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="脚本生成docx文件"><a href="#脚本生成docx文件" class="headerlink" title="脚本生成docx文件"></a>脚本生成docx文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp_code = &#123;<span class="string">&quot;x&quot;</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;张三&quot;</span>],<span class="string">&quot;y&quot;</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;张三&quot;</span>],<span class="string">&quot;z&quot;</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;张三&quot;</span>]&#125;</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="keyword">from</span> docx.oxml.ns <span class="keyword">import</span> qn</span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Pt, RGBColor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_docx</span>(<span class="params">doc_name, text_list</span>):</span><br><span class="line">    doc = Document()</span><br><span class="line">    doc.styles[<span class="string">&#x27;Normal&#x27;</span>].font.name = <span class="string">u&#x27;宋体&#x27;</span></span><br><span class="line">    doc.styles[<span class="string">&#x27;Normal&#x27;</span>]._element.rPr.rFonts.<span class="built_in">set</span>(qn(<span class="string">&#x27;w:eastAsia&#x27;</span>), <span class="string">u&#x27;宋体&#x27;</span>)</span><br><span class="line">    doc.styles[<span class="string">&#x27;Normal&#x27;</span>].font.size = Pt(<span class="number">10.5</span>)</span><br><span class="line">    doc.styles[<span class="string">&#x27;Normal&#x27;</span>].font.color.rgb = RGBColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> text_list:</span><br><span class="line">        doc.add_paragraph(item)</span><br><span class="line">    doc.save(doc_name)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> temp_code.items():</span><br><span class="line">    _doc_name = k + <span class="string">&quot;.docx&quot;</span></span><br><span class="line">    create_docx(_doc_name, v)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> ppt </tag>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es看板的一些操作</title>
      <link href="/2022/01/01/%E6%95%B0%E6%8D%AE%E5%BA%93/nosql/es%E7%9C%8B%E6%9D%BF%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/01/01/%E6%95%B0%E6%8D%AE%E5%BA%93/nosql/es%E7%9C%8B%E6%9D%BF%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="获取全部的index"><a href="#获取全部的index" class="headerlink" title="获取全部的index"></a>获取全部的index</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET _cat/indices?v</span><br></pre></td></tr></table></figure><h1 id="统计idex"><a href="#统计idex" class="headerlink" title="统计idex"></a>统计idex</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET _cat/count/car_taipingyang_info/?v</span><br></pre></td></tr></table></figure><h1 id="查看集群健康状态"><a href="#查看集群健康状态" class="headerlink" title="查看集群健康状态"></a>查看集群健康状态</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET _cat/health</span><br></pre></td></tr></table></figure><h1 id="查看集群健康状态-详细信息"><a href="#查看集群健康状态-详细信息" class="headerlink" title="查看集群健康状态 详细信息"></a>查看集群健康状态 详细信息</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET _cat/health?v</span><br></pre></td></tr></table></figure><h1 id="查看节点信息及详细信息"><a href="#查看节点信息及详细信息" class="headerlink" title="查看节点信息及详细信息"></a>查看节点信息及详细信息</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET _cat/nodes</span><br><span class="line"></span><br><span class="line">GET _cat/nodes?v</span><br></pre></td></tr></table></figure><h1 id="查看es的index信息及详细信息"><a href="#查看es的index信息及详细信息" class="headerlink" title="查看es的index信息及详细信息"></a>查看es的index信息及详细信息</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET _cat/indices</span><br><span class="line">GET _cat/indices?v</span><br></pre></td></tr></table></figure><h1 id="创建index及type"><a href="#创建index及type" class="headerlink" title="创建index及type"></a>创建index及type</h1><h1 id="post-测试OK"><a href="#post-测试OK" class="headerlink" title="post(测试OK)"></a>post(测试OK)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /car_test_info_post/car_deatil</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot; : &#123;</span><br><span class="line">    &quot;id&quot; : &#123;&quot;type&quot; : &quot;long&quot;&#125;,</span><br><span class="line">    &quot;username&quot; : &#123;&quot;type&quot; : &quot;text&quot;&#125;,</span><br><span class="line">    &quot;password&quot; : &#123;&quot;type&quot; : &quot;text&quot;&#125;,</span><br><span class="line">    &quot;age&quot; : &#123;&quot;type&quot; : &quot;integer&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查询type类型"><a href="#查询type类型" class="headerlink" title="查询type类型"></a>查询type类型</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /car_test_info_post/_mapping</span><br></pre></td></tr></table></figure><h1 id="在type中添加数据"><a href="#在type中添加数据" class="headerlink" title="在type中添加数据"></a>在type中添加数据</h1><h1 id="put-OK"><a href="#put-OK" class="headerlink" title="put(OK)"></a>put(OK)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /car_test_info_post/car_deatil/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 22,</span><br><span class="line">  &quot;username&quot;: &quot;zhangsan&quot;,</span><br><span class="line">  &quot;password&quot;: &quot;666&quot;,</span><br><span class="line">  &quot;age&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="post"><a href="#post" class="headerlink" title="post"></a>post</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /car_test_info_post/car_deatil</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">    &quot;id&quot; : 220,</span><br><span class="line">    &quot;username&quot; :&quot;zhangsan02&quot; ,</span><br><span class="line">    &quot;password&quot; : &quot;6669999&quot;,</span><br><span class="line">    &quot;age&quot; : 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /car_test_info_post/car_taipingyang_info</span><br></pre></td></tr></table></figure><h1 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /car_test_info_post/car_deatil/10</span><br></pre></td></tr></table></figure><p>sudo &#x2F;etc&#x2F;init.d&#x2F;bt default<br>q30eBomiNFh</p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv video 相关参数</title>
      <link href="/2019/02/02/python/opencv_video_%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/"/>
      <url>/2019/02/02/python/opencv_video_%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cv2.VideoCapture.get(0) 视频文件的当前位置（播放）以毫秒为单位</span><br><span class="line">cv2.VideoCapture.get(1) 基于以0开始的被捕获或解码的帧索引</span><br><span class="line">cv2.VideoCapture.get(2) 视频文件的相对位置（播放）：0=电影开始，1=影片的结尾。</span><br><span class="line">cv2.VideoCapture.get(3) 在视频流的帧的宽度</span><br><span class="line">cv2.VideoCapture.get(4) 在视频流的帧的高度</span><br><span class="line">cv2.VideoCapture.get(5) 帧速率</span><br><span class="line">cv2.VideoCapture.get(6) 编解码的4字-字符代码</span><br><span class="line">cv2.VideoCapture.get(7) 视频文件中的帧数</span><br><span class="line">cv2.VideoCapture.get(8) 返回对象的格式</span><br><span class="line">cv2.VideoCapture.get(9) 返回后端特定的值，该值指示当前捕获模式</span><br><span class="line">cv2.VideoCapture.get(10) 图像的亮度(仅适用于照相机)</span><br><span class="line">cv2.VideoCapture.get(11) 图像的对比度(仅适用于照相机)</span><br><span class="line">cv2.VideoCapture.get(12) 图像的饱和度(仅适用于照相机)</span><br><span class="line">cv2.VideoCapture.get(13) 色调图像(仅适用于照相机)</span><br><span class="line">cv2.VideoCapture.get(14) 图像增益(仅适用于照相机)（Gain在摄影中表示白平衡提升）</span><br><span class="line">cv2.VideoCapture.get(15) 曝光(仅适用于照相机)</span><br><span class="line">cv2.VideoCapture.get(16) 指示是否应将图像转换为RGB布尔标志</span><br><span class="line">cv2.VideoCapture.get(17) × 暂时不支持</span><br><span class="line">cv2.VideoCapture.get(18) 立体摄像机的矫正标注（目前只有DC1394 v.2.x后端支持这个功能</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/u011436429/article/details/80604590">https://blog.csdn.net/u011436429/article/details/80604590</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> cv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv 画图相关</title>
      <link href="/2019/02/02/python/opencv_%E7%94%BB%E5%9B%BE%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/02/02/python/opencv_%E7%94%BB%E5%9B%BE%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="基本绘图"><a href="#基本绘图" class="headerlink" title="基本绘图"></a>基本绘图</h1><p>opencv 提供了绘制直线、圆形、矩形等基本绘图的功能</p><h2 id="1、绘直线"><a href="#1、绘直线" class="headerlink" title="1、绘直线"></a>1、绘直线</h2><p>cv2.line(画布,起点坐标，终点坐标，颜色，宽度)<br>例如：<br>cv2.line(image,(20,60),(300,400),(0,0,255),2)</p><h2 id="2、绘矩形"><a href="#2、绘矩形" class="headerlink" title="2、绘矩形"></a>2、绘矩形</h2><p>cv2.rectange(画布，起点，终点，颜色，宽度)<br>若宽度大于0，标识边线宽度；如果小于0，表示画实心矩形<br>cv2.rectange(image,(20,60),(300,400),(255,0,0),-1)</p><h2 id="3、绘圆形"><a href="#3、绘圆形" class="headerlink" title="3、绘圆形"></a>3、绘圆形</h2><p>cv2.circle(画布，圆心坐标，半径，颜色，宽度)<br>若宽度大于0，标识边线宽度；如果小于0，表示画实心圆行<br>cv2.circle(image,(300,300),40,(0,255,0),2)</p><h2 id="4、绘多边形"><a href="#4、绘多边形" class="headerlink" title="4、绘多边形"></a>4、绘多边形</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cv2.polylines(画布，点坐标列表，封闭，颜色，宽度)</span></span><br><span class="line"><span class="comment"># 点坐标列表是一个numpy类型的列表，需要导入numpy 包</span></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment"># 创建点坐标</span></span><br><span class="line">pts = numpy.array([[<span class="number">20</span>,<span class="number">60</span>],[<span class="number">300</span>,<span class="number">280</span>],[<span class="number">150</span>,<span class="number">200</span>]],numpy.int32)</span><br><span class="line">cv2.rectange(image,[pts],<span class="literal">True</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="5、添加文字"><a href="#5、添加文字" class="headerlink" title="5、添加文字"></a>5、添加文字</h2><p>cv2.putText(画布，文字，位置，字体，大小，颜色，文字粗细)<br>字体：<br>　　cv2.FONT_HERSHEY_SIMPLEX  正常尺寸的sans-serif字体<br>　　cv2.FONT_HERSHEY_SPLAIN   小尺寸的sans-serif字体<br>　　cv2.FONT_HERSHEY_COMPLEX  正常尺寸的serif字体<br>　　cv2.FONT_HERSHEY_SCREIPT_SIMPLEX  手写字体风格</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">cv2.namedWindow(<span class="string">&quot;Image&quot;</span>) <span class="comment">#创建窗口</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;ver.jpg&#x27;</span>) <span class="comment">#读取图像</span></span><br><span class="line">cv2.line(img,(<span class="number">50</span>,<span class="number">50</span>),(<span class="number">300</span>,<span class="number">300</span>),(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">2</span>) <span class="comment">#画直线</span></span><br><span class="line">cv2.rectangle(img,(<span class="number">500</span>,<span class="number">20</span>),(<span class="number">580</span>,<span class="number">100</span>),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),-<span class="number">1</span>)  <span class="comment">#画矩形</span></span><br><span class="line">cv2.circle(img,(<span class="number">500</span>,<span class="number">300</span>),<span class="number">40</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>),-<span class="number">1</span>) <span class="comment">#画圆形</span></span><br><span class="line">pts = numpy.array([[<span class="number">300</span>,<span class="number">300</span>],[<span class="number">300</span>,<span class="number">340</span>],[<span class="number">350</span>,<span class="number">320</span>]],numpy.int32)  <span class="comment">#用numpy形成坐标列表</span></span><br><span class="line">cv2.polylines(img,[pts],<span class="literal">True</span>,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">2</span>)  <span class="comment">#画多边形</span></span><br><span class="line">cv2.putText(img,<span class="string">&#x27;测试&#x27;</span>,(<span class="number">350</span>,<span class="number">420</span>),cv2.FONT_HERSHEY_SIMPLEX,<span class="number">1</span>,(<span class="number">255</span>,<span class="number">232</span>,<span class="number">133</span>),<span class="number">2</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Image&#x27;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyWindow(<span class="string">&quot;Image&quot;</span>)  <span class="comment">#关闭窗口</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
